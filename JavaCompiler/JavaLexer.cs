//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Java.g 2013-01-17 16:31:36

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  JavaCompiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class JavaLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSERT=20;
	public const int ASSIGN=21;
	public const int AT=22;
	public const int BIT_SHIFT_RIGHT=23;
	public const int BIT_SHIFT_RIGHT_ASSIGN=24;
	public const int BLOCK_SCOPE=25;
	public const int BOOLEAN=26;
	public const int BREAK=27;
	public const int BYTE=28;
	public const int CASE=29;
	public const int CAST_EXPR=30;
	public const int CATCH=31;
	public const int CATCH_CLAUSE_LIST=32;
	public const int CHAR=33;
	public const int CHARACTER_LITERAL=34;
	public const int CLASS=35;
	public const int CLASS_CONSTRUCTOR_CALL=36;
	public const int CLASS_INSTANCE_INITIALIZER=37;
	public const int CLASS_STATIC_INITIALIZER=38;
	public const int CLASS_TOP_LEVEL_SCOPE=39;
	public const int COLON=40;
	public const int COMMA=41;
	public const int COMMENT=42;
	public const int CONSTRUCTOR_DECL=43;
	public const int CONTINUE=44;
	public const int DEC=45;
	public const int DECIMAL_LITERAL=46;
	public const int DEFAULT=47;
	public const int DIV=48;
	public const int DIV_ASSIGN=49;
	public const int DO=50;
	public const int DOT=51;
	public const int DOTSTAR=52;
	public const int DOUBLE=53;
	public const int ELLIPSIS=54;
	public const int ELSE=55;
	public const int ENUM=56;
	public const int ENUM_TOP_LEVEL_SCOPE=57;
	public const int EQUAL=58;
	public const int ESCAPE_SEQUENCE=59;
	public const int EXPONENT=60;
	public const int EXPR=61;
	public const int EXTENDS=62;
	public const int EXTENDS_BOUND_LIST=63;
	public const int EXTENDS_CLAUSE=64;
	public const int FALSE=65;
	public const int FINAL=66;
	public const int FINALLY=67;
	public const int FLOAT=68;
	public const int FLOATING_POINT_LITERAL=69;
	public const int FLOAT_TYPE_SUFFIX=70;
	public const int FOR=71;
	public const int FORMAL_PARAM_LIST=72;
	public const int FORMAL_PARAM_STD_DECL=73;
	public const int FORMAL_PARAM_VARARG_DECL=74;
	public const int FOR_CONDITION=75;
	public const int FOR_EACH=76;
	public const int FOR_INIT=77;
	public const int FOR_UPDATE=78;
	public const int FUNCTION_METHOD_DECL=79;
	public const int GENERIC_TYPE_ARG_LIST=80;
	public const int GENERIC_TYPE_PARAM_LIST=81;
	public const int GREATER_OR_EQUAL=82;
	public const int GREATER_THAN=83;
	public const int HEX_DIGIT=84;
	public const int HEX_LITERAL=85;
	public const int IDENT=86;
	public const int IF=87;
	public const int IMPLEMENTS=88;
	public const int IMPLEMENTS_CLAUSE=89;
	public const int IMPORT=90;
	public const int INC=91;
	public const int INSTANCEOF=92;
	public const int INT=93;
	public const int INTEGER_TYPE_SUFFIX=94;
	public const int INTERFACE=95;
	public const int INTERFACE_TOP_LEVEL_SCOPE=96;
	public const int JAVA_ID_PART=97;
	public const int JAVA_ID_START=98;
	public const int JAVA_SOURCE=99;
	public const int LABELED_STATEMENT=100;
	public const int LBRACK=101;
	public const int LCURLY=102;
	public const int LESS_OR_EQUAL=103;
	public const int LESS_THAN=104;
	public const int LINE_COMMENT=105;
	public const int LOCAL_MODIFIER_LIST=106;
	public const int LOGICAL_AND=107;
	public const int LOGICAL_NOT=108;
	public const int LOGICAL_OR=109;
	public const int LONG=110;
	public const int LPAREN=111;
	public const int METHOD_CALL=112;
	public const int MINUS=113;
	public const int MINUS_ASSIGN=114;
	public const int MOD=115;
	public const int MODIFIER_LIST=116;
	public const int MOD_ASSIGN=117;
	public const int NATIVE=118;
	public const int NEW=119;
	public const int NOT=120;
	public const int NOT_EQUAL=121;
	public const int NULL=122;
	public const int OCTAL_ESCAPE=123;
	public const int OCTAL_LITERAL=124;
	public const int OR=125;
	public const int OR_ASSIGN=126;
	public const int PACKAGE=127;
	public const int PARENTESIZED_EXPR=128;
	public const int PLUS=129;
	public const int PLUS_ASSIGN=130;
	public const int POST_DEC=131;
	public const int POST_INC=132;
	public const int PRE_DEC=133;
	public const int PRE_INC=134;
	public const int PRIVATE=135;
	public const int PROTECTED=136;
	public const int PUBLIC=137;
	public const int QUALIFIED_TYPE_IDENT=138;
	public const int QUESTION=139;
	public const int RBRACK=140;
	public const int RCURLY=141;
	public const int RETURN=142;
	public const int RPAREN=143;
	public const int SEMI=144;
	public const int SHIFT_LEFT=145;
	public const int SHIFT_LEFT_ASSIGN=146;
	public const int SHIFT_RIGHT=147;
	public const int SHIFT_RIGHT_ASSIGN=148;
	public const int SHORT=149;
	public const int STAR=150;
	public const int STAR_ASSIGN=151;
	public const int STATIC=152;
	public const int STATIC_ARRAY_CREATOR=153;
	public const int STRICTFP=154;
	public const int STRING_LITERAL=155;
	public const int SUPER=156;
	public const int SUPER_CONSTRUCTOR_CALL=157;
	public const int SWITCH=158;
	public const int SWITCH_BLOCK_LABEL_LIST=159;
	public const int SYNCHRONIZED=160;
	public const int THIS=161;
	public const int THIS_CONSTRUCTOR_CALL=162;
	public const int THROW=163;
	public const int THROWS=164;
	public const int THROWS_CLAUSE=165;
	public const int TRANSIENT=166;
	public const int TRUE=167;
	public const int TRY=168;
	public const int TYPE=169;
	public const int UNARY_MINUS=170;
	public const int UNARY_PLUS=171;
	public const int UNICODE_ESCAPE=172;
	public const int VAR_DECLARATION=173;
	public const int VAR_DECLARATOR=174;
	public const int VAR_DECLARATOR_LIST=175;
	public const int VOID=176;
	public const int VOID_METHOD_DECL=177;
	public const int VOLATILE=178;
	public const int WHILE=179;
	public const int WS=180;
	public const int XOR=181;
	public const int XOR_ASSIGN=182;

		public bool PreserveWhitespacesAndComments { get; set; }


    // delegates
    // delegators

	public JavaLexer()
	{
		OnCreated();
	}

	public JavaLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public JavaLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Java.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ABSTRACT();
	partial void LeaveRule_ABSTRACT();

	// $ANTLR start "ABSTRACT"
	[GrammarRule("ABSTRACT")]
	private void mABSTRACT()
	{
		EnterRule_ABSTRACT();
		EnterRule("ABSTRACT", 1);
		TraceIn("ABSTRACT", 1);
		try
		{
			int _type = ABSTRACT;
			int _channel = DefaultTokenChannel;
			// Java.g:12:10: ( 'abstract' )
			DebugEnterAlt(1);
			// Java.g:12:12: 'abstract'
			{
			DebugLocation(12, 12);
			Match("abstract"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ABSTRACT", 1);
			LeaveRule("ABSTRACT", 1);
			LeaveRule_ABSTRACT();
		}
	}
	// $ANTLR end "ABSTRACT"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 2);
		TraceIn("AND", 2);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// Java.g:13:5: ( '&' )
			DebugEnterAlt(1);
			// Java.g:13:7: '&'
			{
			DebugLocation(13, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 2);
			LeaveRule("AND", 2);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_AND_ASSIGN();
	partial void LeaveRule_AND_ASSIGN();

	// $ANTLR start "AND_ASSIGN"
	[GrammarRule("AND_ASSIGN")]
	private void mAND_ASSIGN()
	{
		EnterRule_AND_ASSIGN();
		EnterRule("AND_ASSIGN", 3);
		TraceIn("AND_ASSIGN", 3);
		try
		{
			int _type = AND_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:14:12: ( '&=' )
			DebugEnterAlt(1);
			// Java.g:14:14: '&='
			{
			DebugLocation(14, 14);
			Match("&="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND_ASSIGN", 3);
			LeaveRule("AND_ASSIGN", 3);
			LeaveRule_AND_ASSIGN();
		}
	}
	// $ANTLR end "AND_ASSIGN"

	partial void EnterRule_ASSERT();
	partial void LeaveRule_ASSERT();

	// $ANTLR start "ASSERT"
	[GrammarRule("ASSERT")]
	private void mASSERT()
	{
		EnterRule_ASSERT();
		EnterRule("ASSERT", 4);
		TraceIn("ASSERT", 4);
		try
		{
			int _type = ASSERT;
			int _channel = DefaultTokenChannel;
			// Java.g:15:8: ( 'assert' )
			DebugEnterAlt(1);
			// Java.g:15:10: 'assert'
			{
			DebugLocation(15, 10);
			Match("assert"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSERT", 4);
			LeaveRule("ASSERT", 4);
			LeaveRule_ASSERT();
		}
	}
	// $ANTLR end "ASSERT"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 5);
		TraceIn("ASSIGN", 5);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:16:8: ( '=' )
			DebugEnterAlt(1);
			// Java.g:16:10: '='
			{
			DebugLocation(16, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 5);
			LeaveRule("ASSIGN", 5);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_AT();
	partial void LeaveRule_AT();

	// $ANTLR start "AT"
	[GrammarRule("AT")]
	private void mAT()
	{
		EnterRule_AT();
		EnterRule("AT", 6);
		TraceIn("AT", 6);
		try
		{
			int _type = AT;
			int _channel = DefaultTokenChannel;
			// Java.g:17:4: ( '@' )
			DebugEnterAlt(1);
			// Java.g:17:6: '@'
			{
			DebugLocation(17, 6);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AT", 6);
			LeaveRule("AT", 6);
			LeaveRule_AT();
		}
	}
	// $ANTLR end "AT"

	partial void EnterRule_BIT_SHIFT_RIGHT();
	partial void LeaveRule_BIT_SHIFT_RIGHT();

	// $ANTLR start "BIT_SHIFT_RIGHT"
	[GrammarRule("BIT_SHIFT_RIGHT")]
	private void mBIT_SHIFT_RIGHT()
	{
		EnterRule_BIT_SHIFT_RIGHT();
		EnterRule("BIT_SHIFT_RIGHT", 7);
		TraceIn("BIT_SHIFT_RIGHT", 7);
		try
		{
			int _type = BIT_SHIFT_RIGHT;
			int _channel = DefaultTokenChannel;
			// Java.g:18:17: ( '>>>' )
			DebugEnterAlt(1);
			// Java.g:18:19: '>>>'
			{
			DebugLocation(18, 19);
			Match(">>>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_SHIFT_RIGHT", 7);
			LeaveRule("BIT_SHIFT_RIGHT", 7);
			LeaveRule_BIT_SHIFT_RIGHT();
		}
	}
	// $ANTLR end "BIT_SHIFT_RIGHT"

	partial void EnterRule_BIT_SHIFT_RIGHT_ASSIGN();
	partial void LeaveRule_BIT_SHIFT_RIGHT_ASSIGN();

	// $ANTLR start "BIT_SHIFT_RIGHT_ASSIGN"
	[GrammarRule("BIT_SHIFT_RIGHT_ASSIGN")]
	private void mBIT_SHIFT_RIGHT_ASSIGN()
	{
		EnterRule_BIT_SHIFT_RIGHT_ASSIGN();
		EnterRule("BIT_SHIFT_RIGHT_ASSIGN", 8);
		TraceIn("BIT_SHIFT_RIGHT_ASSIGN", 8);
		try
		{
			int _type = BIT_SHIFT_RIGHT_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:19:24: ( '>>>=' )
			DebugEnterAlt(1);
			// Java.g:19:26: '>>>='
			{
			DebugLocation(19, 26);
			Match(">>>="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_SHIFT_RIGHT_ASSIGN", 8);
			LeaveRule("BIT_SHIFT_RIGHT_ASSIGN", 8);
			LeaveRule_BIT_SHIFT_RIGHT_ASSIGN();
		}
	}
	// $ANTLR end "BIT_SHIFT_RIGHT_ASSIGN"

	partial void EnterRule_BOOLEAN();
	partial void LeaveRule_BOOLEAN();

	// $ANTLR start "BOOLEAN"
	[GrammarRule("BOOLEAN")]
	private void mBOOLEAN()
	{
		EnterRule_BOOLEAN();
		EnterRule("BOOLEAN", 9);
		TraceIn("BOOLEAN", 9);
		try
		{
			int _type = BOOLEAN;
			int _channel = DefaultTokenChannel;
			// Java.g:20:9: ( 'boolean' )
			DebugEnterAlt(1);
			// Java.g:20:11: 'boolean'
			{
			DebugLocation(20, 11);
			Match("boolean"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOLEAN", 9);
			LeaveRule("BOOLEAN", 9);
			LeaveRule_BOOLEAN();
		}
	}
	// $ANTLR end "BOOLEAN"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 10);
		TraceIn("BREAK", 10);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// Java.g:21:7: ( 'break' )
			DebugEnterAlt(1);
			// Java.g:21:9: 'break'
			{
			DebugLocation(21, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 10);
			LeaveRule("BREAK", 10);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_BYTE();
	partial void LeaveRule_BYTE();

	// $ANTLR start "BYTE"
	[GrammarRule("BYTE")]
	private void mBYTE()
	{
		EnterRule_BYTE();
		EnterRule("BYTE", 11);
		TraceIn("BYTE", 11);
		try
		{
			int _type = BYTE;
			int _channel = DefaultTokenChannel;
			// Java.g:22:6: ( 'byte' )
			DebugEnterAlt(1);
			// Java.g:22:8: 'byte'
			{
			DebugLocation(22, 8);
			Match("byte"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BYTE", 11);
			LeaveRule("BYTE", 11);
			LeaveRule_BYTE();
		}
	}
	// $ANTLR end "BYTE"

	partial void EnterRule_CASE();
	partial void LeaveRule_CASE();

	// $ANTLR start "CASE"
	[GrammarRule("CASE")]
	private void mCASE()
	{
		EnterRule_CASE();
		EnterRule("CASE", 12);
		TraceIn("CASE", 12);
		try
		{
			int _type = CASE;
			int _channel = DefaultTokenChannel;
			// Java.g:23:6: ( 'case' )
			DebugEnterAlt(1);
			// Java.g:23:8: 'case'
			{
			DebugLocation(23, 8);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASE", 12);
			LeaveRule("CASE", 12);
			LeaveRule_CASE();
		}
	}
	// $ANTLR end "CASE"

	partial void EnterRule_CATCH();
	partial void LeaveRule_CATCH();

	// $ANTLR start "CATCH"
	[GrammarRule("CATCH")]
	private void mCATCH()
	{
		EnterRule_CATCH();
		EnterRule("CATCH", 13);
		TraceIn("CATCH", 13);
		try
		{
			int _type = CATCH;
			int _channel = DefaultTokenChannel;
			// Java.g:24:7: ( 'catch' )
			DebugEnterAlt(1);
			// Java.g:24:9: 'catch'
			{
			DebugLocation(24, 9);
			Match("catch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CATCH", 13);
			LeaveRule("CATCH", 13);
			LeaveRule_CATCH();
		}
	}
	// $ANTLR end "CATCH"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 14);
		TraceIn("CHAR", 14);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// Java.g:25:6: ( 'char' )
			DebugEnterAlt(1);
			// Java.g:25:8: 'char'
			{
			DebugLocation(25, 8);
			Match("char"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 14);
			LeaveRule("CHAR", 14);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_CLASS();
	partial void LeaveRule_CLASS();

	// $ANTLR start "CLASS"
	[GrammarRule("CLASS")]
	private void mCLASS()
	{
		EnterRule_CLASS();
		EnterRule("CLASS", 15);
		TraceIn("CLASS", 15);
		try
		{
			int _type = CLASS;
			int _channel = DefaultTokenChannel;
			// Java.g:26:7: ( 'class' )
			DebugEnterAlt(1);
			// Java.g:26:9: 'class'
			{
			DebugLocation(26, 9);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLASS", 15);
			LeaveRule("CLASS", 15);
			LeaveRule_CLASS();
		}
	}
	// $ANTLR end "CLASS"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 16);
		TraceIn("COLON", 16);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// Java.g:27:7: ( ':' )
			DebugEnterAlt(1);
			// Java.g:27:9: ':'
			{
			DebugLocation(27, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 16);
			LeaveRule("COLON", 16);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 17);
		TraceIn("COMMA", 17);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// Java.g:28:7: ( ',' )
			DebugEnterAlt(1);
			// Java.g:28:9: ','
			{
			DebugLocation(28, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 17);
			LeaveRule("COMMA", 17);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_CONTINUE();
	partial void LeaveRule_CONTINUE();

	// $ANTLR start "CONTINUE"
	[GrammarRule("CONTINUE")]
	private void mCONTINUE()
	{
		EnterRule_CONTINUE();
		EnterRule("CONTINUE", 18);
		TraceIn("CONTINUE", 18);
		try
		{
			int _type = CONTINUE;
			int _channel = DefaultTokenChannel;
			// Java.g:29:10: ( 'continue' )
			DebugEnterAlt(1);
			// Java.g:29:12: 'continue'
			{
			DebugLocation(29, 12);
			Match("continue"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CONTINUE", 18);
			LeaveRule("CONTINUE", 18);
			LeaveRule_CONTINUE();
		}
	}
	// $ANTLR end "CONTINUE"

	partial void EnterRule_DEC();
	partial void LeaveRule_DEC();

	// $ANTLR start "DEC"
	[GrammarRule("DEC")]
	private void mDEC()
	{
		EnterRule_DEC();
		EnterRule("DEC", 19);
		TraceIn("DEC", 19);
		try
		{
			int _type = DEC;
			int _channel = DefaultTokenChannel;
			// Java.g:30:5: ( '--' )
			DebugEnterAlt(1);
			// Java.g:30:7: '--'
			{
			DebugLocation(30, 7);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEC", 19);
			LeaveRule("DEC", 19);
			LeaveRule_DEC();
		}
	}
	// $ANTLR end "DEC"

	partial void EnterRule_DEFAULT();
	partial void LeaveRule_DEFAULT();

	// $ANTLR start "DEFAULT"
	[GrammarRule("DEFAULT")]
	private void mDEFAULT()
	{
		EnterRule_DEFAULT();
		EnterRule("DEFAULT", 20);
		TraceIn("DEFAULT", 20);
		try
		{
			int _type = DEFAULT;
			int _channel = DefaultTokenChannel;
			// Java.g:31:9: ( 'default' )
			DebugEnterAlt(1);
			// Java.g:31:11: 'default'
			{
			DebugLocation(31, 11);
			Match("default"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEFAULT", 20);
			LeaveRule("DEFAULT", 20);
			LeaveRule_DEFAULT();
		}
	}
	// $ANTLR end "DEFAULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 21);
		TraceIn("DIV", 21);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// Java.g:32:5: ( '/' )
			DebugEnterAlt(1);
			// Java.g:32:7: '/'
			{
			DebugLocation(32, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 21);
			LeaveRule("DIV", 21);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_DIV_ASSIGN();
	partial void LeaveRule_DIV_ASSIGN();

	// $ANTLR start "DIV_ASSIGN"
	[GrammarRule("DIV_ASSIGN")]
	private void mDIV_ASSIGN()
	{
		EnterRule_DIV_ASSIGN();
		EnterRule("DIV_ASSIGN", 22);
		TraceIn("DIV_ASSIGN", 22);
		try
		{
			int _type = DIV_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:33:12: ( '/=' )
			DebugEnterAlt(1);
			// Java.g:33:14: '/='
			{
			DebugLocation(33, 14);
			Match("/="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV_ASSIGN", 22);
			LeaveRule("DIV_ASSIGN", 22);
			LeaveRule_DIV_ASSIGN();
		}
	}
	// $ANTLR end "DIV_ASSIGN"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 23);
		TraceIn("DO", 23);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// Java.g:34:4: ( 'do' )
			DebugEnterAlt(1);
			// Java.g:34:6: 'do'
			{
			DebugLocation(34, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 23);
			LeaveRule("DO", 23);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 24);
		TraceIn("DOT", 24);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// Java.g:35:5: ( '.' )
			DebugEnterAlt(1);
			// Java.g:35:7: '.'
			{
			DebugLocation(35, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 24);
			LeaveRule("DOT", 24);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_DOTSTAR();
	partial void LeaveRule_DOTSTAR();

	// $ANTLR start "DOTSTAR"
	[GrammarRule("DOTSTAR")]
	private void mDOTSTAR()
	{
		EnterRule_DOTSTAR();
		EnterRule("DOTSTAR", 25);
		TraceIn("DOTSTAR", 25);
		try
		{
			int _type = DOTSTAR;
			int _channel = DefaultTokenChannel;
			// Java.g:36:9: ( '.*' )
			DebugEnterAlt(1);
			// Java.g:36:11: '.*'
			{
			DebugLocation(36, 11);
			Match(".*"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOTSTAR", 25);
			LeaveRule("DOTSTAR", 25);
			LeaveRule_DOTSTAR();
		}
	}
	// $ANTLR end "DOTSTAR"

	partial void EnterRule_DOUBLE();
	partial void LeaveRule_DOUBLE();

	// $ANTLR start "DOUBLE"
	[GrammarRule("DOUBLE")]
	private void mDOUBLE()
	{
		EnterRule_DOUBLE();
		EnterRule("DOUBLE", 26);
		TraceIn("DOUBLE", 26);
		try
		{
			int _type = DOUBLE;
			int _channel = DefaultTokenChannel;
			// Java.g:37:8: ( 'double' )
			DebugEnterAlt(1);
			// Java.g:37:10: 'double'
			{
			DebugLocation(37, 10);
			Match("double"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE", 26);
			LeaveRule("DOUBLE", 26);
			LeaveRule_DOUBLE();
		}
	}
	// $ANTLR end "DOUBLE"

	partial void EnterRule_ELLIPSIS();
	partial void LeaveRule_ELLIPSIS();

	// $ANTLR start "ELLIPSIS"
	[GrammarRule("ELLIPSIS")]
	private void mELLIPSIS()
	{
		EnterRule_ELLIPSIS();
		EnterRule("ELLIPSIS", 27);
		TraceIn("ELLIPSIS", 27);
		try
		{
			int _type = ELLIPSIS;
			int _channel = DefaultTokenChannel;
			// Java.g:38:10: ( '...' )
			DebugEnterAlt(1);
			// Java.g:38:12: '...'
			{
			DebugLocation(38, 12);
			Match("..."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELLIPSIS", 27);
			LeaveRule("ELLIPSIS", 27);
			LeaveRule_ELLIPSIS();
		}
	}
	// $ANTLR end "ELLIPSIS"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 28);
		TraceIn("ELSE", 28);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// Java.g:39:6: ( 'else' )
			DebugEnterAlt(1);
			// Java.g:39:8: 'else'
			{
			DebugLocation(39, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 28);
			LeaveRule("ELSE", 28);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_ENUM();
	partial void LeaveRule_ENUM();

	// $ANTLR start "ENUM"
	[GrammarRule("ENUM")]
	private void mENUM()
	{
		EnterRule_ENUM();
		EnterRule("ENUM", 29);
		TraceIn("ENUM", 29);
		try
		{
			int _type = ENUM;
			int _channel = DefaultTokenChannel;
			// Java.g:40:6: ( 'enum' )
			DebugEnterAlt(1);
			// Java.g:40:8: 'enum'
			{
			DebugLocation(40, 8);
			Match("enum"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENUM", 29);
			LeaveRule("ENUM", 29);
			LeaveRule_ENUM();
		}
	}
	// $ANTLR end "ENUM"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 30);
		TraceIn("EQUAL", 30);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// Java.g:41:7: ( '==' )
			DebugEnterAlt(1);
			// Java.g:41:9: '=='
			{
			DebugLocation(41, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 30);
			LeaveRule("EQUAL", 30);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_EXTENDS();
	partial void LeaveRule_EXTENDS();

	// $ANTLR start "EXTENDS"
	[GrammarRule("EXTENDS")]
	private void mEXTENDS()
	{
		EnterRule_EXTENDS();
		EnterRule("EXTENDS", 31);
		TraceIn("EXTENDS", 31);
		try
		{
			int _type = EXTENDS;
			int _channel = DefaultTokenChannel;
			// Java.g:42:9: ( 'extends' )
			DebugEnterAlt(1);
			// Java.g:42:11: 'extends'
			{
			DebugLocation(42, 11);
			Match("extends"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXTENDS", 31);
			LeaveRule("EXTENDS", 31);
			LeaveRule_EXTENDS();
		}
	}
	// $ANTLR end "EXTENDS"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 32);
		TraceIn("FALSE", 32);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// Java.g:43:7: ( 'false' )
			DebugEnterAlt(1);
			// Java.g:43:9: 'false'
			{
			DebugLocation(43, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 32);
			LeaveRule("FALSE", 32);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_FINAL();
	partial void LeaveRule_FINAL();

	// $ANTLR start "FINAL"
	[GrammarRule("FINAL")]
	private void mFINAL()
	{
		EnterRule_FINAL();
		EnterRule("FINAL", 33);
		TraceIn("FINAL", 33);
		try
		{
			int _type = FINAL;
			int _channel = DefaultTokenChannel;
			// Java.g:44:7: ( 'final' )
			DebugEnterAlt(1);
			// Java.g:44:9: 'final'
			{
			DebugLocation(44, 9);
			Match("final"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FINAL", 33);
			LeaveRule("FINAL", 33);
			LeaveRule_FINAL();
		}
	}
	// $ANTLR end "FINAL"

	partial void EnterRule_FINALLY();
	partial void LeaveRule_FINALLY();

	// $ANTLR start "FINALLY"
	[GrammarRule("FINALLY")]
	private void mFINALLY()
	{
		EnterRule_FINALLY();
		EnterRule("FINALLY", 34);
		TraceIn("FINALLY", 34);
		try
		{
			int _type = FINALLY;
			int _channel = DefaultTokenChannel;
			// Java.g:45:9: ( 'finally' )
			DebugEnterAlt(1);
			// Java.g:45:11: 'finally'
			{
			DebugLocation(45, 11);
			Match("finally"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FINALLY", 34);
			LeaveRule("FINALLY", 34);
			LeaveRule_FINALLY();
		}
	}
	// $ANTLR end "FINALLY"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 35);
		TraceIn("FLOAT", 35);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Java.g:46:7: ( 'float' )
			DebugEnterAlt(1);
			// Java.g:46:9: 'float'
			{
			DebugLocation(46, 9);
			Match("float"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 35);
			LeaveRule("FLOAT", 35);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 36);
		TraceIn("FOR", 36);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// Java.g:47:5: ( 'for' )
			DebugEnterAlt(1);
			// Java.g:47:7: 'for'
			{
			DebugLocation(47, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 36);
			LeaveRule("FOR", 36);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_GREATER_OR_EQUAL();
	partial void LeaveRule_GREATER_OR_EQUAL();

	// $ANTLR start "GREATER_OR_EQUAL"
	[GrammarRule("GREATER_OR_EQUAL")]
	private void mGREATER_OR_EQUAL()
	{
		EnterRule_GREATER_OR_EQUAL();
		EnterRule("GREATER_OR_EQUAL", 37);
		TraceIn("GREATER_OR_EQUAL", 37);
		try
		{
			int _type = GREATER_OR_EQUAL;
			int _channel = DefaultTokenChannel;
			// Java.g:48:18: ( '>=' )
			DebugEnterAlt(1);
			// Java.g:48:20: '>='
			{
			DebugLocation(48, 20);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_OR_EQUAL", 37);
			LeaveRule("GREATER_OR_EQUAL", 37);
			LeaveRule_GREATER_OR_EQUAL();
		}
	}
	// $ANTLR end "GREATER_OR_EQUAL"

	partial void EnterRule_GREATER_THAN();
	partial void LeaveRule_GREATER_THAN();

	// $ANTLR start "GREATER_THAN"
	[GrammarRule("GREATER_THAN")]
	private void mGREATER_THAN()
	{
		EnterRule_GREATER_THAN();
		EnterRule("GREATER_THAN", 38);
		TraceIn("GREATER_THAN", 38);
		try
		{
			int _type = GREATER_THAN;
			int _channel = DefaultTokenChannel;
			// Java.g:49:14: ( '>' )
			DebugEnterAlt(1);
			// Java.g:49:16: '>'
			{
			DebugLocation(49, 16);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_THAN", 38);
			LeaveRule("GREATER_THAN", 38);
			LeaveRule_GREATER_THAN();
		}
	}
	// $ANTLR end "GREATER_THAN"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 39);
		TraceIn("IF", 39);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// Java.g:50:4: ( 'if' )
			DebugEnterAlt(1);
			// Java.g:50:6: 'if'
			{
			DebugLocation(50, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 39);
			LeaveRule("IF", 39);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IMPLEMENTS();
	partial void LeaveRule_IMPLEMENTS();

	// $ANTLR start "IMPLEMENTS"
	[GrammarRule("IMPLEMENTS")]
	private void mIMPLEMENTS()
	{
		EnterRule_IMPLEMENTS();
		EnterRule("IMPLEMENTS", 40);
		TraceIn("IMPLEMENTS", 40);
		try
		{
			int _type = IMPLEMENTS;
			int _channel = DefaultTokenChannel;
			// Java.g:51:12: ( 'implements' )
			DebugEnterAlt(1);
			// Java.g:51:14: 'implements'
			{
			DebugLocation(51, 14);
			Match("implements"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IMPLEMENTS", 40);
			LeaveRule("IMPLEMENTS", 40);
			LeaveRule_IMPLEMENTS();
		}
	}
	// $ANTLR end "IMPLEMENTS"

	partial void EnterRule_IMPORT();
	partial void LeaveRule_IMPORT();

	// $ANTLR start "IMPORT"
	[GrammarRule("IMPORT")]
	private void mIMPORT()
	{
		EnterRule_IMPORT();
		EnterRule("IMPORT", 41);
		TraceIn("IMPORT", 41);
		try
		{
			int _type = IMPORT;
			int _channel = DefaultTokenChannel;
			// Java.g:52:8: ( 'import' )
			DebugEnterAlt(1);
			// Java.g:52:10: 'import'
			{
			DebugLocation(52, 10);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IMPORT", 41);
			LeaveRule("IMPORT", 41);
			LeaveRule_IMPORT();
		}
	}
	// $ANTLR end "IMPORT"

	partial void EnterRule_INC();
	partial void LeaveRule_INC();

	// $ANTLR start "INC"
	[GrammarRule("INC")]
	private void mINC()
	{
		EnterRule_INC();
		EnterRule("INC", 42);
		TraceIn("INC", 42);
		try
		{
			int _type = INC;
			int _channel = DefaultTokenChannel;
			// Java.g:53:5: ( '++' )
			DebugEnterAlt(1);
			// Java.g:53:7: '++'
			{
			DebugLocation(53, 7);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INC", 42);
			LeaveRule("INC", 42);
			LeaveRule_INC();
		}
	}
	// $ANTLR end "INC"

	partial void EnterRule_INSTANCEOF();
	partial void LeaveRule_INSTANCEOF();

	// $ANTLR start "INSTANCEOF"
	[GrammarRule("INSTANCEOF")]
	private void mINSTANCEOF()
	{
		EnterRule_INSTANCEOF();
		EnterRule("INSTANCEOF", 43);
		TraceIn("INSTANCEOF", 43);
		try
		{
			int _type = INSTANCEOF;
			int _channel = DefaultTokenChannel;
			// Java.g:54:12: ( 'instanceof' )
			DebugEnterAlt(1);
			// Java.g:54:14: 'instanceof'
			{
			DebugLocation(54, 14);
			Match("instanceof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSTANCEOF", 43);
			LeaveRule("INSTANCEOF", 43);
			LeaveRule_INSTANCEOF();
		}
	}
	// $ANTLR end "INSTANCEOF"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 44);
		TraceIn("INT", 44);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Java.g:55:5: ( 'int' )
			DebugEnterAlt(1);
			// Java.g:55:7: 'int'
			{
			DebugLocation(55, 7);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 44);
			LeaveRule("INT", 44);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_INTERFACE();
	partial void LeaveRule_INTERFACE();

	// $ANTLR start "INTERFACE"
	[GrammarRule("INTERFACE")]
	private void mINTERFACE()
	{
		EnterRule_INTERFACE();
		EnterRule("INTERFACE", 45);
		TraceIn("INTERFACE", 45);
		try
		{
			int _type = INTERFACE;
			int _channel = DefaultTokenChannel;
			// Java.g:56:11: ( 'interface' )
			DebugEnterAlt(1);
			// Java.g:56:13: 'interface'
			{
			DebugLocation(56, 13);
			Match("interface"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTERFACE", 45);
			LeaveRule("INTERFACE", 45);
			LeaveRule_INTERFACE();
		}
	}
	// $ANTLR end "INTERFACE"

	partial void EnterRule_LBRACK();
	partial void LeaveRule_LBRACK();

	// $ANTLR start "LBRACK"
	[GrammarRule("LBRACK")]
	private void mLBRACK()
	{
		EnterRule_LBRACK();
		EnterRule("LBRACK", 46);
		TraceIn("LBRACK", 46);
		try
		{
			int _type = LBRACK;
			int _channel = DefaultTokenChannel;
			// Java.g:57:8: ( '[' )
			DebugEnterAlt(1);
			// Java.g:57:10: '['
			{
			DebugLocation(57, 10);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACK", 46);
			LeaveRule("LBRACK", 46);
			LeaveRule_LBRACK();
		}
	}
	// $ANTLR end "LBRACK"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 47);
		TraceIn("LCURLY", 47);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// Java.g:58:8: ( '{' )
			DebugEnterAlt(1);
			// Java.g:58:10: '{'
			{
			DebugLocation(58, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 47);
			LeaveRule("LCURLY", 47);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_LESS_OR_EQUAL();
	partial void LeaveRule_LESS_OR_EQUAL();

	// $ANTLR start "LESS_OR_EQUAL"
	[GrammarRule("LESS_OR_EQUAL")]
	private void mLESS_OR_EQUAL()
	{
		EnterRule_LESS_OR_EQUAL();
		EnterRule("LESS_OR_EQUAL", 48);
		TraceIn("LESS_OR_EQUAL", 48);
		try
		{
			int _type = LESS_OR_EQUAL;
			int _channel = DefaultTokenChannel;
			// Java.g:59:15: ( '<=' )
			DebugEnterAlt(1);
			// Java.g:59:17: '<='
			{
			DebugLocation(59, 17);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_OR_EQUAL", 48);
			LeaveRule("LESS_OR_EQUAL", 48);
			LeaveRule_LESS_OR_EQUAL();
		}
	}
	// $ANTLR end "LESS_OR_EQUAL"

	partial void EnterRule_LESS_THAN();
	partial void LeaveRule_LESS_THAN();

	// $ANTLR start "LESS_THAN"
	[GrammarRule("LESS_THAN")]
	private void mLESS_THAN()
	{
		EnterRule_LESS_THAN();
		EnterRule("LESS_THAN", 49);
		TraceIn("LESS_THAN", 49);
		try
		{
			int _type = LESS_THAN;
			int _channel = DefaultTokenChannel;
			// Java.g:60:11: ( '<' )
			DebugEnterAlt(1);
			// Java.g:60:13: '<'
			{
			DebugLocation(60, 13);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN", 49);
			LeaveRule("LESS_THAN", 49);
			LeaveRule_LESS_THAN();
		}
	}
	// $ANTLR end "LESS_THAN"

	partial void EnterRule_LOGICAL_AND();
	partial void LeaveRule_LOGICAL_AND();

	// $ANTLR start "LOGICAL_AND"
	[GrammarRule("LOGICAL_AND")]
	private void mLOGICAL_AND()
	{
		EnterRule_LOGICAL_AND();
		EnterRule("LOGICAL_AND", 50);
		TraceIn("LOGICAL_AND", 50);
		try
		{
			int _type = LOGICAL_AND;
			int _channel = DefaultTokenChannel;
			// Java.g:61:13: ( '&&' )
			DebugEnterAlt(1);
			// Java.g:61:15: '&&'
			{
			DebugLocation(61, 15);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_AND", 50);
			LeaveRule("LOGICAL_AND", 50);
			LeaveRule_LOGICAL_AND();
		}
	}
	// $ANTLR end "LOGICAL_AND"

	partial void EnterRule_LOGICAL_NOT();
	partial void LeaveRule_LOGICAL_NOT();

	// $ANTLR start "LOGICAL_NOT"
	[GrammarRule("LOGICAL_NOT")]
	private void mLOGICAL_NOT()
	{
		EnterRule_LOGICAL_NOT();
		EnterRule("LOGICAL_NOT", 51);
		TraceIn("LOGICAL_NOT", 51);
		try
		{
			int _type = LOGICAL_NOT;
			int _channel = DefaultTokenChannel;
			// Java.g:62:13: ( '!' )
			DebugEnterAlt(1);
			// Java.g:62:15: '!'
			{
			DebugLocation(62, 15);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_NOT", 51);
			LeaveRule("LOGICAL_NOT", 51);
			LeaveRule_LOGICAL_NOT();
		}
	}
	// $ANTLR end "LOGICAL_NOT"

	partial void EnterRule_LOGICAL_OR();
	partial void LeaveRule_LOGICAL_OR();

	// $ANTLR start "LOGICAL_OR"
	[GrammarRule("LOGICAL_OR")]
	private void mLOGICAL_OR()
	{
		EnterRule_LOGICAL_OR();
		EnterRule("LOGICAL_OR", 52);
		TraceIn("LOGICAL_OR", 52);
		try
		{
			int _type = LOGICAL_OR;
			int _channel = DefaultTokenChannel;
			// Java.g:63:12: ( '||' )
			DebugEnterAlt(1);
			// Java.g:63:14: '||'
			{
			DebugLocation(63, 14);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_OR", 52);
			LeaveRule("LOGICAL_OR", 52);
			LeaveRule_LOGICAL_OR();
		}
	}
	// $ANTLR end "LOGICAL_OR"

	partial void EnterRule_LONG();
	partial void LeaveRule_LONG();

	// $ANTLR start "LONG"
	[GrammarRule("LONG")]
	private void mLONG()
	{
		EnterRule_LONG();
		EnterRule("LONG", 53);
		TraceIn("LONG", 53);
		try
		{
			int _type = LONG;
			int _channel = DefaultTokenChannel;
			// Java.g:64:6: ( 'long' )
			DebugEnterAlt(1);
			// Java.g:64:8: 'long'
			{
			DebugLocation(64, 8);
			Match("long"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LONG", 53);
			LeaveRule("LONG", 53);
			LeaveRule_LONG();
		}
	}
	// $ANTLR end "LONG"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 54);
		TraceIn("LPAREN", 54);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// Java.g:65:8: ( '(' )
			DebugEnterAlt(1);
			// Java.g:65:10: '('
			{
			DebugLocation(65, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 54);
			LeaveRule("LPAREN", 54);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 55);
		TraceIn("MINUS", 55);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// Java.g:66:7: ( '-' )
			DebugEnterAlt(1);
			// Java.g:66:9: '-'
			{
			DebugLocation(66, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 55);
			LeaveRule("MINUS", 55);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MINUS_ASSIGN();
	partial void LeaveRule_MINUS_ASSIGN();

	// $ANTLR start "MINUS_ASSIGN"
	[GrammarRule("MINUS_ASSIGN")]
	private void mMINUS_ASSIGN()
	{
		EnterRule_MINUS_ASSIGN();
		EnterRule("MINUS_ASSIGN", 56);
		TraceIn("MINUS_ASSIGN", 56);
		try
		{
			int _type = MINUS_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:67:14: ( '-=' )
			DebugEnterAlt(1);
			// Java.g:67:16: '-='
			{
			DebugLocation(67, 16);
			Match("-="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS_ASSIGN", 56);
			LeaveRule("MINUS_ASSIGN", 56);
			LeaveRule_MINUS_ASSIGN();
		}
	}
	// $ANTLR end "MINUS_ASSIGN"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 57);
		TraceIn("MOD", 57);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// Java.g:68:5: ( '%' )
			DebugEnterAlt(1);
			// Java.g:68:7: '%'
			{
			DebugLocation(68, 7);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 57);
			LeaveRule("MOD", 57);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MOD_ASSIGN();
	partial void LeaveRule_MOD_ASSIGN();

	// $ANTLR start "MOD_ASSIGN"
	[GrammarRule("MOD_ASSIGN")]
	private void mMOD_ASSIGN()
	{
		EnterRule_MOD_ASSIGN();
		EnterRule("MOD_ASSIGN", 58);
		TraceIn("MOD_ASSIGN", 58);
		try
		{
			int _type = MOD_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:69:12: ( '%=' )
			DebugEnterAlt(1);
			// Java.g:69:14: '%='
			{
			DebugLocation(69, 14);
			Match("%="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD_ASSIGN", 58);
			LeaveRule("MOD_ASSIGN", 58);
			LeaveRule_MOD_ASSIGN();
		}
	}
	// $ANTLR end "MOD_ASSIGN"

	partial void EnterRule_NATIVE();
	partial void LeaveRule_NATIVE();

	// $ANTLR start "NATIVE"
	[GrammarRule("NATIVE")]
	private void mNATIVE()
	{
		EnterRule_NATIVE();
		EnterRule("NATIVE", 59);
		TraceIn("NATIVE", 59);
		try
		{
			int _type = NATIVE;
			int _channel = DefaultTokenChannel;
			// Java.g:70:8: ( 'native' )
			DebugEnterAlt(1);
			// Java.g:70:10: 'native'
			{
			DebugLocation(70, 10);
			Match("native"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NATIVE", 59);
			LeaveRule("NATIVE", 59);
			LeaveRule_NATIVE();
		}
	}
	// $ANTLR end "NATIVE"

	partial void EnterRule_NEW();
	partial void LeaveRule_NEW();

	// $ANTLR start "NEW"
	[GrammarRule("NEW")]
	private void mNEW()
	{
		EnterRule_NEW();
		EnterRule("NEW", 60);
		TraceIn("NEW", 60);
		try
		{
			int _type = NEW;
			int _channel = DefaultTokenChannel;
			// Java.g:71:5: ( 'new' )
			DebugEnterAlt(1);
			// Java.g:71:7: 'new'
			{
			DebugLocation(71, 7);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEW", 60);
			LeaveRule("NEW", 60);
			LeaveRule_NEW();
		}
	}
	// $ANTLR end "NEW"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 61);
		TraceIn("NOT", 61);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// Java.g:72:5: ( '~' )
			DebugEnterAlt(1);
			// Java.g:72:7: '~'
			{
			DebugLocation(72, 7);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 61);
			LeaveRule("NOT", 61);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_NOT_EQUAL();
	partial void LeaveRule_NOT_EQUAL();

	// $ANTLR start "NOT_EQUAL"
	[GrammarRule("NOT_EQUAL")]
	private void mNOT_EQUAL()
	{
		EnterRule_NOT_EQUAL();
		EnterRule("NOT_EQUAL", 62);
		TraceIn("NOT_EQUAL", 62);
		try
		{
			int _type = NOT_EQUAL;
			int _channel = DefaultTokenChannel;
			// Java.g:73:11: ( '!=' )
			DebugEnterAlt(1);
			// Java.g:73:13: '!='
			{
			DebugLocation(73, 13);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUAL", 62);
			LeaveRule("NOT_EQUAL", 62);
			LeaveRule_NOT_EQUAL();
		}
	}
	// $ANTLR end "NOT_EQUAL"

	partial void EnterRule_NULL();
	partial void LeaveRule_NULL();

	// $ANTLR start "NULL"
	[GrammarRule("NULL")]
	private void mNULL()
	{
		EnterRule_NULL();
		EnterRule("NULL", 63);
		TraceIn("NULL", 63);
		try
		{
			int _type = NULL;
			int _channel = DefaultTokenChannel;
			// Java.g:74:6: ( 'null' )
			DebugEnterAlt(1);
			// Java.g:74:8: 'null'
			{
			DebugLocation(74, 8);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL", 63);
			LeaveRule("NULL", 63);
			LeaveRule_NULL();
		}
	}
	// $ANTLR end "NULL"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 64);
		TraceIn("OR", 64);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// Java.g:75:4: ( '|' )
			DebugEnterAlt(1);
			// Java.g:75:6: '|'
			{
			DebugLocation(75, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 64);
			LeaveRule("OR", 64);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_OR_ASSIGN();
	partial void LeaveRule_OR_ASSIGN();

	// $ANTLR start "OR_ASSIGN"
	[GrammarRule("OR_ASSIGN")]
	private void mOR_ASSIGN()
	{
		EnterRule_OR_ASSIGN();
		EnterRule("OR_ASSIGN", 65);
		TraceIn("OR_ASSIGN", 65);
		try
		{
			int _type = OR_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:76:11: ( '|=' )
			DebugEnterAlt(1);
			// Java.g:76:13: '|='
			{
			DebugLocation(76, 13);
			Match("|="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR_ASSIGN", 65);
			LeaveRule("OR_ASSIGN", 65);
			LeaveRule_OR_ASSIGN();
		}
	}
	// $ANTLR end "OR_ASSIGN"

	partial void EnterRule_PACKAGE();
	partial void LeaveRule_PACKAGE();

	// $ANTLR start "PACKAGE"
	[GrammarRule("PACKAGE")]
	private void mPACKAGE()
	{
		EnterRule_PACKAGE();
		EnterRule("PACKAGE", 66);
		TraceIn("PACKAGE", 66);
		try
		{
			int _type = PACKAGE;
			int _channel = DefaultTokenChannel;
			// Java.g:77:9: ( 'package' )
			DebugEnterAlt(1);
			// Java.g:77:11: 'package'
			{
			DebugLocation(77, 11);
			Match("package"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PACKAGE", 66);
			LeaveRule("PACKAGE", 66);
			LeaveRule_PACKAGE();
		}
	}
	// $ANTLR end "PACKAGE"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 67);
		TraceIn("PLUS", 67);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// Java.g:78:6: ( '+' )
			DebugEnterAlt(1);
			// Java.g:78:8: '+'
			{
			DebugLocation(78, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 67);
			LeaveRule("PLUS", 67);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_PLUS_ASSIGN();
	partial void LeaveRule_PLUS_ASSIGN();

	// $ANTLR start "PLUS_ASSIGN"
	[GrammarRule("PLUS_ASSIGN")]
	private void mPLUS_ASSIGN()
	{
		EnterRule_PLUS_ASSIGN();
		EnterRule("PLUS_ASSIGN", 68);
		TraceIn("PLUS_ASSIGN", 68);
		try
		{
			int _type = PLUS_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:79:13: ( '+=' )
			DebugEnterAlt(1);
			// Java.g:79:15: '+='
			{
			DebugLocation(79, 15);
			Match("+="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS_ASSIGN", 68);
			LeaveRule("PLUS_ASSIGN", 68);
			LeaveRule_PLUS_ASSIGN();
		}
	}
	// $ANTLR end "PLUS_ASSIGN"

	partial void EnterRule_PRIVATE();
	partial void LeaveRule_PRIVATE();

	// $ANTLR start "PRIVATE"
	[GrammarRule("PRIVATE")]
	private void mPRIVATE()
	{
		EnterRule_PRIVATE();
		EnterRule("PRIVATE", 69);
		TraceIn("PRIVATE", 69);
		try
		{
			int _type = PRIVATE;
			int _channel = DefaultTokenChannel;
			// Java.g:80:9: ( 'private' )
			DebugEnterAlt(1);
			// Java.g:80:11: 'private'
			{
			DebugLocation(80, 11);
			Match("private"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PRIVATE", 69);
			LeaveRule("PRIVATE", 69);
			LeaveRule_PRIVATE();
		}
	}
	// $ANTLR end "PRIVATE"

	partial void EnterRule_PROTECTED();
	partial void LeaveRule_PROTECTED();

	// $ANTLR start "PROTECTED"
	[GrammarRule("PROTECTED")]
	private void mPROTECTED()
	{
		EnterRule_PROTECTED();
		EnterRule("PROTECTED", 70);
		TraceIn("PROTECTED", 70);
		try
		{
			int _type = PROTECTED;
			int _channel = DefaultTokenChannel;
			// Java.g:81:11: ( 'protected' )
			DebugEnterAlt(1);
			// Java.g:81:13: 'protected'
			{
			DebugLocation(81, 13);
			Match("protected"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROTECTED", 70);
			LeaveRule("PROTECTED", 70);
			LeaveRule_PROTECTED();
		}
	}
	// $ANTLR end "PROTECTED"

	partial void EnterRule_PUBLIC();
	partial void LeaveRule_PUBLIC();

	// $ANTLR start "PUBLIC"
	[GrammarRule("PUBLIC")]
	private void mPUBLIC()
	{
		EnterRule_PUBLIC();
		EnterRule("PUBLIC", 71);
		TraceIn("PUBLIC", 71);
		try
		{
			int _type = PUBLIC;
			int _channel = DefaultTokenChannel;
			// Java.g:82:8: ( 'public' )
			DebugEnterAlt(1);
			// Java.g:82:10: 'public'
			{
			DebugLocation(82, 10);
			Match("public"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PUBLIC", 71);
			LeaveRule("PUBLIC", 71);
			LeaveRule_PUBLIC();
		}
	}
	// $ANTLR end "PUBLIC"

	partial void EnterRule_QUESTION();
	partial void LeaveRule_QUESTION();

	// $ANTLR start "QUESTION"
	[GrammarRule("QUESTION")]
	private void mQUESTION()
	{
		EnterRule_QUESTION();
		EnterRule("QUESTION", 72);
		TraceIn("QUESTION", 72);
		try
		{
			int _type = QUESTION;
			int _channel = DefaultTokenChannel;
			// Java.g:83:10: ( '?' )
			DebugEnterAlt(1);
			// Java.g:83:12: '?'
			{
			DebugLocation(83, 12);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUESTION", 72);
			LeaveRule("QUESTION", 72);
			LeaveRule_QUESTION();
		}
	}
	// $ANTLR end "QUESTION"

	partial void EnterRule_RBRACK();
	partial void LeaveRule_RBRACK();

	// $ANTLR start "RBRACK"
	[GrammarRule("RBRACK")]
	private void mRBRACK()
	{
		EnterRule_RBRACK();
		EnterRule("RBRACK", 73);
		TraceIn("RBRACK", 73);
		try
		{
			int _type = RBRACK;
			int _channel = DefaultTokenChannel;
			// Java.g:84:8: ( ']' )
			DebugEnterAlt(1);
			// Java.g:84:10: ']'
			{
			DebugLocation(84, 10);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACK", 73);
			LeaveRule("RBRACK", 73);
			LeaveRule_RBRACK();
		}
	}
	// $ANTLR end "RBRACK"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 74);
		TraceIn("RCURLY", 74);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// Java.g:85:8: ( '}' )
			DebugEnterAlt(1);
			// Java.g:85:10: '}'
			{
			DebugLocation(85, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 74);
			LeaveRule("RCURLY", 74);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_RETURN();
	partial void LeaveRule_RETURN();

	// $ANTLR start "RETURN"
	[GrammarRule("RETURN")]
	private void mRETURN()
	{
		EnterRule_RETURN();
		EnterRule("RETURN", 75);
		TraceIn("RETURN", 75);
		try
		{
			int _type = RETURN;
			int _channel = DefaultTokenChannel;
			// Java.g:86:8: ( 'return' )
			DebugEnterAlt(1);
			// Java.g:86:10: 'return'
			{
			DebugLocation(86, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RETURN", 75);
			LeaveRule("RETURN", 75);
			LeaveRule_RETURN();
		}
	}
	// $ANTLR end "RETURN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 76);
		TraceIn("RPAREN", 76);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// Java.g:87:8: ( ')' )
			DebugEnterAlt(1);
			// Java.g:87:10: ')'
			{
			DebugLocation(87, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 76);
			LeaveRule("RPAREN", 76);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 77);
		TraceIn("SEMI", 77);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// Java.g:88:6: ( ';' )
			DebugEnterAlt(1);
			// Java.g:88:8: ';'
			{
			DebugLocation(88, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 77);
			LeaveRule("SEMI", 77);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_SHIFT_LEFT();
	partial void LeaveRule_SHIFT_LEFT();

	// $ANTLR start "SHIFT_LEFT"
	[GrammarRule("SHIFT_LEFT")]
	private void mSHIFT_LEFT()
	{
		EnterRule_SHIFT_LEFT();
		EnterRule("SHIFT_LEFT", 78);
		TraceIn("SHIFT_LEFT", 78);
		try
		{
			int _type = SHIFT_LEFT;
			int _channel = DefaultTokenChannel;
			// Java.g:89:12: ( '<<' )
			DebugEnterAlt(1);
			// Java.g:89:14: '<<'
			{
			DebugLocation(89, 14);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHIFT_LEFT", 78);
			LeaveRule("SHIFT_LEFT", 78);
			LeaveRule_SHIFT_LEFT();
		}
	}
	// $ANTLR end "SHIFT_LEFT"

	partial void EnterRule_SHIFT_LEFT_ASSIGN();
	partial void LeaveRule_SHIFT_LEFT_ASSIGN();

	// $ANTLR start "SHIFT_LEFT_ASSIGN"
	[GrammarRule("SHIFT_LEFT_ASSIGN")]
	private void mSHIFT_LEFT_ASSIGN()
	{
		EnterRule_SHIFT_LEFT_ASSIGN();
		EnterRule("SHIFT_LEFT_ASSIGN", 79);
		TraceIn("SHIFT_LEFT_ASSIGN", 79);
		try
		{
			int _type = SHIFT_LEFT_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:90:19: ( '<<=' )
			DebugEnterAlt(1);
			// Java.g:90:21: '<<='
			{
			DebugLocation(90, 21);
			Match("<<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHIFT_LEFT_ASSIGN", 79);
			LeaveRule("SHIFT_LEFT_ASSIGN", 79);
			LeaveRule_SHIFT_LEFT_ASSIGN();
		}
	}
	// $ANTLR end "SHIFT_LEFT_ASSIGN"

	partial void EnterRule_SHIFT_RIGHT();
	partial void LeaveRule_SHIFT_RIGHT();

	// $ANTLR start "SHIFT_RIGHT"
	[GrammarRule("SHIFT_RIGHT")]
	private void mSHIFT_RIGHT()
	{
		EnterRule_SHIFT_RIGHT();
		EnterRule("SHIFT_RIGHT", 80);
		TraceIn("SHIFT_RIGHT", 80);
		try
		{
			int _type = SHIFT_RIGHT;
			int _channel = DefaultTokenChannel;
			// Java.g:91:13: ( '>>' )
			DebugEnterAlt(1);
			// Java.g:91:15: '>>'
			{
			DebugLocation(91, 15);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHIFT_RIGHT", 80);
			LeaveRule("SHIFT_RIGHT", 80);
			LeaveRule_SHIFT_RIGHT();
		}
	}
	// $ANTLR end "SHIFT_RIGHT"

	partial void EnterRule_SHIFT_RIGHT_ASSIGN();
	partial void LeaveRule_SHIFT_RIGHT_ASSIGN();

	// $ANTLR start "SHIFT_RIGHT_ASSIGN"
	[GrammarRule("SHIFT_RIGHT_ASSIGN")]
	private void mSHIFT_RIGHT_ASSIGN()
	{
		EnterRule_SHIFT_RIGHT_ASSIGN();
		EnterRule("SHIFT_RIGHT_ASSIGN", 81);
		TraceIn("SHIFT_RIGHT_ASSIGN", 81);
		try
		{
			int _type = SHIFT_RIGHT_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:92:20: ( '>>=' )
			DebugEnterAlt(1);
			// Java.g:92:22: '>>='
			{
			DebugLocation(92, 22);
			Match(">>="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHIFT_RIGHT_ASSIGN", 81);
			LeaveRule("SHIFT_RIGHT_ASSIGN", 81);
			LeaveRule_SHIFT_RIGHT_ASSIGN();
		}
	}
	// $ANTLR end "SHIFT_RIGHT_ASSIGN"

	partial void EnterRule_SHORT();
	partial void LeaveRule_SHORT();

	// $ANTLR start "SHORT"
	[GrammarRule("SHORT")]
	private void mSHORT()
	{
		EnterRule_SHORT();
		EnterRule("SHORT", 82);
		TraceIn("SHORT", 82);
		try
		{
			int _type = SHORT;
			int _channel = DefaultTokenChannel;
			// Java.g:93:7: ( 'short' )
			DebugEnterAlt(1);
			// Java.g:93:9: 'short'
			{
			DebugLocation(93, 9);
			Match("short"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHORT", 82);
			LeaveRule("SHORT", 82);
			LeaveRule_SHORT();
		}
	}
	// $ANTLR end "SHORT"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 83);
		TraceIn("STAR", 83);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// Java.g:94:6: ( '*' )
			DebugEnterAlt(1);
			// Java.g:94:8: '*'
			{
			DebugLocation(94, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 83);
			LeaveRule("STAR", 83);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_STAR_ASSIGN();
	partial void LeaveRule_STAR_ASSIGN();

	// $ANTLR start "STAR_ASSIGN"
	[GrammarRule("STAR_ASSIGN")]
	private void mSTAR_ASSIGN()
	{
		EnterRule_STAR_ASSIGN();
		EnterRule("STAR_ASSIGN", 84);
		TraceIn("STAR_ASSIGN", 84);
		try
		{
			int _type = STAR_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:95:13: ( '*=' )
			DebugEnterAlt(1);
			// Java.g:95:15: '*='
			{
			DebugLocation(95, 15);
			Match("*="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR_ASSIGN", 84);
			LeaveRule("STAR_ASSIGN", 84);
			LeaveRule_STAR_ASSIGN();
		}
	}
	// $ANTLR end "STAR_ASSIGN"

	partial void EnterRule_STATIC();
	partial void LeaveRule_STATIC();

	// $ANTLR start "STATIC"
	[GrammarRule("STATIC")]
	private void mSTATIC()
	{
		EnterRule_STATIC();
		EnterRule("STATIC", 85);
		TraceIn("STATIC", 85);
		try
		{
			int _type = STATIC;
			int _channel = DefaultTokenChannel;
			// Java.g:96:8: ( 'static' )
			DebugEnterAlt(1);
			// Java.g:96:10: 'static'
			{
			DebugLocation(96, 10);
			Match("static"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STATIC", 85);
			LeaveRule("STATIC", 85);
			LeaveRule_STATIC();
		}
	}
	// $ANTLR end "STATIC"

	partial void EnterRule_STRICTFP();
	partial void LeaveRule_STRICTFP();

	// $ANTLR start "STRICTFP"
	[GrammarRule("STRICTFP")]
	private void mSTRICTFP()
	{
		EnterRule_STRICTFP();
		EnterRule("STRICTFP", 86);
		TraceIn("STRICTFP", 86);
		try
		{
			int _type = STRICTFP;
			int _channel = DefaultTokenChannel;
			// Java.g:97:10: ( 'strictfp' )
			DebugEnterAlt(1);
			// Java.g:97:12: 'strictfp'
			{
			DebugLocation(97, 12);
			Match("strictfp"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRICTFP", 86);
			LeaveRule("STRICTFP", 86);
			LeaveRule_STRICTFP();
		}
	}
	// $ANTLR end "STRICTFP"

	partial void EnterRule_SUPER();
	partial void LeaveRule_SUPER();

	// $ANTLR start "SUPER"
	[GrammarRule("SUPER")]
	private void mSUPER()
	{
		EnterRule_SUPER();
		EnterRule("SUPER", 87);
		TraceIn("SUPER", 87);
		try
		{
			int _type = SUPER;
			int _channel = DefaultTokenChannel;
			// Java.g:98:7: ( 'super' )
			DebugEnterAlt(1);
			// Java.g:98:9: 'super'
			{
			DebugLocation(98, 9);
			Match("super"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SUPER", 87);
			LeaveRule("SUPER", 87);
			LeaveRule_SUPER();
		}
	}
	// $ANTLR end "SUPER"

	partial void EnterRule_SWITCH();
	partial void LeaveRule_SWITCH();

	// $ANTLR start "SWITCH"
	[GrammarRule("SWITCH")]
	private void mSWITCH()
	{
		EnterRule_SWITCH();
		EnterRule("SWITCH", 88);
		TraceIn("SWITCH", 88);
		try
		{
			int _type = SWITCH;
			int _channel = DefaultTokenChannel;
			// Java.g:99:8: ( 'switch' )
			DebugEnterAlt(1);
			// Java.g:99:10: 'switch'
			{
			DebugLocation(99, 10);
			Match("switch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SWITCH", 88);
			LeaveRule("SWITCH", 88);
			LeaveRule_SWITCH();
		}
	}
	// $ANTLR end "SWITCH"

	partial void EnterRule_SYNCHRONIZED();
	partial void LeaveRule_SYNCHRONIZED();

	// $ANTLR start "SYNCHRONIZED"
	[GrammarRule("SYNCHRONIZED")]
	private void mSYNCHRONIZED()
	{
		EnterRule_SYNCHRONIZED();
		EnterRule("SYNCHRONIZED", 89);
		TraceIn("SYNCHRONIZED", 89);
		try
		{
			int _type = SYNCHRONIZED;
			int _channel = DefaultTokenChannel;
			// Java.g:100:14: ( 'synchronized' )
			DebugEnterAlt(1);
			// Java.g:100:16: 'synchronized'
			{
			DebugLocation(100, 16);
			Match("synchronized"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SYNCHRONIZED", 89);
			LeaveRule("SYNCHRONIZED", 89);
			LeaveRule_SYNCHRONIZED();
		}
	}
	// $ANTLR end "SYNCHRONIZED"

	partial void EnterRule_THIS();
	partial void LeaveRule_THIS();

	// $ANTLR start "THIS"
	[GrammarRule("THIS")]
	private void mTHIS()
	{
		EnterRule_THIS();
		EnterRule("THIS", 90);
		TraceIn("THIS", 90);
		try
		{
			int _type = THIS;
			int _channel = DefaultTokenChannel;
			// Java.g:101:6: ( 'this' )
			DebugEnterAlt(1);
			// Java.g:101:8: 'this'
			{
			DebugLocation(101, 8);
			Match("this"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THIS", 90);
			LeaveRule("THIS", 90);
			LeaveRule_THIS();
		}
	}
	// $ANTLR end "THIS"

	partial void EnterRule_THROW();
	partial void LeaveRule_THROW();

	// $ANTLR start "THROW"
	[GrammarRule("THROW")]
	private void mTHROW()
	{
		EnterRule_THROW();
		EnterRule("THROW", 91);
		TraceIn("THROW", 91);
		try
		{
			int _type = THROW;
			int _channel = DefaultTokenChannel;
			// Java.g:102:7: ( 'throw' )
			DebugEnterAlt(1);
			// Java.g:102:9: 'throw'
			{
			DebugLocation(102, 9);
			Match("throw"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THROW", 91);
			LeaveRule("THROW", 91);
			LeaveRule_THROW();
		}
	}
	// $ANTLR end "THROW"

	partial void EnterRule_THROWS();
	partial void LeaveRule_THROWS();

	// $ANTLR start "THROWS"
	[GrammarRule("THROWS")]
	private void mTHROWS()
	{
		EnterRule_THROWS();
		EnterRule("THROWS", 92);
		TraceIn("THROWS", 92);
		try
		{
			int _type = THROWS;
			int _channel = DefaultTokenChannel;
			// Java.g:103:8: ( 'throws' )
			DebugEnterAlt(1);
			// Java.g:103:10: 'throws'
			{
			DebugLocation(103, 10);
			Match("throws"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THROWS", 92);
			LeaveRule("THROWS", 92);
			LeaveRule_THROWS();
		}
	}
	// $ANTLR end "THROWS"

	partial void EnterRule_TRANSIENT();
	partial void LeaveRule_TRANSIENT();

	// $ANTLR start "TRANSIENT"
	[GrammarRule("TRANSIENT")]
	private void mTRANSIENT()
	{
		EnterRule_TRANSIENT();
		EnterRule("TRANSIENT", 93);
		TraceIn("TRANSIENT", 93);
		try
		{
			int _type = TRANSIENT;
			int _channel = DefaultTokenChannel;
			// Java.g:104:11: ( 'transient' )
			DebugEnterAlt(1);
			// Java.g:104:13: 'transient'
			{
			DebugLocation(104, 13);
			Match("transient"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRANSIENT", 93);
			LeaveRule("TRANSIENT", 93);
			LeaveRule_TRANSIENT();
		}
	}
	// $ANTLR end "TRANSIENT"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 94);
		TraceIn("TRUE", 94);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// Java.g:105:6: ( 'true' )
			DebugEnterAlt(1);
			// Java.g:105:8: 'true'
			{
			DebugLocation(105, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 94);
			LeaveRule("TRUE", 94);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_TRY();
	partial void LeaveRule_TRY();

	// $ANTLR start "TRY"
	[GrammarRule("TRY")]
	private void mTRY()
	{
		EnterRule_TRY();
		EnterRule("TRY", 95);
		TraceIn("TRY", 95);
		try
		{
			int _type = TRY;
			int _channel = DefaultTokenChannel;
			// Java.g:106:5: ( 'try' )
			DebugEnterAlt(1);
			// Java.g:106:7: 'try'
			{
			DebugLocation(106, 7);
			Match("try"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRY", 95);
			LeaveRule("TRY", 95);
			LeaveRule_TRY();
		}
	}
	// $ANTLR end "TRY"

	partial void EnterRule_VOID();
	partial void LeaveRule_VOID();

	// $ANTLR start "VOID"
	[GrammarRule("VOID")]
	private void mVOID()
	{
		EnterRule_VOID();
		EnterRule("VOID", 96);
		TraceIn("VOID", 96);
		try
		{
			int _type = VOID;
			int _channel = DefaultTokenChannel;
			// Java.g:107:6: ( 'void' )
			DebugEnterAlt(1);
			// Java.g:107:8: 'void'
			{
			DebugLocation(107, 8);
			Match("void"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VOID", 96);
			LeaveRule("VOID", 96);
			LeaveRule_VOID();
		}
	}
	// $ANTLR end "VOID"

	partial void EnterRule_VOLATILE();
	partial void LeaveRule_VOLATILE();

	// $ANTLR start "VOLATILE"
	[GrammarRule("VOLATILE")]
	private void mVOLATILE()
	{
		EnterRule_VOLATILE();
		EnterRule("VOLATILE", 97);
		TraceIn("VOLATILE", 97);
		try
		{
			int _type = VOLATILE;
			int _channel = DefaultTokenChannel;
			// Java.g:108:10: ( 'volatile' )
			DebugEnterAlt(1);
			// Java.g:108:12: 'volatile'
			{
			DebugLocation(108, 12);
			Match("volatile"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VOLATILE", 97);
			LeaveRule("VOLATILE", 97);
			LeaveRule_VOLATILE();
		}
	}
	// $ANTLR end "VOLATILE"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 98);
		TraceIn("WHILE", 98);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// Java.g:109:7: ( 'while' )
			DebugEnterAlt(1);
			// Java.g:109:9: 'while'
			{
			DebugLocation(109, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 98);
			LeaveRule("WHILE", 98);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_XOR();
	partial void LeaveRule_XOR();

	// $ANTLR start "XOR"
	[GrammarRule("XOR")]
	private void mXOR()
	{
		EnterRule_XOR();
		EnterRule("XOR", 99);
		TraceIn("XOR", 99);
		try
		{
			int _type = XOR;
			int _channel = DefaultTokenChannel;
			// Java.g:110:5: ( '^' )
			DebugEnterAlt(1);
			// Java.g:110:7: '^'
			{
			DebugLocation(110, 7);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("XOR", 99);
			LeaveRule("XOR", 99);
			LeaveRule_XOR();
		}
	}
	// $ANTLR end "XOR"

	partial void EnterRule_XOR_ASSIGN();
	partial void LeaveRule_XOR_ASSIGN();

	// $ANTLR start "XOR_ASSIGN"
	[GrammarRule("XOR_ASSIGN")]
	private void mXOR_ASSIGN()
	{
		EnterRule_XOR_ASSIGN();
		EnterRule("XOR_ASSIGN", 100);
		TraceIn("XOR_ASSIGN", 100);
		try
		{
			int _type = XOR_ASSIGN;
			int _channel = DefaultTokenChannel;
			// Java.g:111:12: ( '^=' )
			DebugEnterAlt(1);
			// Java.g:111:14: '^='
			{
			DebugLocation(111, 14);
			Match("^="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("XOR_ASSIGN", 100);
			LeaveRule("XOR_ASSIGN", 100);
			LeaveRule_XOR_ASSIGN();
		}
	}
	// $ANTLR end "XOR_ASSIGN"

	partial void EnterRule_HEX_LITERAL();
	partial void LeaveRule_HEX_LITERAL();

	// $ANTLR start "HEX_LITERAL"
	[GrammarRule("HEX_LITERAL")]
	private void mHEX_LITERAL()
	{
		EnterRule_HEX_LITERAL();
		EnterRule("HEX_LITERAL", 101);
		TraceIn("HEX_LITERAL", 101);
		try
		{
			int _type = HEX_LITERAL;
			int _channel = DefaultTokenChannel;
			// Java.g:1006:13: ( '0' ( 'x' | 'X' ) ( HEX_DIGIT )+ ( INTEGER_TYPE_SUFFIX )? )
			DebugEnterAlt(1);
			// Java.g:1006:15: '0' ( 'x' | 'X' ) ( HEX_DIGIT )+ ( INTEGER_TYPE_SUFFIX )?
			{
			DebugLocation(1006, 15);
			Match('0'); 
			DebugLocation(1006, 19);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(1006, 29);
			// Java.g:1006:29: ( HEX_DIGIT )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='F')||(LA1_1>='a' && LA1_1<='f')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1006, 29);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(1006, 40);
			// Java.g:1006:40: ( INTEGER_TYPE_SUFFIX )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1=='L'||LA2_1=='l'))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:
				{
				DebugLocation(1006, 40);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_LITERAL", 101);
			LeaveRule("HEX_LITERAL", 101);
			LeaveRule_HEX_LITERAL();
		}
	}
	// $ANTLR end "HEX_LITERAL"

	partial void EnterRule_DECIMAL_LITERAL();
	partial void LeaveRule_DECIMAL_LITERAL();

	// $ANTLR start "DECIMAL_LITERAL"
	[GrammarRule("DECIMAL_LITERAL")]
	private void mDECIMAL_LITERAL()
	{
		EnterRule_DECIMAL_LITERAL();
		EnterRule("DECIMAL_LITERAL", 102);
		TraceIn("DECIMAL_LITERAL", 102);
		try
		{
			int _type = DECIMAL_LITERAL;
			int _channel = DefaultTokenChannel;
			// Java.g:1008:17: ( ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( INTEGER_TYPE_SUFFIX )? )
			DebugEnterAlt(1);
			// Java.g:1008:19: ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( INTEGER_TYPE_SUFFIX )?
			{
			DebugLocation(1008, 19);
			// Java.g:1008:19: ( '0' | '1' .. '9' ( '0' .. '9' )* )
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1=='0'))
			{
				alt4 = 1;
			}
			else if (((LA4_1>='1' && LA4_1<='9')))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1008:20: '0'
				{
				DebugLocation(1008, 20);
				Match('0'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1008:26: '1' .. '9' ( '0' .. '9' )*
				{
				DebugLocation(1008, 26);
				MatchRange('1','9'); 
				DebugLocation(1008, 35);
				// Java.g:1008:35: ( '0' .. '9' )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if (((LA3_1>='0' && LA3_1<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:
						{
						DebugLocation(1008, 35);
						input.Consume();


						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(1008, 46);
			// Java.g:1008:46: ( INTEGER_TYPE_SUFFIX )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1=='L'||LA5_1=='l'))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:
				{
				DebugLocation(1008, 46);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECIMAL_LITERAL", 102);
			LeaveRule("DECIMAL_LITERAL", 102);
			LeaveRule_DECIMAL_LITERAL();
		}
	}
	// $ANTLR end "DECIMAL_LITERAL"

	partial void EnterRule_OCTAL_LITERAL();
	partial void LeaveRule_OCTAL_LITERAL();

	// $ANTLR start "OCTAL_LITERAL"
	[GrammarRule("OCTAL_LITERAL")]
	private void mOCTAL_LITERAL()
	{
		EnterRule_OCTAL_LITERAL();
		EnterRule("OCTAL_LITERAL", 103);
		TraceIn("OCTAL_LITERAL", 103);
		try
		{
			int _type = OCTAL_LITERAL;
			int _channel = DefaultTokenChannel;
			// Java.g:1010:15: ( '0' ( '0' .. '7' )+ ( INTEGER_TYPE_SUFFIX )? )
			DebugEnterAlt(1);
			// Java.g:1010:17: '0' ( '0' .. '7' )+ ( INTEGER_TYPE_SUFFIX )?
			{
			DebugLocation(1010, 17);
			Match('0'); 
			DebugLocation(1010, 21);
			// Java.g:1010:21: ( '0' .. '7' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if (((LA6_1>='0' && LA6_1<='7')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1010, 21);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(1010, 33);
			// Java.g:1010:33: ( INTEGER_TYPE_SUFFIX )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='L'||LA7_1=='l'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:
				{
				DebugLocation(1010, 33);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OCTAL_LITERAL", 103);
			LeaveRule("OCTAL_LITERAL", 103);
			LeaveRule_OCTAL_LITERAL();
		}
	}
	// $ANTLR end "OCTAL_LITERAL"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 104);
		TraceIn("HEX_DIGIT", 104);
		try
		{
			// Java.g:1014:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(1014, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 104);
			LeaveRule("HEX_DIGIT", 104);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_INTEGER_TYPE_SUFFIX();
	partial void LeaveRule_INTEGER_TYPE_SUFFIX();

	// $ANTLR start "INTEGER_TYPE_SUFFIX"
	[GrammarRule("INTEGER_TYPE_SUFFIX")]
	private void mINTEGER_TYPE_SUFFIX()
	{
		EnterRule_INTEGER_TYPE_SUFFIX();
		EnterRule("INTEGER_TYPE_SUFFIX", 105);
		TraceIn("INTEGER_TYPE_SUFFIX", 105);
		try
		{
			// Java.g:1017:21: ( ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(1017, 21);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("INTEGER_TYPE_SUFFIX", 105);
			LeaveRule("INTEGER_TYPE_SUFFIX", 105);
			LeaveRule_INTEGER_TYPE_SUFFIX();
		}
	}
	// $ANTLR end "INTEGER_TYPE_SUFFIX"

	partial void EnterRule_FLOATING_POINT_LITERAL();
	partial void LeaveRule_FLOATING_POINT_LITERAL();

	// $ANTLR start "FLOATING_POINT_LITERAL"
	[GrammarRule("FLOATING_POINT_LITERAL")]
	private void mFLOATING_POINT_LITERAL()
	{
		EnterRule_FLOATING_POINT_LITERAL();
		EnterRule("FLOATING_POINT_LITERAL", 106);
		TraceIn("FLOATING_POINT_LITERAL", 106);
		try
		{
			int _type = FLOATING_POINT_LITERAL;
			int _channel = DefaultTokenChannel;
			// Java.g:1019:5: ( ( '0' .. '9' )+ ( DOT ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_TYPE_SUFFIX )? | EXPONENT ( FLOAT_TYPE_SUFFIX )? | FLOAT_TYPE_SUFFIX ) | DOT ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_TYPE_SUFFIX )? )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if (((LA17_1>='0' && LA17_1<='9')))
			{
				alt17 = 1;
			}
			else if ((LA17_1=='.'))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1019:9: ( '0' .. '9' )+ ( DOT ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_TYPE_SUFFIX )? | EXPONENT ( FLOAT_TYPE_SUFFIX )? | FLOAT_TYPE_SUFFIX )
				{
				DebugLocation(1019, 9);
				// Java.g:1019:9: ( '0' .. '9' )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if (((LA8_1>='0' && LA8_1<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:
						{
						DebugLocation(1019, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(1020, 9);
				// Java.g:1020:9: ( DOT ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_TYPE_SUFFIX )? | EXPONENT ( FLOAT_TYPE_SUFFIX )? | FLOAT_TYPE_SUFFIX )
				int alt13=3;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case '.':
					{
					alt13 = 1;
					}
					break;
				case 'E':
				case 'e':
					{
					alt13 = 2;
					}
					break;
				case 'D':
				case 'F':
				case 'd':
				case 'f':
					{
					alt13 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1021:13: DOT ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_TYPE_SUFFIX )?
					{
					DebugLocation(1021, 13);
					mDOT(); 
					DebugLocation(1021, 17);
					// Java.g:1021:17: ( '0' .. '9' )*
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_1 = input.LA(1);

						if (((LA9_1>='0' && LA9_1<='9')))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch ( alt9 )
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:
							{
							DebugLocation(1021, 17);
							input.Consume();


							}
							break;

						default:
							goto loop9;
						}
					}

					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(1021, 29);
					// Java.g:1021:29: ( EXPONENT )?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if ((LA10_1=='E'||LA10_1=='e'))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1021:29: EXPONENT
						{
						DebugLocation(1021, 29);
						mEXPONENT(); 

						}
						break;

					}
					} finally { DebugExitSubRule(10); }

					DebugLocation(1021, 39);
					// Java.g:1021:39: ( FLOAT_TYPE_SUFFIX )?
					int alt11=2;
					try { DebugEnterSubRule(11);
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if ((LA11_1=='D'||LA11_1=='F'||LA11_1=='d'||LA11_1=='f'))
					{
						alt11 = 1;
					}
					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:
						{
						DebugLocation(1021, 39);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(11); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1022:13: EXPONENT ( FLOAT_TYPE_SUFFIX )?
					{
					DebugLocation(1022, 13);
					mEXPONENT(); 
					DebugLocation(1022, 22);
					// Java.g:1022:22: ( FLOAT_TYPE_SUFFIX )?
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if ((LA12_1=='D'||LA12_1=='F'||LA12_1=='d'||LA12_1=='f'))
					{
						alt12 = 1;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:
						{
						DebugLocation(1022, 22);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(12); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:1023:13: FLOAT_TYPE_SUFFIX
					{
					DebugLocation(1023, 13);
					mFLOAT_TYPE_SUFFIX(); 

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1025:9: DOT ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_TYPE_SUFFIX )?
				{
				DebugLocation(1025, 9);
				mDOT(); 
				DebugLocation(1025, 13);
				// Java.g:1025:13: ( '0' .. '9' )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if (((LA14_1>='0' && LA14_1<='9')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:
						{
						DebugLocation(1025, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(1025, 25);
				// Java.g:1025:25: ( EXPONENT )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1=='E'||LA15_1=='e'))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1025:25: EXPONENT
					{
					DebugLocation(1025, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(1025, 35);
				// Java.g:1025:35: ( FLOAT_TYPE_SUFFIX )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1=='D'||LA16_1=='F'||LA16_1=='d'||LA16_1=='f'))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1025, 35);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOATING_POINT_LITERAL", 106);
			LeaveRule("FLOATING_POINT_LITERAL", 106);
			LeaveRule_FLOATING_POINT_LITERAL();
		}
	}
	// $ANTLR end "FLOATING_POINT_LITERAL"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 107);
		TraceIn("EXPONENT", 107);
		try
		{
			// Java.g:1030:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// Java.g:1030:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(1030, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(1030, 22);
			// Java.g:1030:22: ( '+' | '-' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1=='+'||LA18_1=='-'))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:
				{
				DebugLocation(1030, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(1030, 33);
			// Java.g:1030:33: ( '0' .. '9' )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if (((LA19_1>='0' && LA19_1<='9')))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1030, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 107);
			LeaveRule("EXPONENT", 107);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_FLOAT_TYPE_SUFFIX();
	partial void LeaveRule_FLOAT_TYPE_SUFFIX();

	// $ANTLR start "FLOAT_TYPE_SUFFIX"
	[GrammarRule("FLOAT_TYPE_SUFFIX")]
	private void mFLOAT_TYPE_SUFFIX()
	{
		EnterRule_FLOAT_TYPE_SUFFIX();
		EnterRule("FLOAT_TYPE_SUFFIX", 108);
		TraceIn("FLOAT_TYPE_SUFFIX", 108);
		try
		{
			// Java.g:1033:19: ( ( 'f' | 'F' | 'd' | 'D' ) )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(1033, 19);
			if (input.LA(1)=='D'||input.LA(1)=='F'||input.LA(1)=='d'||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("FLOAT_TYPE_SUFFIX", 108);
			LeaveRule("FLOAT_TYPE_SUFFIX", 108);
			LeaveRule_FLOAT_TYPE_SUFFIX();
		}
	}
	// $ANTLR end "FLOAT_TYPE_SUFFIX"

	partial void EnterRule_CHARACTER_LITERAL();
	partial void LeaveRule_CHARACTER_LITERAL();

	// $ANTLR start "CHARACTER_LITERAL"
	[GrammarRule("CHARACTER_LITERAL")]
	private void mCHARACTER_LITERAL()
	{
		EnterRule_CHARACTER_LITERAL();
		EnterRule("CHARACTER_LITERAL", 109);
		TraceIn("CHARACTER_LITERAL", 109);
		try
		{
			int _type = CHARACTER_LITERAL;
			int _channel = DefaultTokenChannel;
			// Java.g:1035:5: ( '\\'' ( ESCAPE_SEQUENCE |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// Java.g:1035:9: '\\'' ( ESCAPE_SEQUENCE |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(1035, 9);
			Match('\''); 
			DebugLocation(1035, 14);
			// Java.g:1035:14: ( ESCAPE_SEQUENCE |~ ( '\\'' | '\\\\' ) )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1=='\\'))
			{
				alt20 = 1;
			}
			else if (((LA20_1>='\u0000' && LA20_1<='&')||(LA20_1>='(' && LA20_1<='[')||(LA20_1>=']' && LA20_1<='\uFFFF')))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1035:16: ESCAPE_SEQUENCE
				{
				DebugLocation(1035, 16);
				mESCAPE_SEQUENCE(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1035:34: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(1035, 34);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(1035, 49);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARACTER_LITERAL", 109);
			LeaveRule("CHARACTER_LITERAL", 109);
			LeaveRule_CHARACTER_LITERAL();
		}
	}
	// $ANTLR end "CHARACTER_LITERAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 110);
		TraceIn("STRING_LITERAL", 110);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// Java.g:1039:5: ( '\"' ( ESCAPE_SEQUENCE |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// Java.g:1039:8: '\"' ( ESCAPE_SEQUENCE |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(1039, 8);
			Match('\"'); 
			DebugLocation(1039, 12);
			// Java.g:1039:12: ( ESCAPE_SEQUENCE |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=3;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1=='\\'))
				{
					alt21 = 1;
				}
				else if (((LA21_1>='\u0000' && LA21_1<='!')||(LA21_1>='#' && LA21_1<='[')||(LA21_1>=']' && LA21_1<='\uFFFF')))
				{
					alt21 = 2;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1039:14: ESCAPE_SEQUENCE
					{
					DebugLocation(1039, 14);
					mESCAPE_SEQUENCE(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:1039:32: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(1039, 32);
					input.Consume();


					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(1039, 47);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 110);
			LeaveRule("STRING_LITERAL", 110);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ESCAPE_SEQUENCE();
	partial void LeaveRule_ESCAPE_SEQUENCE();

	// $ANTLR start "ESCAPE_SEQUENCE"
	[GrammarRule("ESCAPE_SEQUENCE")]
	private void mESCAPE_SEQUENCE()
	{
		EnterRule_ESCAPE_SEQUENCE();
		EnterRule("ESCAPE_SEQUENCE", 111);
		TraceIn("ESCAPE_SEQUENCE", 111);
		try
		{
			// Java.g:1045:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESCAPE | OCTAL_ESCAPE )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt22 = 1;
					}
					break;
				case 'u':
					{
					alt22 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt22 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 22, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1045:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(1045, 9);
				Match('\\'); 
				DebugLocation(1045, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1046:9: UNICODE_ESCAPE
				{
				DebugLocation(1046, 9);
				mUNICODE_ESCAPE(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1047:9: OCTAL_ESCAPE
				{
				DebugLocation(1047, 9);
				mOCTAL_ESCAPE(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESCAPE_SEQUENCE", 111);
			LeaveRule("ESCAPE_SEQUENCE", 111);
			LeaveRule_ESCAPE_SEQUENCE();
		}
	}
	// $ANTLR end "ESCAPE_SEQUENCE"

	partial void EnterRule_OCTAL_ESCAPE();
	partial void LeaveRule_OCTAL_ESCAPE();

	// $ANTLR start "OCTAL_ESCAPE"
	[GrammarRule("OCTAL_ESCAPE")]
	private void mOCTAL_ESCAPE()
	{
		EnterRule_OCTAL_ESCAPE();
		EnterRule("OCTAL_ESCAPE", 112);
		TraceIn("OCTAL_ESCAPE", 112);
		try
		{
			// Java.g:1052:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt23=3;
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1=='\\'))
			{
				int LA23_2 = input.LA(2);

				if (((LA23_2>='0' && LA23_2<='3')))
				{
					int LA23_3 = input.LA(3);

					if (((LA23_3>='0' && LA23_3<='7')))
					{
						int LA23_4 = input.LA(4);

						if (((LA23_4>='0' && LA23_4<='7')))
						{
							alt23 = 1;
						}
						else
						{
							alt23 = 2;
						}
					}
					else
					{
						alt23 = 3;
					}
				}
				else if (((LA23_2>='4' && LA23_2<='7')))
				{
					int LA23_3 = input.LA(3);

					if (((LA23_3>='0' && LA23_3<='7')))
					{
						alt23 = 2;
					}
					else
					{
						alt23 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1052:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(1052, 9);
				Match('\\'); 
				DebugLocation(1052, 14);
				input.Consume();

				DebugLocation(1052, 25);
				input.Consume();

				DebugLocation(1052, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1053:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(1053, 9);
				Match('\\'); 
				DebugLocation(1053, 14);
				input.Consume();

				DebugLocation(1053, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1054:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(1054, 9);
				Match('\\'); 
				DebugLocation(1054, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESCAPE", 112);
			LeaveRule("OCTAL_ESCAPE", 112);
			LeaveRule_OCTAL_ESCAPE();
		}
	}
	// $ANTLR end "OCTAL_ESCAPE"

	partial void EnterRule_UNICODE_ESCAPE();
	partial void LeaveRule_UNICODE_ESCAPE();

	// $ANTLR start "UNICODE_ESCAPE"
	[GrammarRule("UNICODE_ESCAPE")]
	private void mUNICODE_ESCAPE()
	{
		EnterRule_UNICODE_ESCAPE();
		EnterRule("UNICODE_ESCAPE", 113);
		TraceIn("UNICODE_ESCAPE", 113);
		try
		{
			// Java.g:1059:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// Java.g:1059:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(1059, 9);
			Match('\\'); 
			DebugLocation(1059, 14);
			Match('u'); 
			DebugLocation(1059, 18);
			mHEX_DIGIT(); 
			DebugLocation(1059, 28);
			mHEX_DIGIT(); 
			DebugLocation(1059, 38);
			mHEX_DIGIT(); 
			DebugLocation(1059, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESCAPE", 113);
			LeaveRule("UNICODE_ESCAPE", 113);
			LeaveRule_UNICODE_ESCAPE();
		}
	}
	// $ANTLR end "UNICODE_ESCAPE"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 114);
		TraceIn("IDENT", 114);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// Java.g:1062:5: ( JAVA_ID_START ( JAVA_ID_PART )* )
			DebugEnterAlt(1);
			// Java.g:1062:9: JAVA_ID_START ( JAVA_ID_PART )*
			{
			DebugLocation(1062, 9);
			mJAVA_ID_START(); 
			DebugLocation(1062, 23);
			// Java.g:1062:23: ( JAVA_ID_PART )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1=='$'||(LA24_1>='0' && LA24_1<='9')||(LA24_1>='A' && LA24_1<='Z')||LA24_1=='_'||(LA24_1>='a' && LA24_1<='z')||(LA24_1>='\u00C0' && LA24_1<='\u00D6')||(LA24_1>='\u00D8' && LA24_1<='\u00F6')||(LA24_1>='\u00F8' && LA24_1<='\u1FFF')||(LA24_1>='\u3040' && LA24_1<='\u318F')||(LA24_1>='\u3300' && LA24_1<='\u337F')||(LA24_1>='\u3400' && LA24_1<='\u3D2D')||(LA24_1>='\u4E00' && LA24_1<='\u9FFF')||(LA24_1>='\uF900' && LA24_1<='\uFAFF')))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1062, 23);
					input.Consume();


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 114);
			LeaveRule("IDENT", 114);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_JAVA_ID_START();
	partial void LeaveRule_JAVA_ID_START();

	// $ANTLR start "JAVA_ID_START"
	[GrammarRule("JAVA_ID_START")]
	private void mJAVA_ID_START()
	{
		EnterRule_JAVA_ID_START();
		EnterRule("JAVA_ID_START", 115);
		TraceIn("JAVA_ID_START", 115);
		try
		{
			// Java.g:1068:5: ( '\\u0024' | '\\u0041' .. '\\u005a' | '\\u005f' | '\\u0061' .. '\\u007a' | '\\u00c0' .. '\\u00d6' | '\\u00d8' .. '\\u00f6' | '\\u00f8' .. '\\u00ff' | '\\u0100' .. '\\u1fff' | '\\u3040' .. '\\u318f' | '\\u3300' .. '\\u337f' | '\\u3400' .. '\\u3d2d' | '\\u4e00' .. '\\u9fff' | '\\uf900' .. '\\ufaff' )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(1068, 5);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u3040' && input.LA(1)<='\u318F')||(input.LA(1)>='\u3300' && input.LA(1)<='\u337F')||(input.LA(1)>='\u3400' && input.LA(1)<='\u3D2D')||(input.LA(1)>='\u4E00' && input.LA(1)<='\u9FFF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFAFF'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("JAVA_ID_START", 115);
			LeaveRule("JAVA_ID_START", 115);
			LeaveRule_JAVA_ID_START();
		}
	}
	// $ANTLR end "JAVA_ID_START"

	partial void EnterRule_JAVA_ID_PART();
	partial void LeaveRule_JAVA_ID_PART();

	// $ANTLR start "JAVA_ID_PART"
	[GrammarRule("JAVA_ID_PART")]
	private void mJAVA_ID_PART()
	{
		EnterRule_JAVA_ID_PART();
		EnterRule("JAVA_ID_PART", 116);
		TraceIn("JAVA_ID_PART", 116);
		try
		{
			// Java.g:1085:5: ( JAVA_ID_START | '\\u0030' .. '\\u0039' )
			DebugEnterAlt(1);
			// Java.g:
			{
			DebugLocation(1085, 5);
			if (input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u3040' && input.LA(1)<='\u318F')||(input.LA(1)>='\u3300' && input.LA(1)<='\u337F')||(input.LA(1)>='\u3400' && input.LA(1)<='\u3D2D')||(input.LA(1)>='\u4E00' && input.LA(1)<='\u9FFF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFAFF'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("JAVA_ID_PART", 116);
			LeaveRule("JAVA_ID_PART", 116);
			LeaveRule_JAVA_ID_PART();
		}
	}
	// $ANTLR end "JAVA_ID_PART"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 117);
		TraceIn("WS", 117);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Java.g:1088:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
			DebugEnterAlt(1);
			// Java.g:1088:8: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
			{
			DebugLocation(1088, 8);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(1089, 5);
			   
			        if (!PreserveWhitespacesAndComments) {
			            Skip();
			        } else {
			            _channel = TokenChannels.Hidden;
			        }
			    

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 117);
			LeaveRule("WS", 117);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 118);
		TraceIn("COMMENT", 118);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// Java.g:1099:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// Java.g:1099:9: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(1099, 9);
			Match("/*"); 

			DebugLocation(1099, 14);
			// Java.g:1099:14: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1=='*'))
				{
					int LA25_2 = input.LA(2);

					if ((LA25_2=='/'))
					{
						alt25 = 2;
					}
					else if (((LA25_2>='\u0000' && LA25_2<='.')||(LA25_2>='0' && LA25_2<='\uFFFF')))
					{
						alt25 = 1;
					}


				}
				else if (((LA25_1>='\u0000' && LA25_1<=')')||(LA25_1>='+' && LA25_1<='\uFFFF')))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1099:42: .
					{
					DebugLocation(1099, 42);
					MatchAny(); 

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(1099, 47);
			Match("*/"); 

			DebugLocation(1100, 5);
			   
			        if (!PreserveWhitespacesAndComments) {
			            Skip();
			        } else {
			            _channel = TokenChannels.Hidden;
			        }
			    

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 118);
			LeaveRule("COMMENT", 118);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 119);
		TraceIn("LINE_COMMENT", 119);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// Java.g:1110:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// Java.g:1110:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(1110, 7);
			Match("//"); 

			DebugLocation(1110, 12);
			// Java.g:1110:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if (((LA26_1>='\u0000' && LA26_1<='\t')||(LA26_1>='\u000B' && LA26_1<='\f')||(LA26_1>='\u000E' && LA26_1<='\uFFFF')))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1110, 12);
					input.Consume();


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(1110, 26);
			// Java.g:1110:26: ( '\\r' )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1=='\r'))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1110:26: '\\r'
				{
				DebugLocation(1110, 26);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(1110, 32);
			Match('\n'); 
			DebugLocation(1111, 5);
			   
			        if (!PreserveWhitespacesAndComments) {
			            Skip();
			        } else {
			            _channel = TokenChannels.Hidden;
			        }
			    

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 119);
			LeaveRule("LINE_COMMENT", 119);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	public override void mTokens()
	{
		// Java.g:1:8: ( ABSTRACT | AND | AND_ASSIGN | ASSERT | ASSIGN | AT | BIT_SHIFT_RIGHT | BIT_SHIFT_RIGHT_ASSIGN | BOOLEAN | BREAK | BYTE | CASE | CATCH | CHAR | CLASS | COLON | COMMA | CONTINUE | DEC | DEFAULT | DIV | DIV_ASSIGN | DO | DOT | DOTSTAR | DOUBLE | ELLIPSIS | ELSE | ENUM | EQUAL | EXTENDS | FALSE | FINAL | FINALLY | FLOAT | FOR | GREATER_OR_EQUAL | GREATER_THAN | IF | IMPLEMENTS | IMPORT | INC | INSTANCEOF | INT | INTERFACE | LBRACK | LCURLY | LESS_OR_EQUAL | LESS_THAN | LOGICAL_AND | LOGICAL_NOT | LOGICAL_OR | LONG | LPAREN | MINUS | MINUS_ASSIGN | MOD | MOD_ASSIGN | NATIVE | NEW | NOT | NOT_EQUAL | NULL | OR | OR_ASSIGN | PACKAGE | PLUS | PLUS_ASSIGN | PRIVATE | PROTECTED | PUBLIC | QUESTION | RBRACK | RCURLY | RETURN | RPAREN | SEMI | SHIFT_LEFT | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT | SHIFT_RIGHT_ASSIGN | SHORT | STAR | STAR_ASSIGN | STATIC | STRICTFP | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRUE | TRY | VOID | VOLATILE | WHILE | XOR | XOR_ASSIGN | HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | IDENT | WS | COMMENT | LINE_COMMENT )
		int alt28=110;
		try { DebugEnterDecision(28, false);
		try
		{
			alt28 = dfa28.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(28); }
		switch (alt28)
		{
		case 1:
			DebugEnterAlt(1);
			// Java.g:1:10: ABSTRACT
			{
			DebugLocation(1, 10);
			mABSTRACT(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Java.g:1:19: AND
			{
			DebugLocation(1, 19);
			mAND(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Java.g:1:23: AND_ASSIGN
			{
			DebugLocation(1, 23);
			mAND_ASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Java.g:1:34: ASSERT
			{
			DebugLocation(1, 34);
			mASSERT(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Java.g:1:41: ASSIGN
			{
			DebugLocation(1, 41);
			mASSIGN(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Java.g:1:48: AT
			{
			DebugLocation(1, 48);
			mAT(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Java.g:1:51: BIT_SHIFT_RIGHT
			{
			DebugLocation(1, 51);
			mBIT_SHIFT_RIGHT(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Java.g:1:67: BIT_SHIFT_RIGHT_ASSIGN
			{
			DebugLocation(1, 67);
			mBIT_SHIFT_RIGHT_ASSIGN(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Java.g:1:90: BOOLEAN
			{
			DebugLocation(1, 90);
			mBOOLEAN(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Java.g:1:98: BREAK
			{
			DebugLocation(1, 98);
			mBREAK(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Java.g:1:104: BYTE
			{
			DebugLocation(1, 104);
			mBYTE(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Java.g:1:109: CASE
			{
			DebugLocation(1, 109);
			mCASE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Java.g:1:114: CATCH
			{
			DebugLocation(1, 114);
			mCATCH(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Java.g:1:120: CHAR
			{
			DebugLocation(1, 120);
			mCHAR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Java.g:1:125: CLASS
			{
			DebugLocation(1, 125);
			mCLASS(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Java.g:1:131: COLON
			{
			DebugLocation(1, 131);
			mCOLON(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Java.g:1:137: COMMA
			{
			DebugLocation(1, 137);
			mCOMMA(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Java.g:1:143: CONTINUE
			{
			DebugLocation(1, 143);
			mCONTINUE(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Java.g:1:152: DEC
			{
			DebugLocation(1, 152);
			mDEC(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Java.g:1:156: DEFAULT
			{
			DebugLocation(1, 156);
			mDEFAULT(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Java.g:1:164: DIV
			{
			DebugLocation(1, 164);
			mDIV(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Java.g:1:168: DIV_ASSIGN
			{
			DebugLocation(1, 168);
			mDIV_ASSIGN(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Java.g:1:179: DO
			{
			DebugLocation(1, 179);
			mDO(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Java.g:1:182: DOT
			{
			DebugLocation(1, 182);
			mDOT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Java.g:1:186: DOTSTAR
			{
			DebugLocation(1, 186);
			mDOTSTAR(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Java.g:1:194: DOUBLE
			{
			DebugLocation(1, 194);
			mDOUBLE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Java.g:1:201: ELLIPSIS
			{
			DebugLocation(1, 201);
			mELLIPSIS(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Java.g:1:210: ELSE
			{
			DebugLocation(1, 210);
			mELSE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Java.g:1:215: ENUM
			{
			DebugLocation(1, 215);
			mENUM(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Java.g:1:220: EQUAL
			{
			DebugLocation(1, 220);
			mEQUAL(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Java.g:1:226: EXTENDS
			{
			DebugLocation(1, 226);
			mEXTENDS(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Java.g:1:234: FALSE
			{
			DebugLocation(1, 234);
			mFALSE(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Java.g:1:240: FINAL
			{
			DebugLocation(1, 240);
			mFINAL(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Java.g:1:246: FINALLY
			{
			DebugLocation(1, 246);
			mFINALLY(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Java.g:1:254: FLOAT
			{
			DebugLocation(1, 254);
			mFLOAT(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Java.g:1:260: FOR
			{
			DebugLocation(1, 260);
			mFOR(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Java.g:1:264: GREATER_OR_EQUAL
			{
			DebugLocation(1, 264);
			mGREATER_OR_EQUAL(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Java.g:1:281: GREATER_THAN
			{
			DebugLocation(1, 281);
			mGREATER_THAN(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Java.g:1:294: IF
			{
			DebugLocation(1, 294);
			mIF(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// Java.g:1:297: IMPLEMENTS
			{
			DebugLocation(1, 297);
			mIMPLEMENTS(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// Java.g:1:308: IMPORT
			{
			DebugLocation(1, 308);
			mIMPORT(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// Java.g:1:315: INC
			{
			DebugLocation(1, 315);
			mINC(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// Java.g:1:319: INSTANCEOF
			{
			DebugLocation(1, 319);
			mINSTANCEOF(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// Java.g:1:330: INT
			{
			DebugLocation(1, 330);
			mINT(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// Java.g:1:334: INTERFACE
			{
			DebugLocation(1, 334);
			mINTERFACE(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// Java.g:1:344: LBRACK
			{
			DebugLocation(1, 344);
			mLBRACK(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// Java.g:1:351: LCURLY
			{
			DebugLocation(1, 351);
			mLCURLY(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// Java.g:1:358: LESS_OR_EQUAL
			{
			DebugLocation(1, 358);
			mLESS_OR_EQUAL(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// Java.g:1:372: LESS_THAN
			{
			DebugLocation(1, 372);
			mLESS_THAN(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// Java.g:1:382: LOGICAL_AND
			{
			DebugLocation(1, 382);
			mLOGICAL_AND(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// Java.g:1:394: LOGICAL_NOT
			{
			DebugLocation(1, 394);
			mLOGICAL_NOT(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// Java.g:1:406: LOGICAL_OR
			{
			DebugLocation(1, 406);
			mLOGICAL_OR(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// Java.g:1:417: LONG
			{
			DebugLocation(1, 417);
			mLONG(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// Java.g:1:422: LPAREN
			{
			DebugLocation(1, 422);
			mLPAREN(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// Java.g:1:429: MINUS
			{
			DebugLocation(1, 429);
			mMINUS(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// Java.g:1:435: MINUS_ASSIGN
			{
			DebugLocation(1, 435);
			mMINUS_ASSIGN(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// Java.g:1:448: MOD
			{
			DebugLocation(1, 448);
			mMOD(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// Java.g:1:452: MOD_ASSIGN
			{
			DebugLocation(1, 452);
			mMOD_ASSIGN(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// Java.g:1:463: NATIVE
			{
			DebugLocation(1, 463);
			mNATIVE(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// Java.g:1:470: NEW
			{
			DebugLocation(1, 470);
			mNEW(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// Java.g:1:474: NOT
			{
			DebugLocation(1, 474);
			mNOT(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// Java.g:1:478: NOT_EQUAL
			{
			DebugLocation(1, 478);
			mNOT_EQUAL(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// Java.g:1:488: NULL
			{
			DebugLocation(1, 488);
			mNULL(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// Java.g:1:493: OR
			{
			DebugLocation(1, 493);
			mOR(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// Java.g:1:496: OR_ASSIGN
			{
			DebugLocation(1, 496);
			mOR_ASSIGN(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// Java.g:1:506: PACKAGE
			{
			DebugLocation(1, 506);
			mPACKAGE(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// Java.g:1:514: PLUS
			{
			DebugLocation(1, 514);
			mPLUS(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// Java.g:1:519: PLUS_ASSIGN
			{
			DebugLocation(1, 519);
			mPLUS_ASSIGN(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// Java.g:1:531: PRIVATE
			{
			DebugLocation(1, 531);
			mPRIVATE(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// Java.g:1:539: PROTECTED
			{
			DebugLocation(1, 539);
			mPROTECTED(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// Java.g:1:549: PUBLIC
			{
			DebugLocation(1, 549);
			mPUBLIC(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// Java.g:1:556: QUESTION
			{
			DebugLocation(1, 556);
			mQUESTION(); 

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// Java.g:1:565: RBRACK
			{
			DebugLocation(1, 565);
			mRBRACK(); 

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// Java.g:1:572: RCURLY
			{
			DebugLocation(1, 572);
			mRCURLY(); 

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// Java.g:1:579: RETURN
			{
			DebugLocation(1, 579);
			mRETURN(); 

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// Java.g:1:586: RPAREN
			{
			DebugLocation(1, 586);
			mRPAREN(); 

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// Java.g:1:593: SEMI
			{
			DebugLocation(1, 593);
			mSEMI(); 

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// Java.g:1:598: SHIFT_LEFT
			{
			DebugLocation(1, 598);
			mSHIFT_LEFT(); 

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// Java.g:1:609: SHIFT_LEFT_ASSIGN
			{
			DebugLocation(1, 609);
			mSHIFT_LEFT_ASSIGN(); 

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// Java.g:1:627: SHIFT_RIGHT
			{
			DebugLocation(1, 627);
			mSHIFT_RIGHT(); 

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// Java.g:1:639: SHIFT_RIGHT_ASSIGN
			{
			DebugLocation(1, 639);
			mSHIFT_RIGHT_ASSIGN(); 

			}
			break;
		case 82:
			DebugEnterAlt(82);
			// Java.g:1:658: SHORT
			{
			DebugLocation(1, 658);
			mSHORT(); 

			}
			break;
		case 83:
			DebugEnterAlt(83);
			// Java.g:1:664: STAR
			{
			DebugLocation(1, 664);
			mSTAR(); 

			}
			break;
		case 84:
			DebugEnterAlt(84);
			// Java.g:1:669: STAR_ASSIGN
			{
			DebugLocation(1, 669);
			mSTAR_ASSIGN(); 

			}
			break;
		case 85:
			DebugEnterAlt(85);
			// Java.g:1:681: STATIC
			{
			DebugLocation(1, 681);
			mSTATIC(); 

			}
			break;
		case 86:
			DebugEnterAlt(86);
			// Java.g:1:688: STRICTFP
			{
			DebugLocation(1, 688);
			mSTRICTFP(); 

			}
			break;
		case 87:
			DebugEnterAlt(87);
			// Java.g:1:697: SUPER
			{
			DebugLocation(1, 697);
			mSUPER(); 

			}
			break;
		case 88:
			DebugEnterAlt(88);
			// Java.g:1:703: SWITCH
			{
			DebugLocation(1, 703);
			mSWITCH(); 

			}
			break;
		case 89:
			DebugEnterAlt(89);
			// Java.g:1:710: SYNCHRONIZED
			{
			DebugLocation(1, 710);
			mSYNCHRONIZED(); 

			}
			break;
		case 90:
			DebugEnterAlt(90);
			// Java.g:1:723: THIS
			{
			DebugLocation(1, 723);
			mTHIS(); 

			}
			break;
		case 91:
			DebugEnterAlt(91);
			// Java.g:1:728: THROW
			{
			DebugLocation(1, 728);
			mTHROW(); 

			}
			break;
		case 92:
			DebugEnterAlt(92);
			// Java.g:1:734: THROWS
			{
			DebugLocation(1, 734);
			mTHROWS(); 

			}
			break;
		case 93:
			DebugEnterAlt(93);
			// Java.g:1:741: TRANSIENT
			{
			DebugLocation(1, 741);
			mTRANSIENT(); 

			}
			break;
		case 94:
			DebugEnterAlt(94);
			// Java.g:1:751: TRUE
			{
			DebugLocation(1, 751);
			mTRUE(); 

			}
			break;
		case 95:
			DebugEnterAlt(95);
			// Java.g:1:756: TRY
			{
			DebugLocation(1, 756);
			mTRY(); 

			}
			break;
		case 96:
			DebugEnterAlt(96);
			// Java.g:1:760: VOID
			{
			DebugLocation(1, 760);
			mVOID(); 

			}
			break;
		case 97:
			DebugEnterAlt(97);
			// Java.g:1:765: VOLATILE
			{
			DebugLocation(1, 765);
			mVOLATILE(); 

			}
			break;
		case 98:
			DebugEnterAlt(98);
			// Java.g:1:774: WHILE
			{
			DebugLocation(1, 774);
			mWHILE(); 

			}
			break;
		case 99:
			DebugEnterAlt(99);
			// Java.g:1:780: XOR
			{
			DebugLocation(1, 780);
			mXOR(); 

			}
			break;
		case 100:
			DebugEnterAlt(100);
			// Java.g:1:784: XOR_ASSIGN
			{
			DebugLocation(1, 784);
			mXOR_ASSIGN(); 

			}
			break;
		case 101:
			DebugEnterAlt(101);
			// Java.g:1:795: HEX_LITERAL
			{
			DebugLocation(1, 795);
			mHEX_LITERAL(); 

			}
			break;
		case 102:
			DebugEnterAlt(102);
			// Java.g:1:807: DECIMAL_LITERAL
			{
			DebugLocation(1, 807);
			mDECIMAL_LITERAL(); 

			}
			break;
		case 103:
			DebugEnterAlt(103);
			// Java.g:1:823: OCTAL_LITERAL
			{
			DebugLocation(1, 823);
			mOCTAL_LITERAL(); 

			}
			break;
		case 104:
			DebugEnterAlt(104);
			// Java.g:1:837: FLOATING_POINT_LITERAL
			{
			DebugLocation(1, 837);
			mFLOATING_POINT_LITERAL(); 

			}
			break;
		case 105:
			DebugEnterAlt(105);
			// Java.g:1:860: CHARACTER_LITERAL
			{
			DebugLocation(1, 860);
			mCHARACTER_LITERAL(); 

			}
			break;
		case 106:
			DebugEnterAlt(106);
			// Java.g:1:878: STRING_LITERAL
			{
			DebugLocation(1, 878);
			mSTRING_LITERAL(); 

			}
			break;
		case 107:
			DebugEnterAlt(107);
			// Java.g:1:893: IDENT
			{
			DebugLocation(1, 893);
			mIDENT(); 

			}
			break;
		case 108:
			DebugEnterAlt(108);
			// Java.g:1:899: WS
			{
			DebugLocation(1, 899);
			mWS(); 

			}
			break;
		case 109:
			DebugEnterAlt(109);
			// Java.g:1:902: COMMENT
			{
			DebugLocation(1, 902);
			mCOMMENT(); 

			}
			break;
		case 110:
			DebugEnterAlt(110);
			// Java.g:1:910: LINE_COMMENT
			{
			DebugLocation(1, 910);
			mLINE_COMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA28 dfa28;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa28 = new DFA28(this);
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x1\xFFFF\x1\x2D\x1\x33\x1\x35\x1\xFFFF\x1\x38\x2\x2D\x2\xFFFF\x1\x42"+
			"\x1\x2D\x1\x48\x1\x4B\x3\x2D\x1\x59\x2\xFFFF\x1\x5C\x1\x5E\x1\x61\x1"+
			"\x2D\x1\xFFFF\x1\x64\x1\x2D\x1\xFFFF\x1\x2D\x3\xFFFF\x1\x2D\x2\xFFFF"+
			"\x1\x2D\x1\x72\x3\x2D\x1\x78\x2\x7A\x4\xFFFF\x2\x2D\x5\xFFFF\x1\x81\x2"+
			"\xFFFF\x7\x2D\x3\xFFFF\x1\x2D\x1\x8C\x8\xFFFF\x7\x2D\x1\x94\x2\x2D\x4"+
			"\xFFFF\x1\x99\x6\xFFFF\x1\x2D\x2\xFFFF\xC\x2D\x2\xFFFF\x4\x2D\x4\xFFFF"+
			"\x1\xB1\x1\x7A\x2\x2D\x1\xB5\x2\xFFFF\xA\x2D\x1\xFFFF\x6\x2D\x1\xC6\x1"+
			"\xFFFF\x2\x2D\x1\xCB\x2\xFFFF\x2\x2D\x1\xCE\x10\x2D\x1\xDF\x3\x2D\x1"+
			"\xFFFF\x2\x2D\x2\xFFFF\x2\x2D\x1\xE7\x1\xE8\x1\x2D\x1\xEA\x4\x2D\x1\xEF"+
			"\x1\xF0\x4\x2D\x1\xFFFF\x4\x2D\x1\xFFFF\x1\xF9\x1\x2D\x1\xFFFF\x1\xFB"+
			"\xB\x2D\x1\x107\x2\x2D\x1\x10A\x1\xFFFF\x1\x10B\x5\x2D\x1\x111\x2\xFFFF"+
			"\x1\x112\x1\xFFFF\x1\x113\x3\x2D\x2\xFFFF\x1\x2D\x1\x118\x1\x11A\x1\x11B"+
			"\x4\x2D\x1\xFFFF\x1\x2D\x1\xFFFF\x5\x2D\x1\x126\x2\x2D\x1\x129\x2\x2D"+
			"\x1\xFFFF\x1\x12D\x1\x2D\x2\xFFFF\x1\x2D\x1\x130\x1\x2D\x1\x132\x1\x2D"+
			"\x3\xFFFF\x2\x2D\x1\x136\x1\x2D\x1\xFFFF\x1\x2D\x2\xFFFF\x1\x2D\x1\x13A"+
			"\x2\x2D\x1\x13D\x3\x2D\x1\x141\x1\x142\x1\xFFFF\x1\x143\x1\x2D\x1\xFFFF"+
			"\x1\x145\x1\x2D\x1\x147\x1\xFFFF\x2\x2D\x1\xFFFF\x1\x2D\x1\xFFFF\x1\x14B"+
			"\x1\x2D\x1\x14D\x1\xFFFF\x1\x14E\x1\x14F\x1\x2D\x1\xFFFF\x2\x2D\x1\xFFFF"+
			"\x1\x153\x1\x154\x1\x2D\x3\xFFFF\x1\x2D\x1\xFFFF\x1\x2D\x1\xFFFF\x2\x2D"+
			"\x1\x15A\x1\xFFFF\x1\x15B\x3\xFFFF\x3\x2D\x2\xFFFF\x1\x2D\x1\x160\x2"+
			"\x2D\x1\x163\x2\xFFFF\x2\x2D\x1\x166\x1\x167\x1\xFFFF\x1\x2D\x1\x169"+
			"\x1\xFFFF\x1\x16A\x1\x16B\x2\xFFFF\x1\x2D\x3\xFFFF\x1\x2D\x1\x16E\x1"+
			"\xFFFF";
		private const string DFA28_eofS =
			"\x16F\xFFFF";
		private const string DFA28_minS =
			"\x1\x9\x1\x62\x1\x26\x1\x3D\x1\xFFFF\x1\x3D\x1\x6F\x1\x61\x2\xFFFF\x1"+
			"\x2D\x1\x65\x2\x2A\x1\x6C\x1\x61\x1\x66\x1\x2B\x2\xFFFF\x1\x3C\x2\x3D"+
			"\x1\x6F\x1\xFFFF\x1\x3D\x1\x61\x1\xFFFF\x1\x61\x3\xFFFF\x1\x65\x2\xFFFF"+
			"\x1\x68\x1\x3D\x1\x68\x1\x6F\x1\x68\x1\x3D\x2\x2E\x4\xFFFF\x2\x73\x5"+
			"\xFFFF\x1\x3D\x2\xFFFF\x1\x6F\x1\x65\x1\x74\x1\x73\x2\x61\x1\x6E\x3\xFFFF"+
			"\x1\x66\x1\x24\x8\xFFFF\x1\x73\x1\x75\x1\x74\x1\x6C\x1\x6E\x1\x6F\x1"+
			"\x72\x1\x24\x1\x70\x1\x73\x4\xFFFF\x1\x3D\x6\xFFFF\x1\x6E\x2\xFFFF\x1"+
			"\x74\x1\x77\x1\x6C\x1\x63\x1\x69\x1\x62\x1\x74\x1\x6F\x1\x61\x1\x70\x1"+
			"\x69\x1\x6E\x2\xFFFF\x1\x69\x1\x61\x2\x69\x4\xFFFF\x2\x2E\x1\x74\x1\x65"+
			"\x1\x3D\x2\xFFFF\x1\x6C\x1\x61\x2\x65\x1\x63\x1\x72\x1\x73\x1\x74\x1"+
			"\x61\x1\x62\x1\xFFFF\x1\x65\x1\x6D\x1\x65\x1\x73\x2\x61\x1\x24\x1\xFFFF"+
			"\x1\x6C\x1\x74\x1\x24\x2\xFFFF\x1\x67\x1\x69\x1\x24\x1\x6C\x1\x6B\x1"+
			"\x76\x1\x74\x1\x6C\x1\x75\x1\x72\x1\x74\x1\x69\x1\x65\x1\x74\x1\x63\x1"+
			"\x73\x1\x6F\x1\x6E\x1\x65\x1\x24\x1\x64\x1\x61\x1\x6C\x1\xFFFF\x2\x72"+
			"\x2\xFFFF\x1\x65\x1\x6B\x2\x24\x1\x68\x1\x24\x1\x73\x1\x69\x1\x75\x1"+
			"\x6C\x2\x24\x1\x6E\x1\x65\x1\x6C\x1\x74\x1\xFFFF\x1\x65\x1\x72\x1\x61"+
			"\x1\x72\x1\xFFFF\x1\x24\x1\x76\x1\xFFFF\x1\x24\x2\x61\x1\x65\x1\x69\x1"+
			"\x72\x1\x74\x1\x69\x1\x63\x1\x72\x1\x63\x1\x68\x1\x24\x1\x77\x1\x73\x1"+
			"\x24\x1\xFFFF\x1\x24\x1\x74\x1\x65\x1\x61\x1\x74\x1\x61\x1\x24\x2\xFFFF"+
			"\x1\x24\x1\xFFFF\x1\x24\x1\x6E\x1\x6C\x1\x65\x2\xFFFF\x1\x64\x3\x24\x1"+
			"\x6D\x1\x74\x1\x6E\x1\x66\x1\xFFFF\x1\x65\x1\xFFFF\x1\x67\x1\x74\x2\x63"+
			"\x1\x6E\x1\x24\x1\x63\x1\x74\x1\x24\x1\x68\x1\x72\x1\xFFFF\x1\x24\x1"+
			"\x69\x2\xFFFF\x1\x69\x1\x24\x1\x63\x1\x24\x1\x6E\x3\xFFFF\x1\x75\x1\x74"+
			"\x1\x24\x1\x73\x1\xFFFF\x1\x79\x2\xFFFF\x1\x65\x1\x24\x1\x63\x1\x61\x1"+
			"\x24\x2\x65\x1\x74\x2\x24\x1\xFFFF\x1\x24\x1\x66\x1\xFFFF\x1\x24\x1\x6F"+
			"\x1\x24\x1\xFFFF\x1\x65\x1\x6C\x1\xFFFF\x1\x74\x1\xFFFF\x1\x24\x1\x65"+
			"\x1\x24\x1\xFFFF\x2\x24\x1\x6E\x1\xFFFF\x1\x65\x1\x63\x1\xFFFF\x2\x24"+
			"\x1\x65\x3\xFFFF\x1\x70\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x6E\x1\x65\x1\x24"+
			"\x1\xFFFF\x1\x24\x3\xFFFF\x1\x74\x1\x6F\x1\x65\x2\xFFFF\x1\x64\x1\x24"+
			"\x1\x69\x1\x74\x1\x24\x2\xFFFF\x1\x73\x1\x66\x2\x24\x1\xFFFF\x1\x7A\x1"+
			"\x24\x1\xFFFF\x2\x24\x2\xFFFF\x1\x65\x3\xFFFF\x1\x64\x1\x24\x1\xFFFF";
		private const string DFA28_maxS =
			"\x1\xFAFF\x1\x73\x2\x3D\x1\xFFFF\x1\x3E\x1\x79\x1\x6F\x2\xFFFF\x1\x3D"+
			"\x1\x6F\x1\x3D\x1\x39\x1\x78\x1\x6F\x1\x6E\x1\x3D\x2\xFFFF\x2\x3D\x1"+
			"\x7C\x1\x6F\x1\xFFFF\x1\x3D\x1\x75\x1\xFFFF\x1\x75\x3\xFFFF\x1\x65\x2"+
			"\xFFFF\x1\x79\x1\x3D\x1\x72\x1\x6F\x1\x68\x1\x3D\x1\x78\x1\x66\x4\xFFFF"+
			"\x2\x73\x5\xFFFF\x1\x3E\x2\xFFFF\x1\x6F\x1\x65\x2\x74\x2\x61\x1\x6E\x3"+
			"\xFFFF\x1\x66\x1\xFAFF\x8\xFFFF\x1\x73\x1\x75\x1\x74\x1\x6C\x1\x6E\x1"+
			"\x6F\x1\x72\x1\xFAFF\x1\x70\x1\x74\x4\xFFFF\x1\x3D\x6\xFFFF\x1\x6E\x2"+
			"\xFFFF\x1\x74\x1\x77\x1\x6C\x1\x63\x1\x6F\x1\x62\x1\x74\x1\x6F\x1\x72"+
			"\x1\x70\x1\x69\x1\x6E\x2\xFFFF\x1\x72\x1\x79\x1\x6C\x1\x69\x4\xFFFF\x2"+
			"\x66\x1\x74\x1\x65\x1\x3D\x2\xFFFF\x1\x6C\x1\x61\x2\x65\x1\x63\x1\x72"+
			"\x1\x73\x1\x74\x1\x61\x1\x62\x1\xFFFF\x1\x65\x1\x6D\x1\x65\x1\x73\x2"+
			"\x61\x1\xFAFF\x1\xFFFF\x1\x6F\x1\x74\x1\xFAFF\x2\xFFFF\x1\x67\x1\x69"+
			"\x1\xFAFF\x1\x6C\x1\x6B\x1\x76\x1\x74\x1\x6C\x1\x75\x1\x72\x1\x74\x1"+
			"\x69\x1\x65\x1\x74\x1\x63\x1\x73\x1\x6F\x1\x6E\x1\x65\x1\xFAFF\x1\x64"+
			"\x1\x61\x1\x6C\x1\xFFFF\x2\x72\x2\xFFFF\x1\x65\x1\x6B\x2\xFAFF\x1\x68"+
			"\x1\xFAFF\x1\x73\x1\x69\x1\x75\x1\x6C\x2\xFAFF\x1\x6E\x1\x65\x1\x6C\x1"+
			"\x74\x1\xFFFF\x1\x65\x1\x72\x1\x61\x1\x72\x1\xFFFF\x1\xFAFF\x1\x76\x1"+
			"\xFFFF\x1\xFAFF\x2\x61\x1\x65\x1\x69\x1\x72\x1\x74\x1\x69\x1\x63\x1\x72"+
			"\x1\x63\x1\x68\x1\xFAFF\x1\x77\x1\x73\x1\xFAFF\x1\xFFFF\x1\xFAFF\x1\x74"+
			"\x1\x65\x1\x61\x1\x74\x1\x61\x1\xFAFF\x2\xFFFF\x1\xFAFF\x1\xFFFF\x1\xFAFF"+
			"\x1\x6E\x1\x6C\x1\x65\x2\xFFFF\x1\x64\x3\xFAFF\x1\x6D\x1\x74\x1\x6E\x1"+
			"\x66\x1\xFFFF\x1\x65\x1\xFFFF\x1\x67\x1\x74\x2\x63\x1\x6E\x1\xFAFF\x1"+
			"\x63\x1\x74\x1\xFAFF\x1\x68\x1\x72\x1\xFFFF\x1\xFAFF\x1\x69\x2\xFFFF"+
			"\x1\x69\x1\xFAFF\x1\x63\x1\xFAFF\x1\x6E\x3\xFFFF\x1\x75\x1\x74\x1\xFAFF"+
			"\x1\x73\x1\xFFFF\x1\x79\x2\xFFFF\x1\x65\x1\xFAFF\x1\x63\x1\x61\x1\xFAFF"+
			"\x2\x65\x1\x74\x2\xFAFF\x1\xFFFF\x1\xFAFF\x1\x66\x1\xFFFF\x1\xFAFF\x1"+
			"\x6F\x1\xFAFF\x1\xFFFF\x1\x65\x1\x6C\x1\xFFFF\x1\x74\x1\xFFFF\x1\xFAFF"+
			"\x1\x65\x1\xFAFF\x1\xFFFF\x2\xFAFF\x1\x6E\x1\xFFFF\x1\x65\x1\x63\x1\xFFFF"+
			"\x2\xFAFF\x1\x65\x3\xFFFF\x1\x70\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x6E\x1\x65"+
			"\x1\xFAFF\x1\xFFFF\x1\xFAFF\x3\xFFFF\x1\x74\x1\x6F\x1\x65\x2\xFFFF\x1"+
			"\x64\x1\xFAFF\x1\x69\x1\x74\x1\xFAFF\x2\xFFFF\x1\x73\x1\x66\x2\xFAFF"+
			"\x1\xFFFF\x1\x7A\x1\xFAFF\x1\xFFFF\x2\xFAFF\x2\xFFFF\x1\x65\x3\xFFFF"+
			"\x1\x64\x1\xFAFF\x1\xFFFF";
		private const string DFA28_acceptS =
			"\x4\xFFFF\x1\x6\x3\xFFFF\x1\x10\x1\x11\x8\xFFFF\x1\x2E\x1\x2F\x4\xFFFF"+
			"\x1\x36\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x48\x1\x49\x1\x4A\x1\xFFFF\x1\x4C"+
			"\x1\x4D\x8\xFFFF\x1\x69\x1\x6A\x1\x6B\x1\x6C\x2\xFFFF\x1\x3\x1\x32\x1"+
			"\x2\x1\x1E\x1\x5\x1\xFFFF\x1\x25\x1\x26\x7\xFFFF\x1\x13\x1\x38\x1\x37"+
			"\x2\xFFFF\x1\x16\x1\x6D\x1\x6E\x1\x15\x1\x19\x1\x1B\x1\x18\x1\x68\xA"+
			"\xFFFF\x1\x2A\x1\x44\x1\x43\x1\x30\x1\xFFFF\x1\x31\x1\x3E\x1\x33\x1\x34"+
			"\x1\x41\x1\x40\x1\xFFFF\x1\x3A\x1\x39\xC\xFFFF\x1\x54\x1\x53\x4\xFFFF"+
			"\x1\x64\x1\x63\x1\x65\x1\x66\x5\xFFFF\x1\x51\x1\x50\xA\xFFFF\x1\x17\x7"+
			"\xFFFF\x1\x27\x3\xFFFF\x1\x4F\x1\x4E\x17\xFFFF\x1\x67\x2\xFFFF\x1\x8"+
			"\x1\x7\x10\xFFFF\x1\x24\x4\xFFFF\x1\x2C\x2\xFFFF\x1\x3C\x10\xFFFF\x1"+
			"\x5F\x7\xFFFF\x1\xB\x1\xC\x1\xFFFF\x1\xE\x4\xFFFF\x1\x1C\x1\x1D\x8\xFFFF"+
			"\x1\x35\x1\xFFFF\x1\x3F\xB\xFFFF\x1\x5A\x2\xFFFF\x1\x5E\x1\x60\x5\xFFFF"+
			"\x1\xA\x1\xD\x1\xF\x4\xFFFF\x1\x20\x1\xFFFF\x1\x21\x1\x23\xA\xFFFF\x1"+
			"\x52\x2\xFFFF\x1\x57\x3\xFFFF\x1\x5B\x2\xFFFF\x1\x62\x1\xFFFF\x1\x4\x3"+
			"\xFFFF\x1\x1A\x3\xFFFF\x1\x29\x2\xFFFF\x1\x3B\x3\xFFFF\x1\x47\x1\x4B"+
			"\x1\x55\x1\xFFFF\x1\x58\x1\xFFFF\x1\x5C\x3\xFFFF\x1\x9\x1\xFFFF\x1\x14"+
			"\x1\x1F\x1\x22\x3\xFFFF\x1\x42\x1\x45\x5\xFFFF\x1\x1\x1\x12\x4\xFFFF"+
			"\x1\x56\x2\xFFFF\x1\x61\x2\xFFFF\x1\x2D\x1\x46\x1\xFFFF\x1\x5D\x1\x28"+
			"\x1\x2B\x2\xFFFF\x1\x59";
		private const string DFA28_specialS =
			"\x16F\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x2\x2E\x1\xFFFF\x2\x2E\x12\xFFFF\x1\x2E\x1\x15\x1\x2C\x1\xFFFF\x1\x2D"+
				"\x1\x19\x1\x2\x1\x2B\x1\x18\x1\x21\x1\x24\x1\x11\x1\x9\x1\xA\x1\xD\x1"+
				"\xC\x1\x29\x9\x2A\x1\x8\x1\x22\x1\x14\x1\x3\x1\x5\x1\x1D\x1\x4\x1A\x2D"+
				"\x1\x12\x1\xFFFF\x1\x1E\x1\x28\x1\x2D\x1\xFFFF\x1\x1\x1\x6\x1\x7\x1"+
				"\xB\x1\xE\x1\xF\x2\x2D\x1\x10\x2\x2D\x1\x17\x1\x2D\x1\x1A\x1\x2D\x1"+
				"\x1C\x1\x2D\x1\x20\x1\x23\x1\x25\x1\x2D\x1\x26\x1\x27\x3\x2D\x1\x13"+
				"\x1\x16\x1\x1F\x1\x1B\x41\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08"+
				"\x2D\x1040\xFFFF\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2"+
				"\xFFFF\x5200\x2D\x5900\xFFFF\x200\x2D",
				"\x1\x2F\x10\xFFFF\x1\x30",
				"\x1\x32\x16\xFFFF\x1\x31",
				"\x1\x34",
				"",
				"\x1\x37\x1\x36",
				"\x1\x39\x2\xFFFF\x1\x3A\x6\xFFFF\x1\x3B",
				"\x1\x3C\x6\xFFFF\x1\x3D\x3\xFFFF\x1\x3E\x2\xFFFF\x1\x3F",
				"",
				"",
				"\x1\x40\xF\xFFFF\x1\x41",
				"\x1\x43\x9\xFFFF\x1\x44",
				"\x1\x46\x4\xFFFF\x1\x47\xD\xFFFF\x1\x45",
				"\x1\x49\x3\xFFFF\x1\x4A\x1\xFFFF\xA\x4C",
				"\x1\x4D\x1\xFFFF\x1\x4E\x9\xFFFF\x1\x4F",
				"\x1\x50\x7\xFFFF\x1\x51\x2\xFFFF\x1\x52\x2\xFFFF\x1\x53",
				"\x1\x54\x6\xFFFF\x1\x55\x1\x56",
				"\x1\x57\x11\xFFFF\x1\x58",
				"",
				"",
				"\x1\x5B\x1\x5A",
				"\x1\x5D",
				"\x1\x60\x3E\xFFFF\x1\x5F",
				"\x1\x62",
				"",
				"\x1\x63",
				"\x1\x65\x3\xFFFF\x1\x66\xF\xFFFF\x1\x67",
				"",
				"\x1\x68\x10\xFFFF\x1\x69\x2\xFFFF\x1\x6A",
				"",
				"",
				"",
				"\x1\x6B",
				"",
				"",
				"\x1\x6C\xB\xFFFF\x1\x6D\x1\x6E\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x70",
				"\x1\x71",
				"\x1\x73\x9\xFFFF\x1\x74",
				"\x1\x75",
				"\x1\x76",
				"\x1\x77",
				"\x1\x4C\x1\xFFFF\x8\x7B\x2\x4C\xA\xFFFF\x3\x4C\x11\xFFFF\x1\x79\xB\xFFFF"+
				"\x3\x4C\x11\xFFFF\x1\x79",
				"\x1\x4C\x1\xFFFF\xA\x7C\xA\xFFFF\x3\x4C\x1D\xFFFF\x3\x4C",
				"",
				"",
				"",
				"",
				"\x1\x7D",
				"\x1\x7E",
				"",
				"",
				"",
				"",
				"",
				"\x1\x80\x1\x7F",
				"",
				"",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85\x1\x86",
				"\x1\x87",
				"\x1\x88",
				"\x1\x89",
				"",
				"",
				"",
				"\x1\x8A",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x14"+
				"\x2D\x1\x8B\x5\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08"+
				"\x2D\x1040\xFFFF\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2"+
				"\xFFFF\x5200\x2D\x5900\xFFFF\x200\x2D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x8D",
				"\x1\x8E",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92",
				"\x1\x93",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x95",
				"\x1\x96\x1\x97",
				"",
				"",
				"",
				"",
				"\x1\x98",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x9A",
				"",
				"",
				"\x1\x9B",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F\x5\xFFFF\x1\xA0",
				"\x1\xA1",
				"\x1\xA2",
				"\x1\xA3",
				"\x1\xA4\x10\xFFFF\x1\xA5",
				"\x1\xA6",
				"\x1\xA7",
				"\x1\xA8",
				"",
				"",
				"\x1\xA9\x8\xFFFF\x1\xAA",
				"\x1\xAB\x13\xFFFF\x1\xAC\x3\xFFFF\x1\xAD",
				"\x1\xAE\x2\xFFFF\x1\xAF",
				"\x1\xB0",
				"",
				"",
				"",
				"",
				"\x1\x4C\x1\xFFFF\x8\x7B\x2\x4C\xA\xFFFF\x3\x4C\x1D\xFFFF\x3\x4C",
				"\x1\x4C\x1\xFFFF\xA\x7C\xA\xFFFF\x3\x4C\x1D\xFFFF\x3\x4C",
				"\x1\xB2",
				"\x1\xB3",
				"\x1\xB4",
				"",
				"",
				"\x1\xB6",
				"\x1\xB7",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"\x1\xBB",
				"\x1\xBC",
				"\x1\xBD",
				"\x1\xBE",
				"\x1\xBF",
				"",
				"\x1\xC0",
				"\x1\xC1",
				"\x1\xC2",
				"\x1\xC3",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\xC7\x2\xFFFF\x1\xC8",
				"\x1\xC9",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x4"+
				"\x2D\x1\xCA\x15\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08"+
				"\x2D\x1040\xFFFF\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2"+
				"\xFFFF\x5200\x2D\x5900\xFFFF\x200\x2D",
				"",
				"",
				"\x1\xCC",
				"\x1\xCD",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xCF",
				"\x1\xD0",
				"\x1\xD1",
				"\x1\xD2",
				"\x1\xD3",
				"\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\xD7",
				"\x1\xD8",
				"\x1\xD9",
				"\x1\xDA",
				"\x1\xDB",
				"\x1\xDC",
				"\x1\xDD",
				"\x1\xDE",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xE0",
				"\x1\xE1",
				"\x1\xE2",
				"",
				"\x1\xE3",
				"\x1\xE4",
				"",
				"",
				"\x1\xE5",
				"\x1\xE6",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xE9",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xEB",
				"\x1\xEC",
				"\x1\xED",
				"\x1\xEE",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xF1",
				"\x1\xF2",
				"\x1\xF3",
				"\x1\xF4",
				"",
				"\x1\xF5",
				"\x1\xF6",
				"\x1\xF7",
				"\x1\xF8",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xFA",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\xFC",
				"\x1\xFD",
				"\x1\xFE",
				"\x1\xFF",
				"\x1\x100",
				"\x1\x101",
				"\x1\x102",
				"\x1\x103",
				"\x1\x104",
				"\x1\x105",
				"\x1\x106",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x108",
				"\x1\x109",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x10C",
				"\x1\x10D",
				"\x1\x10E",
				"\x1\x10F",
				"\x1\x110",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x114",
				"\x1\x115",
				"\x1\x116",
				"",
				"",
				"\x1\x117",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\xB"+
				"\x2D\x1\x119\xE\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08"+
				"\x2D\x1040\xFFFF\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2"+
				"\xFFFF\x5200\x2D\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x11C",
				"\x1\x11D",
				"\x1\x11E",
				"\x1\x11F",
				"",
				"\x1\x120",
				"",
				"\x1\x121",
				"\x1\x122",
				"\x1\x123",
				"\x1\x124",
				"\x1\x125",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x127",
				"\x1\x128",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x12A",
				"\x1\x12B",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x12"+
				"\x2D\x1\x12C\x7\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08"+
				"\x2D\x1040\xFFFF\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2"+
				"\xFFFF\x5200\x2D\x5900\xFFFF\x200\x2D",
				"\x1\x12E",
				"",
				"",
				"\x1\x12F",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x131",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x133",
				"",
				"",
				"",
				"\x1\x134",
				"\x1\x135",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x137",
				"",
				"\x1\x138",
				"",
				"",
				"\x1\x139",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x13B",
				"\x1\x13C",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x13E",
				"\x1\x13F",
				"\x1\x140",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x144",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x146",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x148",
				"\x1\x149",
				"",
				"\x1\x14A",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x14C",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x150",
				"",
				"\x1\x151",
				"\x1\x152",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x155",
				"",
				"",
				"",
				"\x1\x156",
				"",
				"\x1\x157",
				"",
				"\x1\x158",
				"\x1\x159",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"",
				"",
				"\x1\x15C",
				"\x1\x15D",
				"\x1\x15E",
				"",
				"",
				"\x1\x15F",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x161",
				"\x1\x162",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"",
				"\x1\x164",
				"\x1\x165",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x168",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				"",
				"",
				"\x1\x16C",
				"",
				"",
				"",
				"\x1\x16D",
				"\x1\x2D\xB\xFFFF\xA\x2D\x7\xFFFF\x1A\x2D\x4\xFFFF\x1\x2D\x1\xFFFF\x1A"+
				"\x2D\x45\xFFFF\x17\x2D\x1\xFFFF\x1F\x2D\x1\xFFFF\x1F08\x2D\x1040\xFFFF"+
				"\x150\x2D\x170\xFFFF\x80\x2D\x80\xFFFF\x92E\x2D\x10D2\xFFFF\x5200\x2D"+
				"\x5900\xFFFF\x200\x2D",
				""
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ABSTRACT | AND | AND_ASSIGN | ASSERT | ASSIGN | AT | BIT_SHIFT_RIGHT | BIT_SHIFT_RIGHT_ASSIGN | BOOLEAN | BREAK | BYTE | CASE | CATCH | CHAR | CLASS | COLON | COMMA | CONTINUE | DEC | DEFAULT | DIV | DIV_ASSIGN | DO | DOT | DOTSTAR | DOUBLE | ELLIPSIS | ELSE | ENUM | EQUAL | EXTENDS | FALSE | FINAL | FINALLY | FLOAT | FOR | GREATER_OR_EQUAL | GREATER_THAN | IF | IMPLEMENTS | IMPORT | INC | INSTANCEOF | INT | INTERFACE | LBRACK | LCURLY | LESS_OR_EQUAL | LESS_THAN | LOGICAL_AND | LOGICAL_NOT | LOGICAL_OR | LONG | LPAREN | MINUS | MINUS_ASSIGN | MOD | MOD_ASSIGN | NATIVE | NEW | NOT | NOT_EQUAL | NULL | OR | OR_ASSIGN | PACKAGE | PLUS | PLUS_ASSIGN | PRIVATE | PROTECTED | PUBLIC | QUESTION | RBRACK | RCURLY | RETURN | RPAREN | SEMI | SHIFT_LEFT | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT | SHIFT_RIGHT_ASSIGN | SHORT | STAR | STAR_ASSIGN | STATIC | STRICTFP | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRUE | TRY | VOID | VOLATILE | WHILE | XOR | XOR_ASSIGN | HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | IDENT | WS | COMMENT | LINE_COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  JavaCompiler 
