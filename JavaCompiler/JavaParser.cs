//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Java.g 2013-01-17 16:31:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  JavaCompiler 
{
/**
 * An ANTLRv3 capable Java 1.5 grammar for building ASTs.
 *
 * Note that there's also the tree grammar 'JavaTreeParser.g' that can be fed
 * with this grammer's output.
 *
 *
 * Please report any detected errors or even suggestions regarding this grammar
 * to
 *
 *          dieter [D O T] habelitz [A T] habelitz [D O T] com
 *
 *      with the subject
 *
 *          jsom grammar: [your subject note]
 *
 * To generate a parser based on this grammar you'll need ANTLRv3, which you can
 * get from 'http://www.antlr.org'.
 *
 *
 * This grammar is published under the ...
 *
 * BSD licence
 * 
 * Copyright (c) 2007-2008 by HABELITZ Software Developments
 *
 * All rights reserved.
 * 
 * http://www.habelitz.com
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSERT", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "COMMENT", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GREATER_OR_EQUAL", "GREATER_THAN", "HEX_DIGIT", "HEX_LITERAL", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WS", "XOR", "XOR_ASSIGN"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSERT=20;
	public const int ASSIGN=21;
	public const int AT=22;
	public const int BIT_SHIFT_RIGHT=23;
	public const int BIT_SHIFT_RIGHT_ASSIGN=24;
	public const int BLOCK_SCOPE=25;
	public const int BOOLEAN=26;
	public const int BREAK=27;
	public const int BYTE=28;
	public const int CASE=29;
	public const int CAST_EXPR=30;
	public const int CATCH=31;
	public const int CATCH_CLAUSE_LIST=32;
	public const int CHAR=33;
	public const int CHARACTER_LITERAL=34;
	public const int CLASS=35;
	public const int CLASS_CONSTRUCTOR_CALL=36;
	public const int CLASS_INSTANCE_INITIALIZER=37;
	public const int CLASS_STATIC_INITIALIZER=38;
	public const int CLASS_TOP_LEVEL_SCOPE=39;
	public const int COLON=40;
	public const int COMMA=41;
	public const int COMMENT=42;
	public const int CONSTRUCTOR_DECL=43;
	public const int CONTINUE=44;
	public const int DEC=45;
	public const int DECIMAL_LITERAL=46;
	public const int DEFAULT=47;
	public const int DIV=48;
	public const int DIV_ASSIGN=49;
	public const int DO=50;
	public const int DOT=51;
	public const int DOTSTAR=52;
	public const int DOUBLE=53;
	public const int ELLIPSIS=54;
	public const int ELSE=55;
	public const int ENUM=56;
	public const int ENUM_TOP_LEVEL_SCOPE=57;
	public const int EQUAL=58;
	public const int ESCAPE_SEQUENCE=59;
	public const int EXPONENT=60;
	public const int EXPR=61;
	public const int EXTENDS=62;
	public const int EXTENDS_BOUND_LIST=63;
	public const int EXTENDS_CLAUSE=64;
	public const int FALSE=65;
	public const int FINAL=66;
	public const int FINALLY=67;
	public const int FLOAT=68;
	public const int FLOATING_POINT_LITERAL=69;
	public const int FLOAT_TYPE_SUFFIX=70;
	public const int FOR=71;
	public const int FORMAL_PARAM_LIST=72;
	public const int FORMAL_PARAM_STD_DECL=73;
	public const int FORMAL_PARAM_VARARG_DECL=74;
	public const int FOR_CONDITION=75;
	public const int FOR_EACH=76;
	public const int FOR_INIT=77;
	public const int FOR_UPDATE=78;
	public const int FUNCTION_METHOD_DECL=79;
	public const int GENERIC_TYPE_ARG_LIST=80;
	public const int GENERIC_TYPE_PARAM_LIST=81;
	public const int GREATER_OR_EQUAL=82;
	public const int GREATER_THAN=83;
	public const int HEX_DIGIT=84;
	public const int HEX_LITERAL=85;
	public const int IDENT=86;
	public const int IF=87;
	public const int IMPLEMENTS=88;
	public const int IMPLEMENTS_CLAUSE=89;
	public const int IMPORT=90;
	public const int INC=91;
	public const int INSTANCEOF=92;
	public const int INT=93;
	public const int INTEGER_TYPE_SUFFIX=94;
	public const int INTERFACE=95;
	public const int INTERFACE_TOP_LEVEL_SCOPE=96;
	public const int JAVA_ID_PART=97;
	public const int JAVA_ID_START=98;
	public const int JAVA_SOURCE=99;
	public const int LABELED_STATEMENT=100;
	public const int LBRACK=101;
	public const int LCURLY=102;
	public const int LESS_OR_EQUAL=103;
	public const int LESS_THAN=104;
	public const int LINE_COMMENT=105;
	public const int LOCAL_MODIFIER_LIST=106;
	public const int LOGICAL_AND=107;
	public const int LOGICAL_NOT=108;
	public const int LOGICAL_OR=109;
	public const int LONG=110;
	public const int LPAREN=111;
	public const int METHOD_CALL=112;
	public const int MINUS=113;
	public const int MINUS_ASSIGN=114;
	public const int MOD=115;
	public const int MODIFIER_LIST=116;
	public const int MOD_ASSIGN=117;
	public const int NATIVE=118;
	public const int NEW=119;
	public const int NOT=120;
	public const int NOT_EQUAL=121;
	public const int NULL=122;
	public const int OCTAL_ESCAPE=123;
	public const int OCTAL_LITERAL=124;
	public const int OR=125;
	public const int OR_ASSIGN=126;
	public const int PACKAGE=127;
	public const int PARENTESIZED_EXPR=128;
	public const int PLUS=129;
	public const int PLUS_ASSIGN=130;
	public const int POST_DEC=131;
	public const int POST_INC=132;
	public const int PRE_DEC=133;
	public const int PRE_INC=134;
	public const int PRIVATE=135;
	public const int PROTECTED=136;
	public const int PUBLIC=137;
	public const int QUALIFIED_TYPE_IDENT=138;
	public const int QUESTION=139;
	public const int RBRACK=140;
	public const int RCURLY=141;
	public const int RETURN=142;
	public const int RPAREN=143;
	public const int SEMI=144;
	public const int SHIFT_LEFT=145;
	public const int SHIFT_LEFT_ASSIGN=146;
	public const int SHIFT_RIGHT=147;
	public const int SHIFT_RIGHT_ASSIGN=148;
	public const int SHORT=149;
	public const int STAR=150;
	public const int STAR_ASSIGN=151;
	public const int STATIC=152;
	public const int STATIC_ARRAY_CREATOR=153;
	public const int STRICTFP=154;
	public const int STRING_LITERAL=155;
	public const int SUPER=156;
	public const int SUPER_CONSTRUCTOR_CALL=157;
	public const int SWITCH=158;
	public const int SWITCH_BLOCK_LABEL_LIST=159;
	public const int SYNCHRONIZED=160;
	public const int THIS=161;
	public const int THIS_CONSTRUCTOR_CALL=162;
	public const int THROW=163;
	public const int THROWS=164;
	public const int THROWS_CLAUSE=165;
	public const int TRANSIENT=166;
	public const int TRUE=167;
	public const int TRY=168;
	public const int TYPE=169;
	public const int UNARY_MINUS=170;
	public const int UNARY_PLUS=171;
	public const int UNICODE_ESCAPE=172;
	public const int VAR_DECLARATION=173;
	public const int VAR_DECLARATOR=174;
	public const int VAR_DECLARATOR_LIST=175;
	public const int VOID=176;
	public const int VOID_METHOD_DECL=177;
	public const int VOLATILE=178;
	public const int WHILE=179;
	public const int WS=180;
	public const int XOR=181;
	public const int XOR_ASSIGN=182;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[355+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Java.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// Java.g:247:8: public javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
	[GrammarRule("javaSource")]
	public AstParserRuleReturnScope<CommonTree, IToken> javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int javaSource_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> compilationUnit1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(247, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Java.g:248:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
			DebugEnterAlt(1);
			// Java.g:248:9: compilationUnit
			{
			DebugLocation(248, 9);
			PushFollow(Follow._compilationUnit_in_javaSource4512);
			compilationUnit1=compilationUnit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_compilationUnit.Add(compilationUnit1.Tree);


			{
			// AST REWRITE
			// elements: compilationUnit
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 249:9: -> ^( JAVA_SOURCE compilationUnit )
			{
				DebugLocation(249, 13);
				// Java.g:249:13: ^( JAVA_SOURCE compilationUnit )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(249, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

				DebugLocation(249, 27);
				adaptor.AddChild(root_1, stream_compilationUnit.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(250, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return retval;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// Java.g:252:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
	[GrammarRule("compilationUnit")]
	private AstParserRuleReturnScope<CommonTree, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 2);
		TraceIn("compilationUnit", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationList2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> importDeclaration4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDecls5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(252, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Java.g:253:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
			DebugEnterAlt(1);
			// Java.g:253:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(253, 9);
			PushFollow(Follow._annotationList_in_compilationUnit4548);
			annotationList2=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList2.Tree);
			DebugLocation(254, 9);
			// Java.g:254:9: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:254:9: packageDeclaration
				{
				DebugLocation(254, 9);
				PushFollow(Follow._packageDeclaration_in_compilationUnit4559);
				packageDeclaration3=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(255, 9);
			// Java.g:255:9: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:255:9: importDeclaration
					{
					DebugLocation(255, 9);
					PushFollow(Follow._importDeclaration_in_compilationUnit4571);
					importDeclaration4=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration4.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(256, 9);
			// Java.g:256:9: ( typeDecls )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==ABSTRACT||LA3_1==AT||LA3_1==BOOLEAN||LA3_1==BYTE||LA3_1==CHAR||LA3_1==CLASS||LA3_1==DOUBLE||LA3_1==ENUM||LA3_1==FINAL||LA3_1==FLOAT||LA3_1==IDENT||LA3_1==INT||LA3_1==INTERFACE||LA3_1==LESS_THAN||LA3_1==LONG||LA3_1==NATIVE||(LA3_1>=PRIVATE && LA3_1<=PUBLIC)||LA3_1==SEMI||LA3_1==SHORT||LA3_1==STATIC||LA3_1==STRICTFP||LA3_1==SYNCHRONIZED||LA3_1==TRANSIENT||LA3_1==VOID||LA3_1==VOLATILE))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:256:9: typeDecls
					{
					DebugLocation(256, 9);
					PushFollow(Follow._typeDecls_in_compilationUnit4583);
					typeDecls5=typeDecls();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDecls5.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 2);
			LeaveRule("compilationUnit", 2);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 2, compilationUnit_StartIndex); }

		}
		DebugLocation(257, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_typeDecls();
	partial void LeaveRule_typeDecls();
	// $ANTLR start "typeDecls"
	// Java.g:259:1: typeDecls : ( typeDeclaration | SEMI !);
	[GrammarRule("typeDecls")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDecls()
	{
		EnterRule_typeDecls();
		EnterRule("typeDecls", 3);
		TraceIn("typeDecls", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDecls_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI7 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration6 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeDecls");
		DebugLocation(259, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Java.g:260:5: ( typeDeclaration | SEMI !)
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==ABSTRACT||LA4_1==AT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==IDENT||LA4_1==INT||LA4_1==INTERFACE||LA4_1==LESS_THAN||LA4_1==LONG||LA4_1==NATIVE||(LA4_1>=PRIVATE && LA4_1<=PUBLIC)||LA4_1==SHORT||LA4_1==STATIC||LA4_1==STRICTFP||LA4_1==SYNCHRONIZED||LA4_1==TRANSIENT||LA4_1==VOID||LA4_1==VOLATILE))
			{
				alt4 = 1;
			}
			else if ((LA4_1==SEMI))
			{
				alt4 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:260:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(260, 9);
				PushFollow(Follow._typeDeclaration_in_typeDecls4603);
				typeDeclaration6=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:261:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(261, 13);
				SEMI7=(IToken)Match(input,SEMI,Follow._SEMI_in_typeDecls4613); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDecls", 3);
			LeaveRule("typeDecls", 3);
			LeaveRule_typeDecls();
			if (state.backtracking > 0) { Memoize(input, 3, typeDecls_StartIndex); }

		}
		DebugLocation(262, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDecls"); }
		return retval;

	}
	// $ANTLR end "typeDecls"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// Java.g:264:1: packageDeclaration : PACKAGE ^ qualifiedIdentifier SEMI !;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 4);
		TraceIn("packageDeclaration", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PACKAGE8 = default(IToken);
		IToken SEMI10 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier9 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PACKAGE8_tree = default(CommonTree);
		CommonTree SEMI10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(264, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Java.g:265:5: ( PACKAGE ^ qualifiedIdentifier SEMI !)
			DebugEnterAlt(1);
			// Java.g:265:9: PACKAGE ^ qualifiedIdentifier SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(265, 16);
			PACKAGE8=(IToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration4633); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PACKAGE8_tree = (CommonTree)adaptor.Create(PACKAGE8);
			root_0 = (CommonTree)adaptor.BecomeRoot(PACKAGE8_tree, root_0);
			}
			DebugLocation(265, 18);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration4636);
			qualifiedIdentifier9=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier9.Tree);
			DebugLocation(265, 42);
			SEMI10=(IToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration4638); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 4);
			LeaveRule("packageDeclaration", 4);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, packageDeclaration_StartIndex); }

		}
		DebugLocation(266, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// Java.g:268:1: importDeclaration : IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !;
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 5);
		TraceIn("importDeclaration", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPORT11 = default(IToken);
		IToken STATIC12 = default(IToken);
		IToken DOTSTAR14 = default(IToken);
		IToken SEMI15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPORT11_tree = default(CommonTree);
		CommonTree STATIC12_tree = default(CommonTree);
		CommonTree DOTSTAR14_tree = default(CommonTree);
		CommonTree SEMI15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(268, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Java.g:269:5: ( IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !)
			DebugEnterAlt(1);
			// Java.g:269:9: IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(269, 15);
			IMPORT11=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration4664); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT11_tree = (CommonTree)adaptor.Create(IMPORT11);
			root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT11_tree, root_0);
			}
			DebugLocation(269, 17);
			// Java.g:269:17: ( STATIC )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==STATIC))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:269:17: STATIC
				{
				DebugLocation(269, 17);
				STATIC12=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration4667); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC12_tree = (CommonTree)adaptor.Create(STATIC12);
				adaptor.AddChild(root_0, STATIC12_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(269, 25);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration4670);
			qualifiedIdentifier13=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier13.Tree);
			DebugLocation(269, 45);
			// Java.g:269:45: ( DOTSTAR )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==DOTSTAR))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:269:45: DOTSTAR
				{
				DebugLocation(269, 45);
				DOTSTAR14=(IToken)Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration4672); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTSTAR14_tree = (CommonTree)adaptor.Create(DOTSTAR14);
				adaptor.AddChild(root_0, DOTSTAR14_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(269, 58);
			SEMI15=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration4675); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 5);
			LeaveRule("importDeclaration", 5);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, importDeclaration_StartIndex); }

		}
		DebugLocation(270, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// Java.g:272:1: typeDeclaration : modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 6);
		TraceIn("typeDeclaration", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifierList16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration20 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(272, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Java.g:273:5: ( modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
			DebugEnterAlt(1);
			// Java.g:273:9: modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(273, 21);
			PushFollow(Follow._modifierList_in_typeDeclaration4699);
			modifierList16=modifierList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(274, 9);
			// Java.g:274:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			int alt7=4;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt7 = 1;
				}
				break;
			case INTERFACE:
				{
				alt7 = 2;
				}
				break;
			case ENUM:
				{
				alt7 = 3;
				}
				break;
			case AT:
				{
				alt7 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:274:13: classTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(274, 13);
				PushFollow(Follow._classTypeDeclaration_in_typeDeclaration4714);
				classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classTypeDeclaration17.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:275:13: interfaceTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(275, 13);
				PushFollow(Follow._interfaceTypeDeclaration_in_typeDeclaration4729);
				interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceTypeDeclaration18.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:276:13: enumTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(276, 13);
				PushFollow(Follow._enumTypeDeclaration_in_typeDeclaration4744);
				enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumTypeDeclaration19.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:277:13: annotationTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(277, 13);
				PushFollow(Follow._annotationTypeDeclaration_in_typeDeclaration4759);
				annotationTypeDeclaration20=annotationTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 6);
			LeaveRule("typeDeclaration", 6);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, typeDeclaration_StartIndex); }

		}
		DebugLocation(279, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classTypeDeclaration();
	partial void LeaveRule_classTypeDeclaration();
	// $ANTLR start "classTypeDeclaration"
	// Java.g:281:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
	[GrammarRule("classTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_classTypeDeclaration();
		EnterRule("classTypeDeclaration", 7);
		TraceIn("classTypeDeclaration", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CLASS21 = default(IToken);
		IToken IDENT22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList23 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CLASS21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "classTypeDeclaration");
		DebugLocation(281, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Java.g:282:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
			DebugEnterAlt(1);
			// Java.g:282:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
			{
			DebugLocation(282, 9);
			CLASS21=(IToken)Match(input,CLASS,Follow._CLASS_in_classTypeDeclaration4794); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLASS.Add(CLASS21);

			DebugLocation(282, 15);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_classTypeDeclaration4796); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT22);

			DebugLocation(282, 21);
			// Java.g:282:21: ( genericTypeParameterList )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==LESS_THAN))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:282:21: genericTypeParameterList
				{
				DebugLocation(282, 21);
				PushFollow(Follow._genericTypeParameterList_in_classTypeDeclaration4798);
				genericTypeParameterList23=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(282, 47);
			// Java.g:282:47: ( classExtendsClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==EXTENDS))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:282:47: classExtendsClause
				{
				DebugLocation(282, 47);
				PushFollow(Follow._classExtendsClause_in_classTypeDeclaration4801);
				classExtendsClause24=classExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classExtendsClause.Add(classExtendsClause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(282, 67);
			// Java.g:282:67: ( implementsClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==IMPLEMENTS))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:282:67: implementsClause
				{
				DebugLocation(282, 67);
				PushFollow(Follow._implementsClause_in_classTypeDeclaration4804);
				implementsClause25=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(282, 85);
			PushFollow(Follow._classBody_in_classTypeDeclaration4807);
			classBody26=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classBody.Add(classBody26.Tree);


			{
			// AST REWRITE
			// elements: CLASS, IDENT, genericTypeParameterList, classExtendsClause, implementsClause, classBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 283:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
			{
				DebugLocation(283, 13);
				// Java.g:283:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(283, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_CLASS.NextNode(), root_1);

				DebugLocation(283, 21);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(283, 34);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(283, 40);
				// Java.g:283:40: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(283, 40);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(283, 66);
				// Java.g:283:66: ( classExtendsClause )?
				if (stream_classExtendsClause.HasNext)
				{
					DebugLocation(283, 66);
					adaptor.AddChild(root_1, stream_classExtendsClause.NextTree());

				}
				stream_classExtendsClause.Reset();
				DebugLocation(283, 86);
				// Java.g:283:86: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(283, 86);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(283, 104);
				adaptor.AddChild(root_1, stream_classBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classTypeDeclaration", 7);
			LeaveRule("classTypeDeclaration", 7);
			LeaveRule_classTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 7, classTypeDeclaration_StartIndex); }

		}
		DebugLocation(284, 4);
		} finally { DebugExitRule(GrammarFileName, "classTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "classTypeDeclaration"

	partial void EnterRule_classExtendsClause();
	partial void LeaveRule_classExtendsClause();
	// $ANTLR start "classExtendsClause"
	// Java.g:286:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
	[GrammarRule("classExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause()
	{
		EnterRule_classExtendsClause();
		EnterRule("classExtendsClause", 8);
		TraceIn("classExtendsClause", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS27 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS27_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "classExtendsClause");
		DebugLocation(286, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Java.g:287:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
			DebugEnterAlt(1);
			// Java.g:287:9: EXTENDS type
			{
			DebugLocation(287, 9);
			EXTENDS27=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_classExtendsClause4860); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS27);

			DebugLocation(287, 17);
			PushFollow(Follow._type_in_classExtendsClause4862);
			type28=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type28.Tree);


			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 288:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
			{
				DebugLocation(288, 13);
				// Java.g:288:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(288, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(288, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classExtendsClause", 8);
			LeaveRule("classExtendsClause", 8);
			LeaveRule_classExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 8, classExtendsClause_StartIndex); }

		}
		DebugLocation(289, 4);
		} finally { DebugExitRule(GrammarFileName, "classExtendsClause"); }
		return retval;

	}
	// $ANTLR end "classExtendsClause"

	partial void EnterRule_interfaceExtendsClause();
	partial void LeaveRule_interfaceExtendsClause();
	// $ANTLR start "interfaceExtendsClause"
	// Java.g:291:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
	[GrammarRule("interfaceExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause()
	{
		EnterRule_interfaceExtendsClause();
		EnterRule("interfaceExtendsClause", 9);
		TraceIn("interfaceExtendsClause", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "interfaceExtendsClause");
		DebugLocation(291, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Java.g:292:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// Java.g:292:9: EXTENDS typeList
			{
			DebugLocation(292, 9);
			EXTENDS29=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_interfaceExtendsClause4906); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS29);

			DebugLocation(292, 17);
			PushFollow(Follow._typeList_in_interfaceExtendsClause4908);
			typeList30=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList30.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
			{
				DebugLocation(293, 13);
				// Java.g:293:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(293, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(293, 58);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtendsClause", 9);
			LeaveRule("interfaceExtendsClause", 9);
			LeaveRule_interfaceExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceExtendsClause_StartIndex); }

		}
		DebugLocation(294, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtendsClause"); }
		return retval;

	}
	// $ANTLR end "interfaceExtendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// Java.g:296:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
	[GrammarRule("implementsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 10);
		TraceIn("implementsClause", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int implementsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPLEMENTS31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPLEMENTS31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IMPLEMENTS=new RewriteRuleITokenStream(adaptor,"token IMPLEMENTS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(296, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Java.g:297:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// Java.g:297:9: IMPLEMENTS typeList
			{
			DebugLocation(297, 9);
			IMPLEMENTS31=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_implementsClause4952); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPLEMENTS.Add(IMPLEMENTS31);

			DebugLocation(297, 20);
			PushFollow(Follow._typeList_in_implementsClause4954);
			typeList32=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList32.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 298:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
			{
				DebugLocation(298, 13);
				// Java.g:298:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(298, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE"), root_1);

				DebugLocation(298, 67);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implementsClause", 10);
			LeaveRule("implementsClause", 10);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 10, implementsClause_StartIndex); }

		}
		DebugLocation(299, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return retval;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// Java.g:301:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 11);
		TraceIn("genericTypeParameterList", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN33 = default(IToken);
		IToken COMMA35 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN33_tree = default(CommonTree);
		CommonTree COMMA35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(301, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Java.g:302:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// Java.g:302:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
			{
			DebugLocation(302, 9);
			LESS_THAN33=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeParameterList4999); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN33);

			DebugLocation(302, 19);
			PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5001);
			genericTypeParameter34=genericTypeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter34.Tree);
			DebugLocation(302, 40);
			// Java.g:302:40: ( COMMA genericTypeParameter )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMA))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:302:41: COMMA genericTypeParameter
					{
					DebugLocation(302, 41);
					COMMA35=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeParameterList5004); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA35);

					DebugLocation(302, 47);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5006);
					genericTypeParameter36=genericTypeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter36.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(302, 70);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeParameterList5010);
			genericTypeListClosing37=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing37.Tree);


			{
			// AST REWRITE
			// elements: genericTypeParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 303:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
			{
				DebugLocation(303, 13);
				// Java.g:303:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(303, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST"), root_1);

				DebugLocation(303, 78);
				if (!(stream_genericTypeParameter.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeParameter.HasNext )
				{
					DebugLocation(303, 78);
					adaptor.AddChild(root_1, stream_genericTypeParameter.NextTree());

				}
				stream_genericTypeParameter.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameterList", 11);
			LeaveRule("genericTypeParameterList", 11);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 11, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(304, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameterList"

	partial void EnterRule_genericTypeListClosing();
	partial void LeaveRule_genericTypeListClosing();
	// $ANTLR start "genericTypeListClosing"
	// Java.g:306:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT |);
	[GrammarRule("genericTypeListClosing")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing()
	{
		EnterRule_genericTypeListClosing();
		EnterRule("genericTypeListClosing", 12);
		TraceIn("genericTypeListClosing", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeListClosing_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken GREATER_THAN38 = default(IToken);
		IToken SHIFT_RIGHT39 = default(IToken);
		IToken BIT_SHIFT_RIGHT40 = default(IToken);

		CommonTree GREATER_THAN38_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT39_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeListClosing");
		DebugLocation(306, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Java.g:310:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT |)
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case GREATER_THAN:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SHIFT_RIGHT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_Java_fragment)))
				{
					alt12 = 2;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_Java_fragment)))
				{
					alt12 = 3;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case EOF:
			case AND:
			case AND_ASSIGN:
			case ASSIGN:
			case BIT_SHIFT_RIGHT_ASSIGN:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case COLON:
			case COMMA:
			case DIV_ASSIGN:
			case DOT:
			case DOUBLE:
			case ELLIPSIS:
			case EQUAL:
			case EXTENDS:
			case FLOAT:
			case IDENT:
			case IMPLEMENTS:
			case INT:
			case LBRACK:
			case LCURLY:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case LONG:
			case LPAREN:
			case MINUS_ASSIGN:
			case MOD_ASSIGN:
			case NOT_EQUAL:
			case OR:
			case OR_ASSIGN:
			case PLUS_ASSIGN:
			case QUESTION:
			case RBRACK:
			case RCURLY:
			case RPAREN:
			case SEMI:
			case SHIFT_LEFT_ASSIGN:
			case SHIFT_RIGHT_ASSIGN:
			case SHORT:
			case STAR_ASSIGN:
			case SUPER:
			case THIS:
			case VOID:
			case XOR:
			case XOR_ASSIGN:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:310:9: GREATER_THAN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(310, 9);
				GREATER_THAN38=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_genericTypeListClosing5125); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GREATER_THAN38_tree = (CommonTree)adaptor.Create(GREATER_THAN38);
				adaptor.AddChild(root_0, GREATER_THAN38_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:311:9: SHIFT_RIGHT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(311, 9);
				SHIFT_RIGHT39=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_genericTypeListClosing5135); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHIFT_RIGHT39_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT39);
				adaptor.AddChild(root_0, SHIFT_RIGHT39_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:312:9: BIT_SHIFT_RIGHT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(312, 9);
				BIT_SHIFT_RIGHT40=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_genericTypeListClosing5145); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BIT_SHIFT_RIGHT40_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT40);
				adaptor.AddChild(root_0, BIT_SHIFT_RIGHT40_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:314:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeListClosing", 12);
			LeaveRule("genericTypeListClosing", 12);
			LeaveRule_genericTypeListClosing();
			if (state.backtracking > 0) { Memoize(input, 12, genericTypeListClosing_StartIndex); }

		}
		DebugLocation(314, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeListClosing"); }
		return retval;

	}
	// $ANTLR end "genericTypeListClosing"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// Java.g:316:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 13);
		TraceIn("genericTypeParameter", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> bound42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(316, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Java.g:317:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// Java.g:317:9: IDENT ( bound )?
			{
			DebugLocation(317, 9);
			IDENT41=(IToken)Match(input,IDENT,Follow._IDENT_in_genericTypeParameter5173); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT41);

			DebugLocation(317, 15);
			// Java.g:317:15: ( bound )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==EXTENDS))
			{
				int LA13_2 = input.LA(2);

				if ((LA13_2==BOOLEAN||LA13_2==BYTE||LA13_2==CHAR||LA13_2==DOUBLE||LA13_2==FLOAT||LA13_2==INT||LA13_2==LONG||LA13_2==SHORT))
				{
					int LA13_3 = input.LA(3);

					if ((EvaluatePredicate(synpred17_Java_fragment)))
					{
						alt13 = 1;
					}
				}
				else if ((LA13_2==IDENT))
				{
					int LA13_3 = input.LA(3);

					if ((EvaluatePredicate(synpred17_Java_fragment)))
					{
						alt13 = 1;
					}
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:317:15: bound
				{
				DebugLocation(317, 15);
				PushFollow(Follow._bound_in_genericTypeParameter5175);
				bound42=bound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bound.Add(bound42.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: IDENT, bound
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:9: -> ^( IDENT ( bound )? )
			{
				DebugLocation(318, 13);
				// Java.g:318:13: ^( IDENT ( bound )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(318, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IDENT.NextNode(), root_1);

				DebugLocation(318, 21);
				// Java.g:318:21: ( bound )?
				if (stream_bound.HasNext)
				{
					DebugLocation(318, 21);
					adaptor.AddChild(root_1, stream_bound.NextTree());

				}
				stream_bound.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameter", 13);
			LeaveRule("genericTypeParameter", 13);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 13, genericTypeParameter_StartIndex); }

		}
		DebugLocation(319, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// Java.g:321:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
	[GrammarRule("bound")]
	private AstParserRuleReturnScope<CommonTree, IToken> bound()
	{
		EnterRule_bound();
		EnterRule("bound", 14);
		TraceIn("bound", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bound_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS43 = default(IToken);
		IToken AND45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS43_tree = default(CommonTree);
		CommonTree AND45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(321, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Java.g:322:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
			DebugEnterAlt(1);
			// Java.g:322:9: EXTENDS type ( AND type )*
			{
			DebugLocation(322, 9);
			EXTENDS43=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_bound5221); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS43);

			DebugLocation(322, 17);
			PushFollow(Follow._type_in_bound5223);
			type44=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type44.Tree);
			DebugLocation(322, 22);
			// Java.g:322:22: ( AND type )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==AND))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:322:23: AND type
					{
					DebugLocation(322, 23);
					AND45=(IToken)Match(input,AND,Follow._AND_in_bound5226); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AND.Add(AND45);

					DebugLocation(322, 27);
					PushFollow(Follow._type_in_bound5228);
					type46=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type46.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
			{
				DebugLocation(323, 13);
				// Java.g:323:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST"), root_1);

				DebugLocation(323, 66);
				if (!(stream_type.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_type.HasNext )
				{
					DebugLocation(323, 66);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bound", 14);
			LeaveRule("bound", 14);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 14, bound_StartIndex); }

		}
		DebugLocation(324, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return retval;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTypeDeclaration();
	partial void LeaveRule_enumTypeDeclaration();
	// $ANTLR start "enumTypeDeclaration"
	// Java.g:326:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
	[GrammarRule("enumTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_enumTypeDeclaration();
		EnterRule("enumTypeDeclaration", 15);
		TraceIn("enumTypeDeclaration", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ENUM47 = default(IToken);
		IToken IDENT48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumBody50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ENUM47_tree = default(CommonTree);
		CommonTree IDENT48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ENUM=new RewriteRuleITokenStream(adaptor,"token ENUM");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
		try { DebugEnterRule(GrammarFileName, "enumTypeDeclaration");
		DebugLocation(326, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Java.g:327:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
			DebugEnterAlt(1);
			// Java.g:327:9: ENUM IDENT ( implementsClause )? enumBody
			{
			DebugLocation(327, 9);
			ENUM47=(IToken)Match(input,ENUM,Follow._ENUM_in_enumTypeDeclaration5269); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ENUM.Add(ENUM47);

			DebugLocation(327, 14);
			IDENT48=(IToken)Match(input,IDENT,Follow._IDENT_in_enumTypeDeclaration5271); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT48);

			DebugLocation(327, 20);
			// Java.g:327:20: ( implementsClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==IMPLEMENTS))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:327:20: implementsClause
				{
				DebugLocation(327, 20);
				PushFollow(Follow._implementsClause_in_enumTypeDeclaration5273);
				implementsClause49=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(327, 38);
			PushFollow(Follow._enumBody_in_enumTypeDeclaration5276);
			enumBody50=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumBody.Add(enumBody50.Tree);


			{
			// AST REWRITE
			// elements: ENUM, IDENT, implementsClause, enumBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 328:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
			{
				DebugLocation(328, 13);
				// Java.g:328:13: ^( ENUM IDENT ( implementsClause )? enumBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(328, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_ENUM.NextNode(), root_1);

				DebugLocation(328, 20);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(328, 33);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(328, 39);
				// Java.g:328:39: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(328, 39);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(328, 57);
				adaptor.AddChild(root_1, stream_enumBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumTypeDeclaration", 15);
			LeaveRule("enumTypeDeclaration", 15);
			LeaveRule_enumTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 15, enumTypeDeclaration_StartIndex); }

		}
		DebugLocation(329, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumTypeDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// Java.g:331:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 16);
		TraceIn("enumBody", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY51 = default(IToken);
		IToken RCURLY53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY51_tree = default(CommonTree);
		CommonTree RCURLY53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(331, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Java.g:332:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
			DebugEnterAlt(1);
			// Java.g:332:9: LCURLY enumScopeDeclarations RCURLY
			{
			DebugLocation(332, 9);
			LCURLY51=(IToken)Match(input,LCURLY,Follow._LCURLY_in_enumBody5323); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY51);

			DebugLocation(332, 16);
			PushFollow(Follow._enumScopeDeclarations_in_enumBody5325);
			enumScopeDeclarations52=enumScopeDeclarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumScopeDeclarations.Add(enumScopeDeclarations52.Tree);
			DebugLocation(332, 38);
			RCURLY53=(IToken)Match(input,RCURLY,Follow._RCURLY_in_enumBody5327); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY53);



			{
			// AST REWRITE
			// elements: enumScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
			{
				DebugLocation(333, 13);
				// Java.g:333:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(333, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(333, 69);
				adaptor.AddChild(root_1, stream_enumScopeDeclarations.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 16);
			LeaveRule("enumBody", 16);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 16, enumBody_StartIndex); }

		}
		DebugLocation(334, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumScopeDeclarations();
	partial void LeaveRule_enumScopeDeclarations();
	// $ANTLR start "enumScopeDeclarations"
	// Java.g:336:1: enumScopeDeclarations : enumConstants ( COMMA !)? ( enumClassScopeDeclarations )? ;
	[GrammarRule("enumScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations()
	{
		EnterRule_enumScopeDeclarations();
		EnterRule("enumScopeDeclarations", 17);
		TraceIn("enumScopeDeclarations", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstants54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA55_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumScopeDeclarations");
		DebugLocation(336, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Java.g:337:5: ( enumConstants ( COMMA !)? ( enumClassScopeDeclarations )? )
			DebugEnterAlt(1);
			// Java.g:337:9: enumConstants ( COMMA !)? ( enumClassScopeDeclarations )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(337, 9);
			PushFollow(Follow._enumConstants_in_enumScopeDeclarations5364);
			enumConstants54=enumConstants();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants54.Tree);
			DebugLocation(337, 23);
			// Java.g:337:23: ( COMMA !)?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==COMMA))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:337:24: COMMA !
				{
				DebugLocation(337, 29);
				COMMA55=(IToken)Match(input,COMMA,Follow._COMMA_in_enumScopeDeclarations5367); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(337, 33);
			// Java.g:337:33: ( enumClassScopeDeclarations )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==SEMI))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:337:33: enumClassScopeDeclarations
				{
				DebugLocation(337, 33);
				PushFollow(Follow._enumClassScopeDeclarations_in_enumScopeDeclarations5372);
				enumClassScopeDeclarations56=enumClassScopeDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumClassScopeDeclarations56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumScopeDeclarations", 17);
			LeaveRule("enumScopeDeclarations", 17);
			LeaveRule_enumScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 17, enumScopeDeclarations_StartIndex); }

		}
		DebugLocation(338, 4);
		} finally { DebugExitRule(GrammarFileName, "enumScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumScopeDeclarations"

	partial void EnterRule_enumClassScopeDeclarations();
	partial void LeaveRule_enumClassScopeDeclarations();
	// $ANTLR start "enumClassScopeDeclarations"
	// Java.g:340:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("enumClassScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations()
	{
		EnterRule_enumClassScopeDeclarations();
		EnterRule("enumClassScopeDeclarations", 18);
		TraceIn("enumClassScopeDeclarations", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumClassScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI57_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumClassScopeDeclarations");
		DebugLocation(340, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Java.g:341:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:341:9: SEMI ( classScopeDeclarations )*
			{
			DebugLocation(341, 9);
			SEMI57=(IToken)Match(input,SEMI,Follow._SEMI_in_enumClassScopeDeclarations5392); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI57);

			DebugLocation(341, 14);
			// Java.g:341:14: ( classScopeDeclarations )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==ABSTRACT||LA18_1==AT||LA18_1==BOOLEAN||LA18_1==BYTE||LA18_1==CHAR||LA18_1==CLASS||LA18_1==DOUBLE||LA18_1==ENUM||LA18_1==FINAL||LA18_1==FLOAT||LA18_1==IDENT||LA18_1==INT||LA18_1==INTERFACE||LA18_1==LCURLY||LA18_1==LESS_THAN||LA18_1==LONG||LA18_1==NATIVE||(LA18_1>=PRIVATE && LA18_1<=PUBLIC)||LA18_1==SEMI||LA18_1==SHORT||LA18_1==STATIC||LA18_1==STRICTFP||LA18_1==SYNCHRONIZED||LA18_1==TRANSIENT||LA18_1==VOID||LA18_1==VOLATILE))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:341:14: classScopeDeclarations
					{
					DebugLocation(341, 14);
					PushFollow(Follow._classScopeDeclarations_in_enumClassScopeDeclarations5394);
					classScopeDeclarations58=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations58.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 342:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(342, 13);
				// Java.g:342:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(342, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(342, 69);
				// Java.g:342:69: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(342, 69);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumClassScopeDeclarations", 18);
			LeaveRule("enumClassScopeDeclarations", 18);
			LeaveRule_enumClassScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumClassScopeDeclarations_StartIndex); }

		}
		DebugLocation(343, 4);
		} finally { DebugExitRule(GrammarFileName, "enumClassScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumClassScopeDeclarations"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// Java.g:345:1: enumConstants : enumConstant ( COMMA ! enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 19);
		TraceIn("enumConstants", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(345, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Java.g:346:5: ( enumConstant ( COMMA ! enumConstant )* )
			DebugEnterAlt(1);
			// Java.g:346:9: enumConstant ( COMMA ! enumConstant )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(346, 9);
			PushFollow(Follow._enumConstant_in_enumConstants5433);
			enumConstant59=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant59.Tree);
			DebugLocation(346, 22);
			// Java.g:346:22: ( COMMA ! enumConstant )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					int LA19_2 = input.LA(2);

					if ((LA19_2==AT||LA19_2==IDENT))
					{
						alt19 = 1;
					}


				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:346:23: COMMA ! enumConstant
					{
					DebugLocation(346, 28);
					COMMA60=(IToken)Match(input,COMMA,Follow._COMMA_in_enumConstants5436); if (state.failed) return retval;
					DebugLocation(346, 30);
					PushFollow(Follow._enumConstant_in_enumConstants5439);
					enumConstant61=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant61.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 19);
			LeaveRule("enumConstants", 19);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 19, enumConstants_StartIndex); }

		}
		DebugLocation(347, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// Java.g:349:1: enumConstant : annotationList IDENT ^ ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 20);
		TraceIn("enumConstant", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationList62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(349, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Java.g:350:5: ( annotationList IDENT ^ ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:350:9: annotationList IDENT ^ ( arguments )? ( classBody )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(350, 9);
			PushFollow(Follow._annotationList_in_enumConstant5464);
			annotationList62=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList62.Tree);
			DebugLocation(350, 29);
			IDENT63=(IToken)Match(input,IDENT,Follow._IDENT_in_enumConstant5466); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT63_tree, root_0);
			}
			DebugLocation(350, 31);
			// Java.g:350:31: ( arguments )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==LPAREN))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:350:31: arguments
				{
				DebugLocation(350, 31);
				PushFollow(Follow._arguments_in_enumConstant5469);
				arguments64=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(350, 42);
			// Java.g:350:42: ( classBody )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==LCURLY))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:350:42: classBody
				{
				DebugLocation(350, 42);
				PushFollow(Follow._classBody_in_enumConstant5472);
				classBody65=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 20);
			LeaveRule("enumConstant", 20);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 20, enumConstant_StartIndex); }

		}
		DebugLocation(351, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_interfaceTypeDeclaration();
	partial void LeaveRule_interfaceTypeDeclaration();
	// $ANTLR start "interfaceTypeDeclaration"
	// Java.g:353:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
	[GrammarRule("interfaceTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_interfaceTypeDeclaration();
		EnterRule("interfaceTypeDeclaration", 21);
		TraceIn("interfaceTypeDeclaration", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INTERFACE66 = default(IToken);
		IToken IDENT67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceBody70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INTERFACE66_tree = default(CommonTree);
		CommonTree IDENT67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
		RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
		try { DebugEnterRule(GrammarFileName, "interfaceTypeDeclaration");
		DebugLocation(353, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Java.g:354:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
			DebugEnterAlt(1);
			// Java.g:354:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
			{
			DebugLocation(354, 9);
			INTERFACE66=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceTypeDeclaration5497); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE66);

			DebugLocation(354, 19);
			IDENT67=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceTypeDeclaration5499); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT67);

			DebugLocation(354, 25);
			// Java.g:354:25: ( genericTypeParameterList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==LESS_THAN))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:354:25: genericTypeParameterList
				{
				DebugLocation(354, 25);
				PushFollow(Follow._genericTypeParameterList_in_interfaceTypeDeclaration5501);
				genericTypeParameterList68=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(354, 51);
			// Java.g:354:51: ( interfaceExtendsClause )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==EXTENDS))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:354:51: interfaceExtendsClause
				{
				DebugLocation(354, 51);
				PushFollow(Follow._interfaceExtendsClause_in_interfaceTypeDeclaration5504);
				interfaceExtendsClause69=interfaceExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_interfaceExtendsClause.Add(interfaceExtendsClause69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(354, 75);
			PushFollow(Follow._interfaceBody_in_interfaceTypeDeclaration5507);
			interfaceBody70=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceBody.Add(interfaceBody70.Tree);


			{
			// AST REWRITE
			// elements: INTERFACE, IDENT, genericTypeParameterList, interfaceExtendsClause, interfaceBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 355:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
			{
				DebugLocation(355, 13);
				// Java.g:355:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(355, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_INTERFACE.NextNode(), root_1);

				DebugLocation(355, 25);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(355, 38);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(355, 44);
				// Java.g:355:44: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(355, 44);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(355, 70);
				// Java.g:355:70: ( interfaceExtendsClause )?
				if (stream_interfaceExtendsClause.HasNext)
				{
					DebugLocation(355, 70);
					adaptor.AddChild(root_1, stream_interfaceExtendsClause.NextTree());

				}
				stream_interfaceExtendsClause.Reset();
				DebugLocation(355, 94);
				adaptor.AddChild(root_1, stream_interfaceBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceTypeDeclaration", 21);
			LeaveRule("interfaceTypeDeclaration", 21);
			LeaveRule_interfaceTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 21, interfaceTypeDeclaration_StartIndex); }

		}
		DebugLocation(356, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceTypeDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// Java.g:358:1: typeList : type ( COMMA ! type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 22);
		TraceIn("typeList", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA72_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(358, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Java.g:359:5: ( type ( COMMA ! type )* )
			DebugEnterAlt(1);
			// Java.g:359:9: type ( COMMA ! type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(359, 9);
			PushFollow(Follow._type_in_typeList5557);
			type71=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type71.Tree);
			DebugLocation(359, 14);
			// Java.g:359:14: ( COMMA ! type )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==COMMA))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:359:15: COMMA ! type
					{
					DebugLocation(359, 20);
					COMMA72=(IToken)Match(input,COMMA,Follow._COMMA_in_typeList5560); if (state.failed) return retval;
					DebugLocation(359, 22);
					PushFollow(Follow._type_in_typeList5563);
					type73=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type73.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 22);
			LeaveRule("typeList", 22);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 22, typeList_StartIndex); }

		}
		DebugLocation(360, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// Java.g:362:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 23);
		TraceIn("classBody", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY74 = default(IToken);
		IToken RCURLY76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY74_tree = default(CommonTree);
		CommonTree RCURLY76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(362, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Java.g:363:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:363:9: LCURLY ( classScopeDeclarations )* RCURLY
			{
			DebugLocation(363, 9);
			LCURLY74=(IToken)Match(input,LCURLY,Follow._LCURLY_in_classBody5588); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY74);

			DebugLocation(363, 16);
			// Java.g:363:16: ( classScopeDeclarations )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==ABSTRACT||LA25_1==AT||LA25_1==BOOLEAN||LA25_1==BYTE||LA25_1==CHAR||LA25_1==CLASS||LA25_1==DOUBLE||LA25_1==ENUM||LA25_1==FINAL||LA25_1==FLOAT||LA25_1==IDENT||LA25_1==INT||LA25_1==INTERFACE||LA25_1==LCURLY||LA25_1==LESS_THAN||LA25_1==LONG||LA25_1==NATIVE||(LA25_1>=PRIVATE && LA25_1<=PUBLIC)||LA25_1==SEMI||LA25_1==SHORT||LA25_1==STATIC||LA25_1==STRICTFP||LA25_1==SYNCHRONIZED||LA25_1==TRANSIENT||LA25_1==VOID||LA25_1==VOLATILE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:363:16: classScopeDeclarations
					{
					DebugLocation(363, 16);
					PushFollow(Follow._classScopeDeclarations_in_classBody5590);
					classScopeDeclarations75=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations75.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(363, 40);
			RCURLY76=(IToken)Match(input,RCURLY,Follow._RCURLY_in_classBody5593); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY76);



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 364:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(364, 13);
				// Java.g:364:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(364, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(364, 71);
				// Java.g:364:71: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(364, 71);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 23);
			LeaveRule("classBody", 23);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 23, classBody_StartIndex); }

		}
		DebugLocation(365, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// Java.g:367:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 24);
		TraceIn("interfaceBody", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY77 = default(IToken);
		IToken RCURLY79 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY77_tree = default(CommonTree);
		CommonTree RCURLY79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(367, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Java.g:368:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:368:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
			{
			DebugLocation(368, 9);
			LCURLY77=(IToken)Match(input,LCURLY,Follow._LCURLY_in_interfaceBody5635); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY77);

			DebugLocation(368, 16);
			// Java.g:368:16: ( interfaceScopeDeclarations )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==ABSTRACT||LA26_1==AT||LA26_1==BOOLEAN||LA26_1==BYTE||LA26_1==CHAR||LA26_1==CLASS||LA26_1==DOUBLE||LA26_1==ENUM||LA26_1==FINAL||LA26_1==FLOAT||LA26_1==IDENT||LA26_1==INT||LA26_1==INTERFACE||LA26_1==LESS_THAN||LA26_1==LONG||LA26_1==NATIVE||(LA26_1>=PRIVATE && LA26_1<=PUBLIC)||LA26_1==SEMI||LA26_1==SHORT||LA26_1==STATIC||LA26_1==STRICTFP||LA26_1==SYNCHRONIZED||LA26_1==TRANSIENT||LA26_1==VOID||LA26_1==VOLATILE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:368:16: interfaceScopeDeclarations
					{
					DebugLocation(368, 16);
					PushFollow(Follow._interfaceScopeDeclarations_in_interfaceBody5637);
					interfaceScopeDeclarations78=interfaceScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceScopeDeclarations.Add(interfaceScopeDeclarations78.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(368, 44);
			RCURLY79=(IToken)Match(input,RCURLY,Follow._RCURLY_in_interfaceBody5640); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY79);



			{
			// AST REWRITE
			// elements: interfaceScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 369:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
			{
				DebugLocation(369, 13);
				// Java.g:369:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(369, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(369, 75);
				// Java.g:369:75: ( interfaceScopeDeclarations )*
				while ( stream_interfaceScopeDeclarations.HasNext )
				{
					DebugLocation(369, 75);
					adaptor.AddChild(root_1, stream_interfaceScopeDeclarations.NextTree());

				}
				stream_interfaceScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 24);
			LeaveRule("interfaceBody", 24);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 24, interfaceBody_StartIndex); }

		}
		DebugLocation(370, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// Java.g:372:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("classScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 25);
		TraceIn("classScopeDeclarations", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken STATIC81 = default(IToken);
		IToken IDENT86 = default(IToken);
		IToken SEMI91 = default(IToken);
		IToken VOID92 = default(IToken);
		IToken IDENT93 = default(IToken);
		IToken SEMI97 = default(IToken);
		IToken SEMI103 = default(IToken);
		IToken SEMI105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ident_tree = default(CommonTree);
		CommonTree STATIC81_tree = default(CommonTree);
		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree SEMI91_tree = default(CommonTree);
		CommonTree VOID92_tree = default(CommonTree);
		CommonTree IDENT93_tree = default(CommonTree);
		CommonTree SEMI97_tree = default(CommonTree);
		CommonTree SEMI103_tree = default(CommonTree);
		CommonTree SEMI105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STATIC=new RewriteRuleITokenStream(adaptor,"token STATIC");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(372, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Java.g:373:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt36=5;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt36 = 1;
				}
				break;
			case STATIC:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred32_Java_fragment)))
				{
					alt36 = 2;
				}
				else if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt36 = 3;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt36 = 4;
				}
				break;
			case SEMI:
				{
				alt36 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:373:9: block
				{
				DebugLocation(373, 9);
				PushFollow(Follow._block_in_classScopeDeclarations5678);
				block80=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block80.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 373:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
				{
					DebugLocation(373, 29);
					// Java.g:373:29: ^( CLASS_INSTANCE_INITIALIZER block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(373, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

					DebugLocation(373, 58);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:374:9: STATIC block
				{
				DebugLocation(374, 9);
				STATIC81=(IToken)Match(input,STATIC,Follow._STATIC_in_classScopeDeclarations5707); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATIC.Add(STATIC81);

				DebugLocation(374, 16);
				PushFollow(Follow._block_in_classScopeDeclarations5709);
				block82=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block82.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 374:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
				{
					DebugLocation(374, 29);
					// Java.g:374:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(374, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER"), root_1);

					DebugLocation(374, 93);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:375:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(375, 9);
				PushFollow(Follow._modifierList_in_classScopeDeclarations5732);
				modifierList83=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList83.Tree);
				DebugLocation(376, 9);
				// Java.g:376:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt35 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred42_Java_fragment)))
					{
						alt35 = 1;
					}
					else if ((true))
					{
						alt35 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred42_Java_fragment)))
					{
						alt35 = 1;
					}
					else if ((true))
					{
						alt35 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:376:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					{
					DebugLocation(376, 13);
					// Java.g:376:13: ( genericTypeParameterList )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==LESS_THAN))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:376:13: genericTypeParameterList
						{
						DebugLocation(376, 13);
						PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations5746);
						genericTypeParameterList84=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList84.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(377, 13);
					// Java.g:377:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					int alt34=3;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						alt34 = 1;
						}
						break;
					case IDENT:
						{
						int LA34_2 = input.LA(2);

						if ((LA34_2==DOT||LA34_2==IDENT||LA34_2==LBRACK||LA34_2==LESS_THAN))
						{
							alt34 = 1;
						}
						else if ((LA34_2==LPAREN))
						{
							alt34 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 2, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case VOID:
						{
						alt34 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:377:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(377, 17);
						PushFollow(Follow._type_in_classScopeDeclarations5765);
						type85=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type85.Tree);
						DebugLocation(377, 22);
						IDENT86=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5767); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT86);

						DebugLocation(377, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5769);
						formalParameterList87=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList87.Tree);
						DebugLocation(377, 48);
						// Java.g:377:48: ( arrayDeclaratorList )?
						int alt28=2;
						try { DebugEnterSubRule(28);
						try { DebugEnterDecision(28, false);
						int LA28_1 = input.LA(1);

						if ((LA28_1==LBRACK))
						{
							alt28 = 1;
						}
						} finally { DebugExitDecision(28); }
						switch (alt28)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:377:48: arrayDeclaratorList
							{
							DebugLocation(377, 48);
							PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations5771);
							arrayDeclaratorList88=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList88.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(28); }

						DebugLocation(377, 69);
						// Java.g:377:69: ( throwsClause )?
						int alt29=2;
						try { DebugEnterSubRule(29);
						try { DebugEnterDecision(29, false);
						int LA29_1 = input.LA(1);

						if ((LA29_1==THROWS))
						{
							alt29 = 1;
						}
						} finally { DebugExitDecision(29); }
						switch (alt29)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:377:69: throwsClause
							{
							DebugLocation(377, 69);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5774);
							throwsClause89=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause89.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(29); }

						DebugLocation(377, 83);
						// Java.g:377:83: ( block | SEMI )
						int alt30=2;
						try { DebugEnterSubRule(30);
						try { DebugEnterDecision(30, false);
						int LA30_1 = input.LA(1);

						if ((LA30_1==LCURLY))
						{
							alt30 = 1;
						}
						else if ((LA30_1==SEMI))
						{
							alt30 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(30); }
						switch (alt30)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:377:84: block
							{
							DebugLocation(377, 84);
							PushFollow(Follow._block_in_classScopeDeclarations5778);
							block90=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block90.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Java.g:377:92: SEMI
							{
							DebugLocation(377, 92);
							SEMI91=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5782); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI91);


							}
							break;

						}
						} finally { DebugExitSubRule(30); }



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, type, IDENT, formalParameterList, arrayDeclaratorList, throwsClause, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 378:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
						{
							DebugLocation(378, 21);
							// Java.g:378:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(378, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(378, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(378, 57);
							// Java.g:378:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(378, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(378, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(378, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(378, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(378, 114);
							// Java.g:378:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(378, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(378, 135);
							// Java.g:378:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(378, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(378, 149);
							// Java.g:378:149: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(378, 149);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:379:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(379, 17);
						VOID92=(IToken)Match(input,VOID,Follow._VOID_in_classScopeDeclarations5844); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID92);

						DebugLocation(379, 22);
						IDENT93=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5846); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT93);

						DebugLocation(379, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5848);
						formalParameterList94=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList94.Tree);
						DebugLocation(379, 48);
						// Java.g:379:48: ( throwsClause )?
						int alt31=2;
						try { DebugEnterSubRule(31);
						try { DebugEnterDecision(31, false);
						int LA31_1 = input.LA(1);

						if ((LA31_1==THROWS))
						{
							alt31 = 1;
						}
						} finally { DebugExitDecision(31); }
						switch (alt31)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:379:48: throwsClause
							{
							DebugLocation(379, 48);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5850);
							throwsClause95=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause95.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(31); }

						DebugLocation(379, 62);
						// Java.g:379:62: ( block | SEMI )
						int alt32=2;
						try { DebugEnterSubRule(32);
						try { DebugEnterDecision(32, false);
						int LA32_1 = input.LA(1);

						if ((LA32_1==LCURLY))
						{
							alt32 = 1;
						}
						else if ((LA32_1==SEMI))
						{
							alt32 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(32); }
						switch (alt32)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:379:63: block
							{
							DebugLocation(379, 63);
							PushFollow(Follow._block_in_classScopeDeclarations5854);
							block96=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block96.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Java.g:379:71: SEMI
							{
							DebugLocation(379, 71);
							SEMI97=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5858); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI97);


							}
							break;

						}
						} finally { DebugExitSubRule(32); }



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, IDENT, formalParameterList, throwsClause, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 380:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
						{
							DebugLocation(380, 21);
							// Java.g:380:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(380, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(380, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(380, 53);
							// Java.g:380:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(380, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(380, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(380, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(380, 105);
							// Java.g:380:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(380, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(380, 119);
							// Java.g:380:119: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(380, 119);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:381:17: ident= IDENT formalParameterList ( throwsClause )? block
						{
						DebugLocation(381, 22);
						ident=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5917); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(ident);

						DebugLocation(381, 29);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5919);
						formalParameterList98=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList98.Tree);
						DebugLocation(381, 49);
						// Java.g:381:49: ( throwsClause )?
						int alt33=2;
						try { DebugEnterSubRule(33);
						try { DebugEnterDecision(33, false);
						int LA33_1 = input.LA(1);

						if ((LA33_1==THROWS))
						{
							alt33 = 1;
						}
						} finally { DebugExitDecision(33); }
						switch (alt33)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:381:49: throwsClause
							{
							DebugLocation(381, 49);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5921);
							throwsClause99=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause99.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(33); }

						DebugLocation(381, 63);
						PushFollow(Follow._block_in_classScopeDeclarations5924);
						block100=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_block.Add(block100.Tree);


						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, formalParameterList, throwsClause, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 382:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
						{
							DebugLocation(382, 21);
							// Java.g:382:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(382, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

							DebugLocation(382, 68);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(382, 81);
							// Java.g:382:81: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(382, 81);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(382, 107);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(382, 127);
							// Java.g:382:127: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(382, 127);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(382, 141);
							adaptor.AddChild(root_1, stream_block.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(34); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:384:13: type classFieldDeclaratorList SEMI
					{
					DebugLocation(384, 13);
					PushFollow(Follow._type_in_classScopeDeclarations5988);
					type101=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type101.Tree);
					DebugLocation(384, 18);
					PushFollow(Follow._classFieldDeclaratorList_in_classScopeDeclarations5990);
					classFieldDeclaratorList102=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList102.Tree);
					DebugLocation(384, 43);
					SEMI103=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5992); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI103);



					{
					// AST REWRITE
					// elements: modifierList, type, classFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(385, 17);
						// Java.g:385:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(385, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(385, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(385, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(35); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:387:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations6037);
				typeDeclaration104=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration104.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:388:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(388, 13);
				SEMI105=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6047); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classScopeDeclarations", 25);
			LeaveRule("classScopeDeclarations", 25);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 25, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(389, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// Java.g:391:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("interfaceScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 26);
		TraceIn("interfaceScopeDeclarations", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT109 = default(IToken);
		IToken SEMI113 = default(IToken);
		IToken VOID114 = default(IToken);
		IToken IDENT115 = default(IToken);
		IToken SEMI118 = default(IToken);
		IToken SEMI121 = default(IToken);
		IToken SEMI123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT109_tree = default(CommonTree);
		CommonTree SEMI113_tree = default(CommonTree);
		CommonTree VOID114_tree = default(CommonTree);
		CommonTree IDENT115_tree = default(CommonTree);
		CommonTree SEMI118_tree = default(CommonTree);
		CommonTree SEMI121_tree = default(CommonTree);
		CommonTree SEMI123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(391, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Java.g:392:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt43=3;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt43 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt43 = 2;
				}
				break;
			case SEMI:
				{
				alt43 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:392:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				{
				DebugLocation(392, 9);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations6079);
				modifierList106=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList106.Tree);
				DebugLocation(393, 9);
				// Java.g:393:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt42 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Java_fragment)))
					{
						alt42 = 1;
					}
					else if ((true))
					{
						alt42 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 42, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Java_fragment)))
					{
						alt42 = 1;
					}
					else if ((true))
					{
						alt42 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 42, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:393:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					{
					DebugLocation(393, 13);
					// Java.g:393:13: ( genericTypeParameterList )?
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, false);
					int LA37_1 = input.LA(1);

					if ((LA37_1==LESS_THAN))
					{
						alt37 = 1;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:393:13: genericTypeParameterList
						{
						DebugLocation(393, 13);
						PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations6093);
						genericTypeParameterList107=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList107.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(394, 13);
					// Java.g:394:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==BOOLEAN||LA41_1==BYTE||LA41_1==CHAR||LA41_1==DOUBLE||LA41_1==FLOAT||LA41_1==IDENT||LA41_1==INT||LA41_1==LONG||LA41_1==SHORT))
					{
						alt41 = 1;
					}
					else if ((LA41_1==VOID))
					{
						alt41 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:394:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
						{
						DebugLocation(394, 17);
						PushFollow(Follow._type_in_interfaceScopeDeclarations6112);
						type108=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type108.Tree);
						DebugLocation(394, 22);
						IDENT109=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6114); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT109);

						DebugLocation(394, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6116);
						formalParameterList110=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList110.Tree);
						DebugLocation(394, 48);
						// Java.g:394:48: ( arrayDeclaratorList )?
						int alt38=2;
						try { DebugEnterSubRule(38);
						try { DebugEnterDecision(38, false);
						int LA38_1 = input.LA(1);

						if ((LA38_1==LBRACK))
						{
							alt38 = 1;
						}
						} finally { DebugExitDecision(38); }
						switch (alt38)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:394:48: arrayDeclaratorList
							{
							DebugLocation(394, 48);
							PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations6118);
							arrayDeclaratorList111=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList111.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(38); }

						DebugLocation(394, 69);
						// Java.g:394:69: ( throwsClause )?
						int alt39=2;
						try { DebugEnterSubRule(39);
						try { DebugEnterDecision(39, false);
						int LA39_1 = input.LA(1);

						if ((LA39_1==THROWS))
						{
							alt39 = 1;
						}
						} finally { DebugExitDecision(39); }
						switch (alt39)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:394:69: throwsClause
							{
							DebugLocation(394, 69);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6121);
							throwsClause112=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause112.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(39); }

						DebugLocation(394, 83);
						SEMI113=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6124); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI113);



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, type, IDENT, formalParameterList, arrayDeclaratorList, throwsClause
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 395:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
						{
							DebugLocation(395, 21);
							// Java.g:395:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(395, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(395, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(395, 57);
							// Java.g:395:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(395, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(395, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(395, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(395, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(395, 114);
							// Java.g:395:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(395, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(395, 135);
							// Java.g:395:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(395, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:396:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
						{
						DebugLocation(396, 17);
						VOID114=(IToken)Match(input,VOID,Follow._VOID_in_interfaceScopeDeclarations6182); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID114);

						DebugLocation(396, 22);
						IDENT115=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT115);

						DebugLocation(396, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6186);
						formalParameterList116=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList116.Tree);
						DebugLocation(396, 48);
						// Java.g:396:48: ( throwsClause )?
						int alt40=2;
						try { DebugEnterSubRule(40);
						try { DebugEnterDecision(40, false);
						int LA40_1 = input.LA(1);

						if ((LA40_1==THROWS))
						{
							alt40 = 1;
						}
						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:396:48: throwsClause
							{
							DebugLocation(396, 48);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6188);
							throwsClause117=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause117.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(40); }

						DebugLocation(396, 62);
						SEMI118=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6191); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI118);



						{
						// AST REWRITE
						// elements: modifierList, genericTypeParameterList, IDENT, formalParameterList, throwsClause
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 397:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
						{
							DebugLocation(397, 21);
							// Java.g:397:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(397, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(397, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(397, 53);
							// Java.g:397:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(397, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(397, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(397, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(397, 105);
							// Java.g:397:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(397, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(41); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:399:13: type interfaceFieldDeclaratorList SEMI
					{
					DebugLocation(399, 13);
					PushFollow(Follow._type_in_interfaceScopeDeclarations6254);
					type119=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type119.Tree);
					DebugLocation(399, 18);
					PushFollow(Follow._interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6256);
					interfaceFieldDeclaratorList120=interfaceFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclaratorList.Add(interfaceFieldDeclaratorList120.Tree);
					DebugLocation(399, 47);
					SEMI121=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6258); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI121);



					{
					// AST REWRITE
					// elements: modifierList, type, interfaceFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 400:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
					{
						DebugLocation(400, 17);
						// Java.g:400:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(400, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(400, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(400, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(400, 53);
						adaptor.AddChild(root_1, stream_interfaceFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:402:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations6303);
				typeDeclaration122=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration122.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:403:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 13);
				SEMI123=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6313); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 26);
			LeaveRule("interfaceScopeDeclarations", 26);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 26, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(404, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_classFieldDeclaratorList();
	partial void LeaveRule_classFieldDeclaratorList();
	// $ANTLR start "classFieldDeclaratorList"
	// Java.g:406:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
	[GrammarRule("classFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList()
	{
		EnterRule_classFieldDeclaratorList();
		EnterRule("classFieldDeclaratorList", 27);
		TraceIn("classFieldDeclaratorList", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA125 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA125_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclaratorList");
		DebugLocation(406, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Java.g:407:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// Java.g:407:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
			{
			DebugLocation(407, 9);
			PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6333);
			classFieldDeclarator124=classFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator124.Tree);
			DebugLocation(407, 30);
			// Java.g:407:30: ( COMMA classFieldDeclarator )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==COMMA))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:407:31: COMMA classFieldDeclarator
					{
					DebugLocation(407, 31);
					COMMA125=(IToken)Match(input,COMMA,Follow._COMMA_in_classFieldDeclaratorList6336); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA125);

					DebugLocation(407, 37);
					PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6338);
					classFieldDeclarator126=classFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator126.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: classFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 408:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
			{
				DebugLocation(408, 13);
				// Java.g:408:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(408, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(408, 35);
				if (!(stream_classFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_classFieldDeclarator.HasNext )
				{
					DebugLocation(408, 35);
					adaptor.AddChild(root_1, stream_classFieldDeclarator.NextTree());

				}
				stream_classFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclaratorList", 27);
			LeaveRule("classFieldDeclaratorList", 27);
			LeaveRule_classFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 27, classFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(409, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclaratorList"

	partial void EnterRule_classFieldDeclarator();
	partial void LeaveRule_classFieldDeclarator();
	// $ANTLR start "classFieldDeclarator"
	// Java.g:411:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("classFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator()
	{
		EnterRule_classFieldDeclarator();
		EnterRule("classFieldDeclarator", 28);
		TraceIn("classFieldDeclarator", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclarator");
		DebugLocation(411, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Java.g:412:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// Java.g:412:9: variableDeclaratorId ( ASSIGN variableInitializer )?
			{
			DebugLocation(412, 9);
			PushFollow(Follow._variableDeclaratorId_in_classFieldDeclarator6377);
			variableDeclaratorId127=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId127.Tree);
			DebugLocation(412, 30);
			// Java.g:412:30: ( ASSIGN variableInitializer )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==ASSIGN))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:412:31: ASSIGN variableInitializer
				{
				DebugLocation(412, 31);
				ASSIGN128=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_classFieldDeclarator6380); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN128);

				DebugLocation(412, 38);
				PushFollow(Follow._variableInitializer_in_classFieldDeclarator6382);
				variableInitializer129=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer129.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: variableDeclaratorId, variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 413:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
				DebugLocation(413, 13);
				// Java.g:413:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(413, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(413, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(413, 51);
				// Java.g:413:51: ( variableInitializer )?
				if (stream_variableInitializer.HasNext)
				{
					DebugLocation(413, 51);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclarator", 28);
			LeaveRule("classFieldDeclarator", 28);
			LeaveRule_classFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, classFieldDeclarator_StartIndex); }

		}
		DebugLocation(414, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclarator"

	partial void EnterRule_interfaceFieldDeclaratorList();
	partial void LeaveRule_interfaceFieldDeclaratorList();
	// $ANTLR start "interfaceFieldDeclaratorList"
	// Java.g:416:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
	[GrammarRule("interfaceFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList()
	{
		EnterRule_interfaceFieldDeclaratorList();
		EnterRule("interfaceFieldDeclaratorList", 29);
		TraceIn("interfaceFieldDeclaratorList", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaratorList");
		DebugLocation(416, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Java.g:417:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// Java.g:417:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
			{
			DebugLocation(417, 9);
			PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6427);
			interfaceFieldDeclarator130=interfaceFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator130.Tree);
			DebugLocation(417, 34);
			// Java.g:417:34: ( COMMA interfaceFieldDeclarator )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==COMMA))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:417:35: COMMA interfaceFieldDeclarator
					{
					DebugLocation(417, 35);
					COMMA131=(IToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaratorList6430); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA131);

					DebugLocation(417, 41);
					PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6432);
					interfaceFieldDeclarator132=interfaceFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator132.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: interfaceFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
			{
				DebugLocation(418, 13);
				// Java.g:418:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(418, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(418, 35);
				if (!(stream_interfaceFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_interfaceFieldDeclarator.HasNext )
				{
					DebugLocation(418, 35);
					adaptor.AddChild(root_1, stream_interfaceFieldDeclarator.NextTree());

				}
				stream_interfaceFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaratorList", 29);
			LeaveRule("interfaceFieldDeclaratorList", 29);
			LeaveRule_interfaceFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(419, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaratorList"

	partial void EnterRule_interfaceFieldDeclarator();
	partial void LeaveRule_interfaceFieldDeclarator();
	// $ANTLR start "interfaceFieldDeclarator"
	// Java.g:421:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
	[GrammarRule("interfaceFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator()
	{
		EnterRule_interfaceFieldDeclarator();
		EnterRule("interfaceFieldDeclarator", 30);
		TraceIn("interfaceFieldDeclarator", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclarator");
		DebugLocation(421, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Java.g:422:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
			DebugEnterAlt(1);
			// Java.g:422:9: variableDeclaratorId ASSIGN variableInitializer
			{
			DebugLocation(422, 9);
			PushFollow(Follow._variableDeclaratorId_in_interfaceFieldDeclarator6471);
			variableDeclaratorId133=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId133.Tree);
			DebugLocation(422, 30);
			ASSIGN134=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_interfaceFieldDeclarator6473); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN134);

			DebugLocation(422, 37);
			PushFollow(Follow._variableInitializer_in_interfaceFieldDeclarator6475);
			variableInitializer135=variableInitializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer135.Tree);


			{
			// AST REWRITE
			// elements: variableDeclaratorId, variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
			{
				DebugLocation(423, 13);
				// Java.g:423:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(423, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(423, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(423, 51);
				adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclarator", 30);
			LeaveRule("interfaceFieldDeclarator", 30);
			LeaveRule_interfaceFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceFieldDeclarator_StartIndex); }

		}
		DebugLocation(424, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// Java.g:426:1: variableDeclaratorId : IDENT ^ ( arrayDeclaratorList )? ;
	[GrammarRule("variableDeclaratorId")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 31);
		TraceIn("variableDeclaratorId", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclaratorId_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT136 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(426, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Java.g:427:5: ( IDENT ^ ( arrayDeclaratorList )? )
			DebugEnterAlt(1);
			// Java.g:427:9: IDENT ^ ( arrayDeclaratorList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(427, 14);
			IDENT136=(IToken)Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId6517); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT136_tree = (CommonTree)adaptor.Create(IDENT136);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT136_tree, root_0);
			}
			DebugLocation(427, 16);
			// Java.g:427:16: ( arrayDeclaratorList )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==LBRACK))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:427:16: arrayDeclaratorList
				{
				DebugLocation(427, 16);
				PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId6520);
				arrayDeclaratorList137=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaratorId", 31);
			LeaveRule("variableDeclaratorId", 31);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 31, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(428, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return retval;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// Java.g:430:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 32);
		TraceIn("variableInitializer", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(430, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Java.g:431:5: ( arrayInitializer | expression )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==LCURLY))
			{
				alt48 = 1;
			}
			else if ((LA48_1==BOOLEAN||LA48_1==BYTE||(LA48_1>=CHAR && LA48_1<=CHARACTER_LITERAL)||(LA48_1>=DEC && LA48_1<=DECIMAL_LITERAL)||LA48_1==DOUBLE||LA48_1==FALSE||(LA48_1>=FLOAT && LA48_1<=FLOATING_POINT_LITERAL)||(LA48_1>=HEX_LITERAL && LA48_1<=IDENT)||LA48_1==INC||LA48_1==INT||LA48_1==LESS_THAN||LA48_1==LOGICAL_NOT||(LA48_1>=LONG && LA48_1<=LPAREN)||LA48_1==MINUS||(LA48_1>=NEW && LA48_1<=NOT)||LA48_1==NULL||LA48_1==OCTAL_LITERAL||LA48_1==PLUS||LA48_1==SHORT||(LA48_1>=STRING_LITERAL && LA48_1<=SUPER)||LA48_1==THIS||LA48_1==TRUE||LA48_1==VOID))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:431:9: arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(431, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer6540);
				arrayInitializer138=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer138.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:432:9: expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(432, 9);
				PushFollow(Follow._expression_in_variableInitializer6550);
				expression139=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression139.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 32);
			LeaveRule("variableInitializer", 32);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 32, variableInitializer_StartIndex); }

		}
		DebugLocation(433, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// Java.g:435:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
	[GrammarRule("arrayDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 33);
		TraceIn("arrayDeclarator", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK140 = default(IToken);
		IToken RBRACK141 = default(IToken);

		CommonTree LBRACK140_tree = default(CommonTree);
		CommonTree RBRACK141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(435, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Java.g:436:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
			DebugEnterAlt(1);
			// Java.g:436:9: LBRACK RBRACK
			{
			DebugLocation(436, 9);
			LBRACK140=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator6569); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRACK.Add(LBRACK140);

			DebugLocation(436, 16);
			RBRACK141=(IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator6571); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRACK.Add(RBRACK141);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 437:9: -> ^( ARRAY_DECLARATOR )
			{
				DebugLocation(437, 13);
				// Java.g:437:13: ^( ARRAY_DECLARATOR )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(437, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclarator", 33);
			LeaveRule("arrayDeclarator", 33);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 33, arrayDeclarator_StartIndex); }

		}
		DebugLocation(438, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return retval;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// Java.g:440:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
	[GrammarRule("arrayDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 34);
		TraceIn("arrayDeclaratorList", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(440, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Java.g:441:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
			DebugEnterAlt(1);
			// Java.g:441:9: ( arrayDeclarator )+
			{
			DebugLocation(441, 9);
			// Java.g:441:9: ( arrayDeclarator )+
			int cnt49=0;
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==LBRACK))
				{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred58_Java_fragment)))
					{
						alt49 = 1;
					}


				}


				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:441:9: arrayDeclarator
					{
					DebugLocation(441, 9);
					PushFollow(Follow._arrayDeclarator_in_arrayDeclaratorList6605);
					arrayDeclarator142=arrayDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator142.Tree);

					}
					break;

				default:
					if (cnt49 >= 1)
						goto loop49;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee49 = new EarlyExitException( 49, input );
					DebugRecognitionException(eee49);
					throw eee49;
				}
				cnt49++;
			}
			loop49:
				;

			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: arrayDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 442:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
			{
				DebugLocation(442, 13);
				// Java.g:442:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(442, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

				DebugLocation(442, 37);
				if (!(stream_arrayDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_arrayDeclarator.HasNext )
				{
					DebugLocation(442, 37);
					adaptor.AddChild(root_1, stream_arrayDeclarator.NextTree());

				}
				stream_arrayDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaratorList", 34);
			LeaveRule("arrayDeclaratorList", 34);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 34, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(443, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// Java.g:445:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 35);
		TraceIn("arrayInitializer", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY143 = default(IToken);
		IToken COMMA145 = default(IToken);
		IToken COMMA147 = default(IToken);
		IToken RCURLY148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY143_tree = default(CommonTree);
		CommonTree COMMA145_tree = default(CommonTree);
		CommonTree COMMA147_tree = default(CommonTree);
		CommonTree RCURLY148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(445, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Java.g:446:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// Java.g:446:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
			{
			DebugLocation(446, 9);
			LCURLY143=(IToken)Match(input,LCURLY,Follow._LCURLY_in_arrayInitializer6650); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY143);

			DebugLocation(446, 16);
			// Java.g:446:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==BOOLEAN||LA52_1==BYTE||(LA52_1>=CHAR && LA52_1<=CHARACTER_LITERAL)||(LA52_1>=DEC && LA52_1<=DECIMAL_LITERAL)||LA52_1==DOUBLE||LA52_1==FALSE||(LA52_1>=FLOAT && LA52_1<=FLOATING_POINT_LITERAL)||(LA52_1>=HEX_LITERAL && LA52_1<=IDENT)||LA52_1==INC||LA52_1==INT||LA52_1==LCURLY||LA52_1==LESS_THAN||LA52_1==LOGICAL_NOT||(LA52_1>=LONG && LA52_1<=LPAREN)||LA52_1==MINUS||(LA52_1>=NEW && LA52_1<=NOT)||LA52_1==NULL||LA52_1==OCTAL_LITERAL||LA52_1==PLUS||LA52_1==SHORT||(LA52_1>=STRING_LITERAL && LA52_1<=SUPER)||LA52_1==THIS||LA52_1==TRUE||LA52_1==VOID))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:446:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
				{
				DebugLocation(446, 17);
				PushFollow(Follow._variableInitializer_in_arrayInitializer6653);
				variableInitializer144=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer144.Tree);
				DebugLocation(446, 37);
				// Java.g:446:37: ( COMMA variableInitializer )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_1 = input.LA(1);

					if ((LA50_1==COMMA))
					{
						int LA50_2 = input.LA(2);

						if ((LA50_2==BOOLEAN||LA50_2==BYTE||(LA50_2>=CHAR && LA50_2<=CHARACTER_LITERAL)||(LA50_2>=DEC && LA50_2<=DECIMAL_LITERAL)||LA50_2==DOUBLE||LA50_2==FALSE||(LA50_2>=FLOAT && LA50_2<=FLOATING_POINT_LITERAL)||(LA50_2>=HEX_LITERAL && LA50_2<=IDENT)||LA50_2==INC||LA50_2==INT||LA50_2==LCURLY||LA50_2==LESS_THAN||LA50_2==LOGICAL_NOT||(LA50_2>=LONG && LA50_2<=LPAREN)||LA50_2==MINUS||(LA50_2>=NEW && LA50_2<=NOT)||LA50_2==NULL||LA50_2==OCTAL_LITERAL||LA50_2==PLUS||LA50_2==SHORT||(LA50_2>=STRING_LITERAL && LA50_2<=SUPER)||LA50_2==THIS||LA50_2==TRUE||LA50_2==VOID))
						{
							alt50 = 1;
						}


					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:446:38: COMMA variableInitializer
						{
						DebugLocation(446, 38);
						COMMA145=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6656); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA145);

						DebugLocation(446, 44);
						PushFollow(Follow._variableInitializer_in_arrayInitializer6658);
						variableInitializer146=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer146.Tree);

						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(446, 66);
				// Java.g:446:66: ( COMMA )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==COMMA))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:446:66: COMMA
					{
					DebugLocation(446, 66);
					COMMA147=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6662); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA147);


					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(446, 75);
			RCURLY148=(IToken)Match(input,RCURLY,Follow._RCURLY_in_arrayInitializer6667); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY148);



			{
			// AST REWRITE
			// elements: variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 447:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
			{
				DebugLocation(447, 13);
				// Java.g:447:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(447, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_INITIALIZER, LCURLY143, "ARRAY_INITIALIZER"), root_1);

				DebugLocation(447, 63);
				// Java.g:447:63: ( variableInitializer )*
				while ( stream_variableInitializer.HasNext )
				{
					DebugLocation(447, 63);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 35);
			LeaveRule("arrayInitializer", 35);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 35, arrayInitializer_StartIndex); }

		}
		DebugLocation(448, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// Java.g:450:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
	[GrammarRule("throwsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 36);
		TraceIn("throwsClause", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int throwsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken THROWS149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree THROWS149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THROWS=new RewriteRuleITokenStream(adaptor,"token THROWS");
		RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(450, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Java.g:451:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
			DebugEnterAlt(1);
			// Java.g:451:9: THROWS qualifiedIdentList
			{
			DebugLocation(451, 9);
			THROWS149=(IToken)Match(input,THROWS,Follow._THROWS_in_throwsClause6705); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THROWS.Add(THROWS149);

			DebugLocation(451, 16);
			PushFollow(Follow._qualifiedIdentList_in_throwsClause6707);
			qualifiedIdentList150=qualifiedIdentList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentList.Add(qualifiedIdentList150.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 452:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
			{
				DebugLocation(452, 13);
				// Java.g:452:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(452, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROWS_CLAUSE, THROWS149, "THROWS_CLAUSE"), root_1);

				DebugLocation(452, 55);
				adaptor.AddChild(root_1, stream_qualifiedIdentList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwsClause", 36);
			LeaveRule("throwsClause", 36);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 36, throwsClause_StartIndex); }

		}
		DebugLocation(453, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return retval;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// Java.g:455:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 37);
		TraceIn("modifierList", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifier151 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(455, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Java.g:456:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// Java.g:456:9: ( modifier )*
			{
			DebugLocation(456, 9);
			// Java.g:456:9: ( modifier )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==AT))
				{
					int LA53_2 = input.LA(2);

					if ((LA53_2==IDENT))
					{
						alt53 = 1;
					}


				}
				else if ((LA53_1==ABSTRACT||LA53_1==FINAL||LA53_1==NATIVE||(LA53_1>=PRIVATE && LA53_1<=PUBLIC)||LA53_1==STATIC||LA53_1==STRICTFP||LA53_1==SYNCHRONIZED||LA53_1==TRANSIENT||LA53_1==VOLATILE))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:456:9: modifier
					{
					DebugLocation(456, 9);
					PushFollow(Follow._modifier_in_modifierList6744);
					modifier151=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_modifier.Add(modifier151.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: modifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:9: -> ^( MODIFIER_LIST ( modifier )* )
			{
				DebugLocation(457, 13);
				// Java.g:457:13: ^( MODIFIER_LIST ( modifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(457, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

				DebugLocation(457, 29);
				// Java.g:457:29: ( modifier )*
				while ( stream_modifier.HasNext )
				{
					DebugLocation(457, 29);
					adaptor.AddChild(root_1, stream_modifier.NextTree());

				}
				stream_modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifierList", 37);
			LeaveRule("modifierList", 37);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 37, modifierList_StartIndex); }

		}
		DebugLocation(458, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return retval;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// Java.g:460:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
	[GrammarRule("modifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 38);
		TraceIn("modifier", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PUBLIC152 = default(IToken);
		IToken PROTECTED153 = default(IToken);
		IToken PRIVATE154 = default(IToken);
		IToken STATIC155 = default(IToken);
		IToken ABSTRACT156 = default(IToken);
		IToken NATIVE157 = default(IToken);
		IToken SYNCHRONIZED158 = default(IToken);
		IToken TRANSIENT159 = default(IToken);
		IToken VOLATILE160 = default(IToken);
		IToken STRICTFP161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifier162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PUBLIC152_tree = default(CommonTree);
		CommonTree PROTECTED153_tree = default(CommonTree);
		CommonTree PRIVATE154_tree = default(CommonTree);
		CommonTree STATIC155_tree = default(CommonTree);
		CommonTree ABSTRACT156_tree = default(CommonTree);
		CommonTree NATIVE157_tree = default(CommonTree);
		CommonTree SYNCHRONIZED158_tree = default(CommonTree);
		CommonTree TRANSIENT159_tree = default(CommonTree);
		CommonTree VOLATILE160_tree = default(CommonTree);
		CommonTree STRICTFP161_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(460, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Java.g:461:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
			int alt54=11;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt54 = 1;
				}
				break;
			case PROTECTED:
				{
				alt54 = 2;
				}
				break;
			case PRIVATE:
				{
				alt54 = 3;
				}
				break;
			case STATIC:
				{
				alt54 = 4;
				}
				break;
			case ABSTRACT:
				{
				alt54 = 5;
				}
				break;
			case NATIVE:
				{
				alt54 = 6;
				}
				break;
			case SYNCHRONIZED:
				{
				alt54 = 7;
				}
				break;
			case TRANSIENT:
				{
				alt54 = 8;
				}
				break;
			case VOLATILE:
				{
				alt54 = 9;
				}
				break;
			case STRICTFP:
				{
				alt54 = 10;
				}
				break;
			case AT:
			case FINAL:
				{
				alt54 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:461:9: PUBLIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(461, 9);
				PUBLIC152=(IToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifier6785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PUBLIC152_tree = (CommonTree)adaptor.Create(PUBLIC152);
				adaptor.AddChild(root_0, PUBLIC152_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:462:9: PROTECTED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(462, 9);
				PROTECTED153=(IToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifier6795); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PROTECTED153_tree = (CommonTree)adaptor.Create(PROTECTED153);
				adaptor.AddChild(root_0, PROTECTED153_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:463:9: PRIVATE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(463, 9);
				PRIVATE154=(IToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifier6805); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRIVATE154_tree = (CommonTree)adaptor.Create(PRIVATE154);
				adaptor.AddChild(root_0, PRIVATE154_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:464:9: STATIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(464, 9);
				STATIC155=(IToken)Match(input,STATIC,Follow._STATIC_in_modifier6815); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC155_tree = (CommonTree)adaptor.Create(STATIC155);
				adaptor.AddChild(root_0, STATIC155_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:465:9: ABSTRACT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(465, 9);
				ABSTRACT156=(IToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier6825); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ABSTRACT156_tree = (CommonTree)adaptor.Create(ABSTRACT156);
				adaptor.AddChild(root_0, ABSTRACT156_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:466:9: NATIVE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(466, 9);
				NATIVE157=(IToken)Match(input,NATIVE,Follow._NATIVE_in_modifier6835); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NATIVE157_tree = (CommonTree)adaptor.Create(NATIVE157);
				adaptor.AddChild(root_0, NATIVE157_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:467:9: SYNCHRONIZED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(467, 9);
				SYNCHRONIZED158=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier6845); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SYNCHRONIZED158_tree = (CommonTree)adaptor.Create(SYNCHRONIZED158);
				adaptor.AddChild(root_0, SYNCHRONIZED158_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:468:9: TRANSIENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(468, 9);
				TRANSIENT159=(IToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier6855); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRANSIENT159_tree = (CommonTree)adaptor.Create(TRANSIENT159);
				adaptor.AddChild(root_0, TRANSIENT159_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:469:9: VOLATILE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 9);
				VOLATILE160=(IToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifier6865); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VOLATILE160_tree = (CommonTree)adaptor.Create(VOLATILE160);
				adaptor.AddChild(root_0, VOLATILE160_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:470:9: STRICTFP
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(470, 9);
				STRICTFP161=(IToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifier6875); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRICTFP161_tree = (CommonTree)adaptor.Create(STRICTFP161);
				adaptor.AddChild(root_0, STRICTFP161_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:471:9: localModifier
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(471, 9);
				PushFollow(Follow._localModifier_in_modifier6885);
				localModifier162=localModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localModifier162.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 38);
			LeaveRule("modifier", 38);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 38, modifier_StartIndex); }

		}
		DebugLocation(472, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// Java.g:474:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 39);
		TraceIn("localModifierList", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifier163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(474, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Java.g:475:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// Java.g:475:9: ( localModifier )*
			{
			DebugLocation(475, 9);
			// Java.g:475:9: ( localModifier )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==AT||LA55_1==FINAL))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:475:9: localModifier
					{
					DebugLocation(475, 9);
					PushFollow(Follow._localModifier_in_localModifierList6904);
					localModifier163=localModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifier.Add(localModifier163.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: localModifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 476:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
				DebugLocation(476, 12);
				// Java.g:476:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(476, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

				DebugLocation(476, 34);
				// Java.g:476:34: ( localModifier )*
				while ( stream_localModifier.HasNext )
				{
					DebugLocation(476, 34);
					adaptor.AddChild(root_1, stream_localModifier.NextTree());

				}
				stream_localModifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifierList", 39);
			LeaveRule("localModifierList", 39);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 39, localModifierList_StartIndex); }

		}
		DebugLocation(477, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return retval;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// Java.g:479:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 40);
		TraceIn("localModifier", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINAL164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotation165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINAL164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(479, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Java.g:480:5: ( FINAL | annotation )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_1 = input.LA(1);

			if ((LA56_1==FINAL))
			{
				alt56 = 1;
			}
			else if ((LA56_1==AT))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:480:9: FINAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(480, 9);
				FINAL164=(IToken)Match(input,FINAL,Follow._FINAL_in_localModifier6945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FINAL164_tree = (CommonTree)adaptor.Create(FINAL164);
				adaptor.AddChild(root_0, FINAL164_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:481:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(481, 9);
				PushFollow(Follow._annotation_in_localModifier6955);
				annotation165=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation165.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifier", 40);
			LeaveRule("localModifier", 40);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 40, localModifier_StartIndex); }

		}
		DebugLocation(482, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return retval;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// Java.g:484:1: type : ( simpleType | objectType );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 41);
		TraceIn("type", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> simpleType166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> objectType167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(484, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Java.g:485:5: ( simpleType | objectType )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==BOOLEAN||LA57_1==BYTE||LA57_1==CHAR||LA57_1==DOUBLE||LA57_1==FLOAT||LA57_1==INT||LA57_1==LONG||LA57_1==SHORT))
			{
				alt57 = 1;
			}
			else if ((LA57_1==IDENT))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:485:9: simpleType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(485, 9);
				PushFollow(Follow._simpleType_in_type6974);
				simpleType166=simpleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleType166.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:486:9: objectType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(486, 9);
				PushFollow(Follow._objectType_in_type6984);
				objectType167=objectType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectType167.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 41);
			LeaveRule("type", 41);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 41, type_StartIndex); }

		}
		DebugLocation(487, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_simpleType();
	partial void LeaveRule_simpleType();
	// $ANTLR start "simpleType"
	// Java.g:489:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
	[GrammarRule("simpleType")]
	private AstParserRuleReturnScope<CommonTree, IToken> simpleType()
	{
		EnterRule_simpleType();
		EnterRule("simpleType", 42);
		TraceIn("simpleType", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int simpleType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> primitiveType168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "simpleType");
		DebugLocation(489, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Java.g:490:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// Java.g:490:9: primitiveType ( arrayDeclaratorList )?
			{
			DebugLocation(490, 9);
			PushFollow(Follow._primitiveType_in_simpleType7004);
			primitiveType168=primitiveType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primitiveType.Add(primitiveType168.Tree);
			DebugLocation(490, 23);
			// Java.g:490:23: ( arrayDeclaratorList )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==LBRACK))
			{
				int LA58_2 = input.LA(2);

				if ((LA58_2==RBRACK))
				{
					int LA58_3 = input.LA(3);

					if ((EvaluatePredicate(synpred76_Java_fragment)))
					{
						alt58 = 1;
					}
				}
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:490:23: arrayDeclaratorList
				{
				DebugLocation(490, 23);
				PushFollow(Follow._arrayDeclaratorList_in_simpleType7006);
				arrayDeclaratorList169=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList169.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: primitiveType, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 491:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
			{
				DebugLocation(491, 13);
				// Java.g:491:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(491, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(491, 20);
				adaptor.AddChild(root_1, stream_primitiveType.NextTree());
				DebugLocation(491, 34);
				// Java.g:491:34: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(491, 34);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleType", 42);
			LeaveRule("simpleType", 42);
			LeaveRule_simpleType();
			if (state.backtracking > 0) { Memoize(input, 42, simpleType_StartIndex); }

		}
		DebugLocation(492, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleType"); }
		return retval;

	}
	// $ANTLR end "simpleType"

	partial void EnterRule_objectType();
	partial void LeaveRule_objectType();
	// $ANTLR start "objectType"
	// Java.g:494:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectType")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectType()
	{
		EnterRule_objectType();
		EnterRule("objectType", 43);
		TraceIn("objectType", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "objectType");
		DebugLocation(494, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Java.g:495:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// Java.g:495:9: qualifiedTypeIdent ( arrayDeclaratorList )?
			{
			DebugLocation(495, 9);
			PushFollow(Follow._qualifiedTypeIdent_in_objectType7053);
			qualifiedTypeIdent170=qualifiedTypeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdent.Add(qualifiedTypeIdent170.Tree);
			DebugLocation(495, 28);
			// Java.g:495:28: ( arrayDeclaratorList )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==LBRACK))
			{
				int LA59_2 = input.LA(2);

				if ((EvaluatePredicate(synpred77_Java_fragment)))
				{
					alt59 = 1;
				}
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:495:28: arrayDeclaratorList
				{
				DebugLocation(495, 28);
				PushFollow(Follow._arrayDeclaratorList_in_objectType7055);
				arrayDeclaratorList171=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList171.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }



			{
			// AST REWRITE
			// elements: qualifiedTypeIdent, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 496:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
			{
				DebugLocation(496, 13);
				// Java.g:496:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(496, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(496, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdent.NextTree());
				DebugLocation(496, 39);
				// Java.g:496:39: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(496, 39);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectType", 43);
			LeaveRule("objectType", 43);
			LeaveRule_objectType();
			if (state.backtracking > 0) { Memoize(input, 43, objectType_StartIndex); }

		}
		DebugLocation(497, 4);
		} finally { DebugExitRule(GrammarFileName, "objectType"); }
		return retval;

	}
	// $ANTLR end "objectType"

	partial void EnterRule_objectTypeSimplified();
	partial void LeaveRule_objectTypeSimplified();
	// $ANTLR start "objectTypeSimplified"
	// Java.g:499:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectTypeSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectTypeSimplified()
	{
		EnterRule_objectTypeSimplified();
		EnterRule("objectTypeSimplified", 44);
		TraceIn("objectTypeSimplified", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectTypeSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "objectTypeSimplified");
		DebugLocation(499, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Java.g:500:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// Java.g:500:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
			{
			DebugLocation(500, 9);
			PushFollow(Follow._qualifiedTypeIdentSimplified_in_objectTypeSimplified7095);
			qualifiedTypeIdentSimplified172=qualifiedTypeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified172.Tree);
			DebugLocation(500, 38);
			// Java.g:500:38: ( arrayDeclaratorList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==LBRACK))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:500:38: arrayDeclaratorList
				{
				DebugLocation(500, 38);
				PushFollow(Follow._arrayDeclaratorList_in_objectTypeSimplified7097);
				arrayDeclaratorList173=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList173.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }



			{
			// AST REWRITE
			// elements: qualifiedTypeIdentSimplified, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 501:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
			{
				DebugLocation(501, 13);
				// Java.g:501:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(501, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(501, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
				DebugLocation(501, 49);
				// Java.g:501:49: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(501, 49);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectTypeSimplified", 44);
			LeaveRule("objectTypeSimplified", 44);
			LeaveRule_objectTypeSimplified();
			if (state.backtracking > 0) { Memoize(input, 44, objectTypeSimplified_StartIndex); }

		}
		DebugLocation(502, 4);
		} finally { DebugExitRule(GrammarFileName, "objectTypeSimplified"); }
		return retval;

	}
	// $ANTLR end "objectTypeSimplified"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// Java.g:504:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 45);
		TraceIn("qualifiedTypeIdent", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(504, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Java.g:505:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// Java.g:505:9: typeIdent ( DOT typeIdent )*
			{
			DebugLocation(505, 9);
			PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7137);
			typeIdent174=typeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdent.Add(typeIdent174.Tree);
			DebugLocation(505, 19);
			// Java.g:505:19: ( DOT typeIdent )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==DOT))
				{
					int LA61_2 = input.LA(2);

					if ((EvaluatePredicate(synpred79_Java_fragment)))
					{
						alt61 = 1;
					}


				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:505:20: DOT typeIdent
					{
					DebugLocation(505, 20);
					DOT175=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdent7140); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT175);

					DebugLocation(505, 24);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7142);
					typeIdent176=typeIdent();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdent.Add(typeIdent176.Tree);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: typeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 506:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
				DebugLocation(506, 13);
				// Java.g:506:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(506, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(506, 36);
				if (!(stream_typeIdent.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdent.HasNext )
				{
					DebugLocation(506, 36);
					adaptor.AddChild(root_1, stream_typeIdent.NextTree());

				}
				stream_typeIdent.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 45);
			LeaveRule("qualifiedTypeIdent", 45);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 45, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(507, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_qualifiedTypeIdentSimplified();
	partial void LeaveRule_qualifiedTypeIdentSimplified();
	// $ANTLR start "qualifiedTypeIdentSimplified"
	// Java.g:509:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
	[GrammarRule("qualifiedTypeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified()
	{
		EnterRule_qualifiedTypeIdentSimplified();
		EnterRule("qualifiedTypeIdentSimplified", 46);
		TraceIn("qualifiedTypeIdentSimplified", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT178 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT178_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdentSimplified");
		DebugLocation(509, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Java.g:510:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
			DebugEnterAlt(1);
			// Java.g:510:9: typeIdentSimplified ( DOT typeIdentSimplified )*
			{
			DebugLocation(510, 9);
			PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7182);
			typeIdentSimplified177=typeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified177.Tree);
			DebugLocation(510, 29);
			// Java.g:510:29: ( DOT typeIdentSimplified )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==DOT))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:510:30: DOT typeIdentSimplified
					{
					DebugLocation(510, 30);
					DOT178=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdentSimplified7185); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT178);

					DebugLocation(510, 34);
					PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7187);
					typeIdentSimplified179=typeIdentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified179.Tree);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: typeIdentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 511:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
			{
				DebugLocation(511, 13);
				// Java.g:511:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(511, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(511, 36);
				if (!(stream_typeIdentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdentSimplified.HasNext )
				{
					DebugLocation(511, 36);
					adaptor.AddChild(root_1, stream_typeIdentSimplified.NextTree());

				}
				stream_typeIdentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdentSimplified", 46);
			LeaveRule("qualifiedTypeIdentSimplified", 46);
			LeaveRule_qualifiedTypeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }

		}
		DebugLocation(512, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdentSimplified"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// Java.g:514:1: typeIdent : IDENT ^ ( genericTypeArgumentList )? ;
	[GrammarRule("typeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 47);
		TraceIn("typeIdent", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT180 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT180_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(514, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Java.g:515:5: ( IDENT ^ ( genericTypeArgumentList )? )
			DebugEnterAlt(1);
			// Java.g:515:9: IDENT ^ ( genericTypeArgumentList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(515, 14);
			IDENT180=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdent7227); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT180_tree = (CommonTree)adaptor.Create(IDENT180);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT180_tree, root_0);
			}
			DebugLocation(515, 16);
			// Java.g:515:16: ( genericTypeArgumentList )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==LESS_THAN))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:515:16: genericTypeArgumentList
				{
				DebugLocation(515, 16);
				PushFollow(Follow._genericTypeArgumentList_in_typeIdent7230);
				genericTypeArgumentList181=genericTypeArgumentList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentList181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdent", 47);
			LeaveRule("typeIdent", 47);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 47, typeIdent_StartIndex); }

		}
		DebugLocation(516, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return retval;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_typeIdentSimplified();
	partial void LeaveRule_typeIdentSimplified();
	// $ANTLR start "typeIdentSimplified"
	// Java.g:518:1: typeIdentSimplified : IDENT ^ ( genericTypeArgumentListSimplified )? ;
	[GrammarRule("typeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified()
	{
		EnterRule_typeIdentSimplified();
		EnterRule("typeIdentSimplified", 48);
		TraceIn("typeIdentSimplified", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT182 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT182_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdentSimplified");
		DebugLocation(518, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Java.g:519:5: ( IDENT ^ ( genericTypeArgumentListSimplified )? )
			DebugEnterAlt(1);
			// Java.g:519:9: IDENT ^ ( genericTypeArgumentListSimplified )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(519, 14);
			IDENT182=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdentSimplified7250); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT182_tree = (CommonTree)adaptor.Create(IDENT182);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT182_tree, root_0);
			}
			DebugLocation(519, 16);
			// Java.g:519:16: ( genericTypeArgumentListSimplified )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==LESS_THAN))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:519:16: genericTypeArgumentListSimplified
				{
				DebugLocation(519, 16);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_typeIdentSimplified7253);
				genericTypeArgumentListSimplified183=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentListSimplified183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdentSimplified", 48);
			LeaveRule("typeIdentSimplified", 48);
			LeaveRule_typeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 48, typeIdentSimplified_StartIndex); }

		}
		DebugLocation(520, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "typeIdentSimplified"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// Java.g:522:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<CommonTree, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 49);
		TraceIn("primitiveType", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set184 = default(IToken);

		CommonTree set184_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(522, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Java.g:523:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(523, 5);

			set184=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set184));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 49);
			LeaveRule("primitiveType", 49);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 49, primitiveType_StartIndex); }

		}
		DebugLocation(531, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// Java.g:533:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 50);
		TraceIn("genericTypeArgumentList", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN185 = default(IToken);
		IToken COMMA187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN185_tree = default(CommonTree);
		CommonTree COMMA187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(533, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Java.g:534:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// Java.g:534:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
			{
			DebugLocation(534, 9);
			LESS_THAN185=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentList7362); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN185);

			DebugLocation(534, 19);
			PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7364);
			genericTypeArgument186=genericTypeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument186.Tree);
			DebugLocation(534, 39);
			// Java.g:534:39: ( COMMA genericTypeArgument )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==COMMA))
				{
					int LA65_2 = input.LA(2);

					if ((EvaluatePredicate(synpred90_Java_fragment)))
					{
						alt65 = 1;
					}


				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:534:40: COMMA genericTypeArgument
					{
					DebugLocation(534, 40);
					COMMA187=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentList7367); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA187);

					DebugLocation(534, 46);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7369);
					genericTypeArgument188=genericTypeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument188.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(534, 68);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentList7373);
			genericTypeListClosing189=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing189.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgument
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 535:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
			{
				DebugLocation(535, 13);
				// Java.g:535:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(535, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN185, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(535, 74);
				if (!(stream_genericTypeArgument.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgument.HasNext )
				{
					DebugLocation(535, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgument.NextTree());

				}
				stream_genericTypeArgument.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentList", 50);
			LeaveRule("genericTypeArgumentList", 50);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 50, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(536, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// Java.g:538:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 51);
		TraceIn("genericTypeArgument", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgument_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
		RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(538, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Java.g:539:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==BOOLEAN||LA67_1==BYTE||LA67_1==CHAR||LA67_1==DOUBLE||LA67_1==FLOAT||LA67_1==IDENT||LA67_1==INT||LA67_1==LONG||LA67_1==SHORT))
			{
				alt67 = 1;
			}
			else if ((LA67_1==QUESTION))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:539:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(539, 9);
				PushFollow(Follow._type_in_genericTypeArgument7411);
				type190=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type190.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:540:9: QUESTION ( genericWildcardBoundType )?
				{
				DebugLocation(540, 9);
				QUESTION191=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument7421); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_QUESTION.Add(QUESTION191);

				DebugLocation(540, 18);
				// Java.g:540:18: ( genericWildcardBoundType )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==EXTENDS))
				{
					int LA66_2 = input.LA(2);

					if ((LA66_2==BOOLEAN||LA66_2==BYTE||LA66_2==CHAR||LA66_2==DOUBLE||LA66_2==FLOAT||LA66_2==INT||LA66_2==LONG||LA66_2==SHORT))
					{
						int LA66_3 = input.LA(3);

						if ((EvaluatePredicate(synpred92_Java_fragment)))
						{
							alt66 = 1;
						}
					}
					else if ((LA66_2==IDENT))
					{
						int LA66_3 = input.LA(3);

						if ((EvaluatePredicate(synpred92_Java_fragment)))
						{
							alt66 = 1;
						}
					}
				}
				else if ((LA66_1==SUPER))
				{
					int LA66_2 = input.LA(2);

					if ((LA66_2==BOOLEAN||LA66_2==BYTE||LA66_2==CHAR||LA66_2==DOUBLE||LA66_2==FLOAT||LA66_2==IDENT||LA66_2==INT||LA66_2==LONG||LA66_2==SHORT))
					{
						alt66 = 1;
					}
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:540:18: genericWildcardBoundType
					{
					DebugLocation(540, 18);
					PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument7423);
					genericWildcardBoundType192=genericWildcardBoundType();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericWildcardBoundType.Add(genericWildcardBoundType192.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(66); }



				{
				// AST REWRITE
				// elements: QUESTION, genericWildcardBoundType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 541:9: -> ^( QUESTION ( genericWildcardBoundType )? )
				{
					DebugLocation(541, 13);
					// Java.g:541:13: ^( QUESTION ( genericWildcardBoundType )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(541, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_QUESTION.NextNode(), root_1);

					DebugLocation(541, 24);
					// Java.g:541:24: ( genericWildcardBoundType )?
					if (stream_genericWildcardBoundType.HasNext)
					{
						DebugLocation(541, 24);
						adaptor.AddChild(root_1, stream_genericWildcardBoundType.NextTree());

					}
					stream_genericWildcardBoundType.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgument", 51);
			LeaveRule("genericTypeArgument", 51);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 51, genericTypeArgument_StartIndex); }

		}
		DebugLocation(542, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// Java.g:544:1: genericWildcardBoundType : ( EXTENDS | SUPER ) ^ type ;
	[GrammarRule("genericWildcardBoundType")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 52);
		TraceIn("genericWildcardBoundType", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericWildcardBoundType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set193_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(544, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Java.g:545:5: ( ( EXTENDS | SUPER ) ^ type )
			DebugEnterAlt(1);
			// Java.g:545:9: ( EXTENDS | SUPER ) ^ type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(545, 26);

			set193=(IToken)input.LT(1);
			set193=(IToken)input.LT(1);
			if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set193), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(545, 28);
			PushFollow(Follow._type_in_genericWildcardBoundType7474);
			type194=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type194.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericWildcardBoundType", 52);
			LeaveRule("genericWildcardBoundType", 52);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 52, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(546, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return retval;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_genericTypeArgumentListSimplified();
	partial void LeaveRule_genericTypeArgumentListSimplified();
	// $ANTLR start "genericTypeArgumentListSimplified"
	// Java.g:548:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
	[GrammarRule("genericTypeArgumentListSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified()
	{
		EnterRule_genericTypeArgumentListSimplified();
		EnterRule("genericTypeArgumentListSimplified", 53);
		TraceIn("genericTypeArgumentListSimplified", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentListSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN195 = default(IToken);
		IToken COMMA197 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN195_tree = default(CommonTree);
		CommonTree COMMA197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentListSimplified");
		DebugLocation(548, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Java.g:549:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
			DebugEnterAlt(1);
			// Java.g:549:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
			{
			DebugLocation(549, 9);
			LESS_THAN195=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentListSimplified7493); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN195);

			DebugLocation(549, 19);
			PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7495);
			genericTypeArgumentSimplified196=genericTypeArgumentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified196.Tree);
			DebugLocation(549, 49);
			// Java.g:549:49: ( COMMA genericTypeArgumentSimplified )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==COMMA))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:549:50: COMMA genericTypeArgumentSimplified
					{
					DebugLocation(549, 50);
					COMMA197=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentListSimplified7498); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA197);

					DebugLocation(549, 56);
					PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7500);
					genericTypeArgumentSimplified198=genericTypeArgumentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified198.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }

			DebugLocation(549, 88);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentListSimplified7504);
			genericTypeListClosing199=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing199.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgumentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 550:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
			{
				DebugLocation(550, 13);
				// Java.g:550:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(550, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN195, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(550, 74);
				if (!(stream_genericTypeArgumentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgumentSimplified.HasNext )
				{
					DebugLocation(550, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgumentSimplified.NextTree());

				}
				stream_genericTypeArgumentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentListSimplified", 53);
			LeaveRule("genericTypeArgumentListSimplified", 53);
			LeaveRule_genericTypeArgumentListSimplified();
			if (state.backtracking > 0) { Memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }

		}
		DebugLocation(551, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentListSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentListSimplified"

	partial void EnterRule_genericTypeArgumentSimplified();
	partial void LeaveRule_genericTypeArgumentSimplified();
	// $ANTLR start "genericTypeArgumentSimplified"
	// Java.g:553:1: genericTypeArgumentSimplified : ( type | QUESTION );
	[GrammarRule("genericTypeArgumentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified()
	{
		EnterRule_genericTypeArgumentSimplified();
		EnterRule("genericTypeArgumentSimplified", 54);
		TraceIn("genericTypeArgumentSimplified", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION201 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION201_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentSimplified");
		DebugLocation(553, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Java.g:554:5: ( type | QUESTION )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FLOAT||LA69_1==IDENT||LA69_1==INT||LA69_1==LONG||LA69_1==SHORT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==QUESTION))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:554:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(554, 9);
				PushFollow(Follow._type_in_genericTypeArgumentSimplified7546);
				type200=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type200.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:555:9: QUESTION
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(555, 9);
				QUESTION201=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgumentSimplified7556); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION201_tree = (CommonTree)adaptor.Create(QUESTION201);
				adaptor.AddChild(root_0, QUESTION201_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentSimplified", 54);
			LeaveRule("genericTypeArgumentSimplified", 54);
			LeaveRule_genericTypeArgumentSimplified();
			if (state.backtracking > 0) { Memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }

		}
		DebugLocation(556, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentSimplified"

	partial void EnterRule_qualifiedIdentList();
	partial void LeaveRule_qualifiedIdentList();
	// $ANTLR start "qualifiedIdentList"
	// Java.g:558:1: qualifiedIdentList : qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* ;
	[GrammarRule("qualifiedIdentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList()
	{
		EnterRule_qualifiedIdentList();
		EnterRule("qualifiedIdentList", 55);
		TraceIn("qualifiedIdentList", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA203 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA203_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentList");
		DebugLocation(558, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Java.g:559:5: ( qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* )
			DebugEnterAlt(1);
			// Java.g:559:9: qualifiedIdentifier ( COMMA ! qualifiedIdentifier )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(559, 9);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7579);
			qualifiedIdentifier202=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier202.Tree);
			DebugLocation(559, 29);
			// Java.g:559:29: ( COMMA ! qualifiedIdentifier )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==COMMA))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:559:30: COMMA ! qualifiedIdentifier
					{
					DebugLocation(559, 35);
					COMMA203=(IToken)Match(input,COMMA,Follow._COMMA_in_qualifiedIdentList7582); if (state.failed) return retval;
					DebugLocation(559, 37);
					PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7585);
					qualifiedIdentifier204=qualifiedIdentifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier204.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentList", 55);
			LeaveRule("qualifiedIdentList", 55);
			LeaveRule_qualifiedIdentList();
			if (state.backtracking > 0) { Memoize(input, 55, qualifiedIdentList_StartIndex); }

		}
		DebugLocation(560, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentList"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentList"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// Java.g:562:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
	[GrammarRule("formalParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 56);
		TraceIn("formalParameterList", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN205 = default(IToken);
		IToken COMMA207 = default(IToken);
		IToken COMMA209 = default(IToken);
		IToken RPAREN212 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN205_tree = default(CommonTree);
		CommonTree COMMA207_tree = default(CommonTree);
		CommonTree COMMA209_tree = default(CommonTree);
		CommonTree RPAREN212_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
		RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(562, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Java.g:563:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
			DebugEnterAlt(1);
			// Java.g:563:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
			{
			DebugLocation(563, 9);
			LPAREN205=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameterList7610); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN205);

			DebugLocation(564, 9);
			// Java.g:564:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
			int alt73=3;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred100_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred100_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred100_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred100_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RPAREN:
				{
				alt73 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:565:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
				{
				DebugLocation(565, 13);
				PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7638);
				formalParameterStandardDecl206=formalParameterStandardDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl206.Tree);
				DebugLocation(565, 41);
				// Java.g:565:41: ( COMMA formalParameterStandardDecl )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==COMMA))
					{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred97_Java_fragment)))
						{
							alt71 = 1;
						}


					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:565:42: COMMA formalParameterStandardDecl
						{
						DebugLocation(565, 42);
						COMMA207=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7641); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA207);

						DebugLocation(565, 48);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7643);
						formalParameterStandardDecl208=formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl208.Tree);

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(565, 78);
				// Java.g:565:78: ( COMMA formalParameterVarArgDecl )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_1 = input.LA(1);

				if ((LA72_1==COMMA))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:565:79: COMMA formalParameterVarArgDecl
					{
					DebugLocation(565, 79);
					COMMA209=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7648); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA209);

					DebugLocation(565, 85);
					PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7650);
					formalParameterVarArgDecl210=formalParameterVarArgDecl();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl210.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(72); }



				{
				// AST REWRITE
				// elements: formalParameterStandardDecl, formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 566:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
				{
					DebugLocation(566, 17);
					// Java.g:566:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(566, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(566, 67);
					if (!(stream_formalParameterStandardDecl.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_formalParameterStandardDecl.HasNext )
					{
						DebugLocation(566, 67);
						adaptor.AddChild(root_1, stream_formalParameterStandardDecl.NextTree());

					}
					stream_formalParameterStandardDecl.Reset();
					DebugLocation(566, 96);
					// Java.g:566:96: ( formalParameterVarArgDecl )?
					if (stream_formalParameterVarArgDecl.HasNext)
					{
						DebugLocation(566, 96);
						adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					}
					stream_formalParameterVarArgDecl.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:568:13: formalParameterVarArgDecl
				{
				DebugLocation(568, 13);
				PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7707);
				formalParameterVarArgDecl211=formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl211.Tree);


				{
				// AST REWRITE
				// elements: formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 569:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
				{
					DebugLocation(569, 17);
					// Java.g:569:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(569, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(569, 67);
					adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:571:13: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 571:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
				{
					DebugLocation(571, 17);
					// Java.g:571:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(571, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(573, 9);
			RPAREN212=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList7784); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN212);


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 56);
			LeaveRule("formalParameterList", 56);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 56, formalParameterList_StartIndex); }

		}
		DebugLocation(574, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// Java.g:576:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 57);
		TraceIn("formalParameterStandardDecl", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterStandardDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId215 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(576, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Java.g:577:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// Java.g:577:9: localModifierList type variableDeclaratorId
			{
			DebugLocation(577, 9);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl7807);
			localModifierList213=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList213.Tree);
			DebugLocation(577, 27);
			PushFollow(Follow._type_in_formalParameterStandardDecl7809);
			type214=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type214.Tree);
			DebugLocation(577, 32);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl7811);
			variableDeclaratorId215=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId215.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 578:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(578, 13);
				// Java.g:578:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(578, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

				DebugLocation(578, 37);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(578, 55);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(578, 60);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 57);
			LeaveRule("formalParameterStandardDecl", 57);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 57, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(579, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterVarArgDecl();
	partial void LeaveRule_formalParameterVarArgDecl();
	// $ANTLR start "formalParameterVarArgDecl"
	// Java.g:581:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarArgDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl()
	{
		EnterRule_formalParameterVarArgDecl();
		EnterRule("formalParameterVarArgDecl", 58);
		TraceIn("formalParameterVarArgDecl", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterVarArgDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ELLIPSIS218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ELLIPSIS218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ELLIPSIS=new RewriteRuleITokenStream(adaptor,"token ELLIPSIS");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "formalParameterVarArgDecl");
		DebugLocation(581, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Java.g:582:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// Java.g:582:9: localModifierList type ELLIPSIS variableDeclaratorId
			{
			DebugLocation(582, 9);
			PushFollow(Follow._localModifierList_in_formalParameterVarArgDecl7855);
			localModifierList216=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList216.Tree);
			DebugLocation(582, 27);
			PushFollow(Follow._type_in_formalParameterVarArgDecl7857);
			type217=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type217.Tree);
			DebugLocation(582, 32);
			ELLIPSIS218=(IToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_formalParameterVarArgDecl7859); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELLIPSIS.Add(ELLIPSIS218);

			DebugLocation(582, 41);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarArgDecl7861);
			variableDeclaratorId219=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId219.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 583:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(583, 13);
				// Java.g:583:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(583, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

				DebugLocation(583, 40);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(583, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(583, 63);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterVarArgDecl", 58);
			LeaveRule("formalParameterVarArgDecl", 58);
			LeaveRule_formalParameterVarArgDecl();
			if (state.backtracking > 0) { Memoize(input, 58, formalParameterVarArgDecl_StartIndex); }

		}
		DebugLocation(584, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarArgDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterVarArgDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// Java.g:586:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
	[GrammarRule("qualifiedIdentifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 59);
		TraceIn("qualifiedIdentifier", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken IDENT220 = default(IToken);
		IToken DOT221 = default(IToken);

		CommonTree ident_tree = default(CommonTree);
		CommonTree IDENT220_tree = default(CommonTree);
		CommonTree DOT221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(586, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Java.g:587:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
			DebugEnterAlt(1);
			// Java.g:587:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			{
			DebugLocation(587, 9);
			// Java.g:587:9: ( IDENT -> IDENT )
			DebugEnterAlt(1);
			// Java.g:587:13: IDENT
			{
			DebugLocation(587, 13);
			IDENT220=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier7909); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT220);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 587:33: -> IDENT
			{
				DebugLocation(587, 37);
				adaptor.AddChild(root_0, stream_IDENT.NextNode());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(589, 9);
			// Java.g:589:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==DOT))
				{
					int LA74_2 = input.LA(2);

					if ((LA74_2==IDENT))
					{
						int LA74_3 = input.LA(3);

						if ((EvaluatePredicate(synpred101_Java_fragment)))
						{
							alt74 = 1;
						}


					}


				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:589:13: DOT ident= IDENT
					{
					DebugLocation(589, 13);
					DOT221=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentifier7952); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT221);

					DebugLocation(589, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier7956); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(ident);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, ident
					// token labels: ident
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_ident=new RewriteRuleITokenStream(adaptor,"token ident",ident);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:33: -> ^( DOT $qualifiedIdentifier $ident)
					{
						DebugLocation(589, 37);
						// Java.g:589:37: ^( DOT $qualifiedIdentifier $ident)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(589, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(589, 65);
						adaptor.AddChild(root_1, stream_ident.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentifier", 59);
			LeaveRule("qualifiedIdentifier", 59);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 59, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(591, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// Java.g:595:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 60);
		TraceIn("annotationList", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotation222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(595, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// Java.g:596:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// Java.g:596:9: ( annotation )*
			{
			DebugLocation(596, 9);
			// Java.g:596:9: ( annotation )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==AT))
				{
					int LA75_2 = input.LA(2);

					if ((LA75_2==IDENT))
					{
						int LA75_3 = input.LA(3);

						if ((EvaluatePredicate(synpred102_Java_fragment)))
						{
							alt75 = 1;
						}


					}


				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:596:9: annotation
					{
					DebugLocation(596, 9);
					PushFollow(Follow._annotation_in_annotationList8009);
					annotation222=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotation.Add(annotation222.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }



			{
			// AST REWRITE
			// elements: annotation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 597:9: -> ^( ANNOTATION_LIST ( annotation )* )
			{
				DebugLocation(597, 13);
				// Java.g:597:13: ^( ANNOTATION_LIST ( annotation )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(597, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

				DebugLocation(597, 31);
				// Java.g:597:31: ( annotation )*
				while ( stream_annotation.HasNext )
				{
					DebugLocation(597, 31);
					adaptor.AddChild(root_1, stream_annotation.NextTree());

				}
				stream_annotation.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationList", 60);
			LeaveRule("annotationList", 60);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 60, annotationList_StartIndex); }

		}
		DebugLocation(598, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return retval;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// Java.g:600:1: annotation : AT ^ qualifiedIdentifier ( annotationInit )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 61);
		TraceIn("annotation", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInit225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT223_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(600, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// Java.g:601:5: ( AT ^ qualifiedIdentifier ( annotationInit )? )
			DebugEnterAlt(1);
			// Java.g:601:9: AT ^ qualifiedIdentifier ( annotationInit )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(601, 11);
			AT223=(IToken)Match(input,AT,Follow._AT_in_annotation8047); if (state.failed) return retval;
			if (state.backtracking == 0) {
			AT223_tree = (CommonTree)adaptor.Create(AT223);
			root_0 = (CommonTree)adaptor.BecomeRoot(AT223_tree, root_0);
			}
			DebugLocation(601, 13);
			PushFollow(Follow._qualifiedIdentifier_in_annotation8050);
			qualifiedIdentifier224=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier224.Tree);
			DebugLocation(601, 33);
			// Java.g:601:33: ( annotationInit )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==LPAREN))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:601:33: annotationInit
				{
				DebugLocation(601, 33);
				PushFollow(Follow._annotationInit_in_annotation8052);
				annotationInit225=annotationInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationInit225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 61);
			LeaveRule("annotation", 61);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 61, annotation_StartIndex); }

		}
		DebugLocation(602, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// Java.g:604:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
	[GrammarRule("annotationInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 62);
		TraceIn("annotationInit", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN226 = default(IToken);
		IToken RPAREN228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN226_tree = default(CommonTree);
		CommonTree RPAREN228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(604, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// Java.g:605:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
			DebugEnterAlt(1);
			// Java.g:605:9: LPAREN annotationInitializers RPAREN
			{
			DebugLocation(605, 9);
			LPAREN226=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationInit8076); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN226);

			DebugLocation(605, 16);
			PushFollow(Follow._annotationInitializers_in_annotationInit8078);
			annotationInitializers227=annotationInitializers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationInitializers.Add(annotationInitializers227.Tree);
			DebugLocation(605, 39);
			RPAREN228=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationInit8080); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN228);



			{
			// AST REWRITE
			// elements: annotationInitializers
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 606:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
			{
				DebugLocation(606, 13);
				// Java.g:606:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(606, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_BLOCK, LPAREN226, "ANNOTATION_INIT_BLOCK"), root_1);

				DebugLocation(606, 71);
				adaptor.AddChild(root_1, stream_annotationInitializers.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInit", 62);
			LeaveRule("annotationInit", 62);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 62, annotationInit_StartIndex); }

		}
		DebugLocation(607, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return retval;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// Java.g:609:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 63);
		TraceIn("annotationInitializers", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializers_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(609, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// Java.g:610:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_1 = input.LA(1);

			if ((LA78_1==IDENT))
			{
				int LA78_2 = input.LA(2);

				if ((LA78_2==ASSIGN))
				{
					alt78 = 1;
				}
				else if ((LA78_2==AND||LA78_2==BIT_SHIFT_RIGHT||LA78_2==DEC||LA78_2==DIV||LA78_2==DOT||LA78_2==EQUAL||(LA78_2>=GREATER_OR_EQUAL && LA78_2<=GREATER_THAN)||(LA78_2>=INC && LA78_2<=INSTANCEOF)||LA78_2==LBRACK||(LA78_2>=LESS_OR_EQUAL && LA78_2<=LESS_THAN)||LA78_2==LOGICAL_AND||LA78_2==LOGICAL_OR||LA78_2==LPAREN||LA78_2==MINUS||LA78_2==MOD||LA78_2==NOT_EQUAL||LA78_2==OR||LA78_2==PLUS||LA78_2==QUESTION||LA78_2==RPAREN||LA78_2==SHIFT_LEFT||LA78_2==SHIFT_RIGHT||LA78_2==STAR||LA78_2==XOR))
				{
					alt78 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA78_1==AT||LA78_1==BOOLEAN||LA78_1==BYTE||(LA78_1>=CHAR && LA78_1<=CHARACTER_LITERAL)||(LA78_1>=DEC && LA78_1<=DECIMAL_LITERAL)||LA78_1==DOUBLE||LA78_1==FALSE||(LA78_1>=FLOAT && LA78_1<=FLOATING_POINT_LITERAL)||LA78_1==HEX_LITERAL||LA78_1==INC||LA78_1==INT||LA78_1==LCURLY||LA78_1==LESS_THAN||LA78_1==LOGICAL_NOT||(LA78_1>=LONG && LA78_1<=LPAREN)||LA78_1==MINUS||(LA78_1>=NEW && LA78_1<=NOT)||LA78_1==NULL||LA78_1==OCTAL_LITERAL||LA78_1==PLUS||LA78_1==SHORT||(LA78_1>=STRING_LITERAL && LA78_1<=SUPER)||LA78_1==THIS||LA78_1==TRUE||LA78_1==VOID))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:610:9: annotationInitializer ( COMMA annotationInitializer )*
				{
				DebugLocation(610, 9);
				PushFollow(Follow._annotationInitializer_in_annotationInitializers8117);
				annotationInitializer229=annotationInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer229.Tree);
				DebugLocation(610, 31);
				// Java.g:610:31: ( COMMA annotationInitializer )*
				try { DebugEnterSubRule(77);
				while (true)
				{
					int alt77=2;
					try { DebugEnterDecision(77, false);
					int LA77_1 = input.LA(1);

					if ((LA77_1==COMMA))
					{
						alt77 = 1;
					}


					} finally { DebugExitDecision(77); }
					switch ( alt77 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:610:32: COMMA annotationInitializer
						{
						DebugLocation(610, 32);
						COMMA230=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationInitializers8120); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA230);

						DebugLocation(610, 38);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers8122);
						annotationInitializer231=annotationInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer231.Tree);

						}
						break;

					default:
						goto loop77;
					}
				}

				loop77:
					;

				} finally { DebugExitSubRule(77); }



				{
				// AST REWRITE
				// elements: annotationInitializer
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 611:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
					DebugLocation(611, 13);
					// Java.g:611:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(611, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

					DebugLocation(611, 40);
					if (!(stream_annotationInitializer.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_annotationInitializer.HasNext )
					{
						DebugLocation(611, 40);
						adaptor.AddChild(root_1, stream_annotationInitializer.NextTree());

					}
					stream_annotationInitializer.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:612:9: annotationElementValue
				{
				DebugLocation(612, 9);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers8152);
				annotationElementValue232=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue232.Tree);


				{
				// AST REWRITE
				// elements: annotationElementValue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 613:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
					DebugLocation(613, 13);
					// Java.g:613:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(613, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

					DebugLocation(613, 43);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializers", 63);
			LeaveRule("annotationInitializers", 63);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 63, annotationInitializers_StartIndex); }

		}
		DebugLocation(614, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return retval;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// Java.g:616:1: annotationInitializer : IDENT ^ ASSIGN ! annotationElementValue ;
	[GrammarRule("annotationInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 64);
		TraceIn("annotationInitializer", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT233 = default(IToken);
		IToken ASSIGN234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT233_tree = default(CommonTree);
		CommonTree ASSIGN234_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(616, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// Java.g:617:5: ( IDENT ^ ASSIGN ! annotationElementValue )
			DebugEnterAlt(1);
			// Java.g:617:9: IDENT ^ ASSIGN ! annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(617, 14);
			IDENT233=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationInitializer8193); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT233_tree = (CommonTree)adaptor.Create(IDENT233);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT233_tree, root_0);
			}
			DebugLocation(617, 22);
			ASSIGN234=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_annotationInitializer8196); if (state.failed) return retval;
			DebugLocation(617, 24);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer8199);
			annotationElementValue235=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue235.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializer", 64);
			LeaveRule("annotationInitializer", 64);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 64, annotationInitializer_StartIndex); }

		}
		DebugLocation(618, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// Java.g:620:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
	[GrammarRule("annotationElementValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 65);
		TraceIn("annotationElementValue", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotation237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer238 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(620, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// Java.g:621:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
			int alt79=3;
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INC:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt79 = 1;
				}
				break;
			case AT:
				{
				alt79 = 2;
				}
				break;
			case LCURLY:
				{
				alt79 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:621:9: annotationElementValueExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(621, 9);
				PushFollow(Follow._annotationElementValueExpression_in_annotationElementValue8222);
				annotationElementValueExpression236=annotationElementValueExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueExpression236.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:622:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(622, 9);
				PushFollow(Follow._annotation_in_annotationElementValue8232);
				annotation237=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation237.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:623:9: annotationElementValueArrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(623, 9);
				PushFollow(Follow._annotationElementValueArrayInitializer_in_annotationElementValue8242);
				annotationElementValueArrayInitializer238=annotationElementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueArrayInitializer238.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValue", 65);
			LeaveRule("annotationElementValue", 65);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 65, annotationElementValue_StartIndex); }

		}
		DebugLocation(624, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return retval;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationElementValueExpression();
	partial void LeaveRule_annotationElementValueExpression();
	// $ANTLR start "annotationElementValueExpression"
	// Java.g:626:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
	[GrammarRule("annotationElementValueExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression()
	{
		EnterRule_annotationElementValueExpression();
		EnterRule("annotationElementValueExpression", 66);
		TraceIn("annotationElementValueExpression", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueExpression");
		DebugLocation(626, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// Java.g:627:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
			DebugEnterAlt(1);
			// Java.g:627:9: conditionalExpression
			{
			DebugLocation(627, 9);
			PushFollow(Follow._conditionalExpression_in_annotationElementValueExpression8265);
			conditionalExpression239=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_conditionalExpression.Add(conditionalExpression239.Tree);


			{
			// AST REWRITE
			// elements: conditionalExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 628:9: -> ^( EXPR conditionalExpression )
			{
				DebugLocation(628, 13);
				// Java.g:628:13: ^( EXPR conditionalExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(628, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(628, 20);
				adaptor.AddChild(root_1, stream_conditionalExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueExpression", 66);
			LeaveRule("annotationElementValueExpression", 66);
			LeaveRule_annotationElementValueExpression();
			if (state.backtracking > 0) { Memoize(input, 66, annotationElementValueExpression_StartIndex); }

		}
		DebugLocation(629, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueExpression"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueExpression"

	partial void EnterRule_annotationElementValueArrayInitializer();
	partial void LeaveRule_annotationElementValueArrayInitializer();
	// $ANTLR start "annotationElementValueArrayInitializer"
	// Java.g:631:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
	[GrammarRule("annotationElementValueArrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer()
	{
		EnterRule_annotationElementValueArrayInitializer();
		EnterRule("annotationElementValueArrayInitializer", 67);
		TraceIn("annotationElementValueArrayInitializer", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueArrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY240 = default(IToken);
		IToken COMMA242 = default(IToken);
		IToken COMMA244 = default(IToken);
		IToken RCURLY245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY240_tree = default(CommonTree);
		CommonTree COMMA242_tree = default(CommonTree);
		CommonTree COMMA244_tree = default(CommonTree);
		CommonTree RCURLY245_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueArrayInitializer");
		DebugLocation(631, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// Java.g:632:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
			DebugEnterAlt(1);
			// Java.g:632:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
			{
			DebugLocation(632, 9);
			LCURLY240=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationElementValueArrayInitializer8305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY240);

			DebugLocation(632, 16);
			// Java.g:632:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_1 = input.LA(1);

			if ((LA81_1==AT||LA81_1==BOOLEAN||LA81_1==BYTE||(LA81_1>=CHAR && LA81_1<=CHARACTER_LITERAL)||(LA81_1>=DEC && LA81_1<=DECIMAL_LITERAL)||LA81_1==DOUBLE||LA81_1==FALSE||(LA81_1>=FLOAT && LA81_1<=FLOATING_POINT_LITERAL)||(LA81_1>=HEX_LITERAL && LA81_1<=IDENT)||LA81_1==INC||LA81_1==INT||LA81_1==LCURLY||LA81_1==LESS_THAN||LA81_1==LOGICAL_NOT||(LA81_1>=LONG && LA81_1<=LPAREN)||LA81_1==MINUS||(LA81_1>=NEW && LA81_1<=NOT)||LA81_1==NULL||LA81_1==OCTAL_LITERAL||LA81_1==PLUS||LA81_1==SHORT||(LA81_1>=STRING_LITERAL && LA81_1<=SUPER)||LA81_1==THIS||LA81_1==TRUE||LA81_1==VOID))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:632:17: annotationElementValue ( COMMA annotationElementValue )*
				{
				DebugLocation(632, 17);
				PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8308);
				annotationElementValue241=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue241.Tree);
				DebugLocation(632, 40);
				// Java.g:632:40: ( COMMA annotationElementValue )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_1 = input.LA(1);

					if ((LA80_1==COMMA))
					{
						int LA80_2 = input.LA(2);

						if ((LA80_2==AT||LA80_2==BOOLEAN||LA80_2==BYTE||(LA80_2>=CHAR && LA80_2<=CHARACTER_LITERAL)||(LA80_2>=DEC && LA80_2<=DECIMAL_LITERAL)||LA80_2==DOUBLE||LA80_2==FALSE||(LA80_2>=FLOAT && LA80_2<=FLOATING_POINT_LITERAL)||(LA80_2>=HEX_LITERAL && LA80_2<=IDENT)||LA80_2==INC||LA80_2==INT||LA80_2==LCURLY||LA80_2==LESS_THAN||LA80_2==LOGICAL_NOT||(LA80_2>=LONG && LA80_2<=LPAREN)||LA80_2==MINUS||(LA80_2>=NEW && LA80_2<=NOT)||LA80_2==NULL||LA80_2==OCTAL_LITERAL||LA80_2==PLUS||LA80_2==SHORT||(LA80_2>=STRING_LITERAL && LA80_2<=SUPER)||LA80_2==THIS||LA80_2==TRUE||LA80_2==VOID))
						{
							alt80 = 1;
						}


					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:632:41: COMMA annotationElementValue
						{
						DebugLocation(632, 41);
						COMMA242=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8311); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA242);

						DebugLocation(632, 47);
						PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8313);
						annotationElementValue243=annotationElementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue243.Tree);

						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(632, 74);
			// Java.g:632:74: ( COMMA )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_1 = input.LA(1);

			if ((LA82_1==COMMA))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:632:75: COMMA
				{
				DebugLocation(632, 75);
				COMMA244=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8320); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA244);


				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(632, 83);
			RCURLY245=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationElementValueArrayInitializer8324); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY245);



			{
			// AST REWRITE
			// elements: annotationElementValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 633:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
			{
				DebugLocation(633, 13);
				// Java.g:633:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(633, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY240, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

				DebugLocation(633, 90);
				// Java.g:633:90: ( annotationElementValue )*
				while ( stream_annotationElementValue.HasNext )
				{
					DebugLocation(633, 90);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

				}
				stream_annotationElementValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueArrayInitializer", 67);
			LeaveRule("annotationElementValueArrayInitializer", 67);
			LeaveRule_annotationElementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(634, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// Java.g:636:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 68);
		TraceIn("annotationTypeDeclaration", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT246 = default(IToken);
		IToken INTERFACE247 = default(IToken);
		IToken IDENT248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationBody249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT246_tree = default(CommonTree);
		CommonTree INTERFACE247_tree = default(CommonTree);
		CommonTree IDENT248_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AT=new RewriteRuleITokenStream(adaptor,"token AT");
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(636, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// Java.g:637:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
			DebugEnterAlt(1);
			// Java.g:637:9: AT INTERFACE IDENT annotationBody
			{
			DebugLocation(637, 9);
			AT246=(IToken)Match(input,AT,Follow._AT_in_annotationTypeDeclaration8367); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AT.Add(AT246);

			DebugLocation(637, 12);
			INTERFACE247=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration8369); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE247);

			DebugLocation(637, 22);
			IDENT248=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationTypeDeclaration8371); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT248);

			DebugLocation(637, 28);
			PushFollow(Follow._annotationBody_in_annotationTypeDeclaration8373);
			annotationBody249=annotationBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationBody.Add(annotationBody249.Tree);


			{
			// AST REWRITE
			// elements: AT, IDENT, annotationBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 638:9: -> ^( AT IDENT annotationBody )
			{
				DebugLocation(638, 12);
				// Java.g:638:12: ^( AT IDENT annotationBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(638, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_AT.NextNode(), root_1);

				DebugLocation(638, 17);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(638, 30);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(638, 36);
				adaptor.AddChild(root_1, stream_annotationBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 68);
			LeaveRule("annotationTypeDeclaration", 68);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 68, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(639, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationBody();
	partial void LeaveRule_annotationBody();
	// $ANTLR start "annotationBody"
	// Java.g:641:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationBody()
	{
		EnterRule_annotationBody();
		EnterRule("annotationBody", 69);
		TraceIn("annotationBody", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY250 = default(IToken);
		IToken RCURLY252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations251 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY250_tree = default(CommonTree);
		CommonTree RCURLY252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "annotationBody");
		DebugLocation(641, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// Java.g:642:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// Java.g:642:9: LCURLY ( annotationScopeDeclarations )* RCURLY
			{
			DebugLocation(642, 9);
			LCURLY250=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationBody8416); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY250);

			DebugLocation(642, 16);
			// Java.g:642:16: ( annotationScopeDeclarations )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_1 = input.LA(1);

				if ((LA83_1==ABSTRACT||LA83_1==AT||LA83_1==BOOLEAN||LA83_1==BYTE||LA83_1==CHAR||LA83_1==CLASS||LA83_1==DOUBLE||LA83_1==ENUM||LA83_1==FINAL||LA83_1==FLOAT||LA83_1==IDENT||LA83_1==INT||LA83_1==INTERFACE||LA83_1==LESS_THAN||LA83_1==LONG||LA83_1==NATIVE||(LA83_1>=PRIVATE && LA83_1<=PUBLIC)||LA83_1==SHORT||LA83_1==STATIC||LA83_1==STRICTFP||LA83_1==SYNCHRONIZED||LA83_1==TRANSIENT||LA83_1==VOID||LA83_1==VOLATILE))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:642:16: annotationScopeDeclarations
					{
					DebugLocation(642, 16);
					PushFollow(Follow._annotationScopeDeclarations_in_annotationBody8418);
					annotationScopeDeclarations251=annotationScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotationScopeDeclarations.Add(annotationScopeDeclarations251.Tree);

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }

			DebugLocation(642, 45);
			RCURLY252=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationBody8421); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY252);



			{
			// AST REWRITE
			// elements: annotationScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 643:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
			{
				DebugLocation(643, 13);
				// Java.g:643:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(643, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY250, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(643, 76);
				// Java.g:643:76: ( annotationScopeDeclarations )*
				while ( stream_annotationScopeDeclarations.HasNext )
				{
					DebugLocation(643, 76);
					adaptor.AddChild(root_1, stream_annotationScopeDeclarations.NextTree());

				}
				stream_annotationScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationBody", 69);
			LeaveRule("annotationBody", 69);
			LeaveRule_annotationBody();
			if (state.backtracking > 0) { Memoize(input, 69, annotationBody_StartIndex); }

		}
		DebugLocation(644, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationBody"); }
		return retval;

	}
	// $ANTLR end "annotationBody"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// Java.g:646:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 70);
		TraceIn("annotationScopeDeclarations", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT255 = default(IToken);
		IToken LPAREN256 = default(IToken);
		IToken RPAREN257 = default(IToken);
		IToken SEMI259 = default(IToken);
		IToken SEMI261 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList260 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration262 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT255_tree = default(CommonTree);
		CommonTree LPAREN256_tree = default(CommonTree);
		CommonTree RPAREN257_tree = default(CommonTree);
		CommonTree SEMI259_tree = default(CommonTree);
		CommonTree SEMI261_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(646, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// Java.g:647:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
			int alt86=2;
			try { DebugEnterDecision(86, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred114_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt86 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt86 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:647:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(647, 9);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations8463);
				modifierList253=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList253.Tree);
				DebugLocation(647, 22);
				PushFollow(Follow._type_in_annotationScopeDeclarations8465);
				type254=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type254.Tree);
				DebugLocation(648, 9);
				// Java.g:648:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==IDENT))
				{
					int LA85_2 = input.LA(2);

					if ((LA85_2==LPAREN))
					{
						alt85 = 1;
					}
					else if ((LA85_2==ASSIGN||LA85_2==COMMA||LA85_2==LBRACK||LA85_2==SEMI))
					{
						alt85 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 85, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:648:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
					{
					DebugLocation(648, 13);
					IDENT255=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations8479); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT255);

					DebugLocation(648, 19);
					LPAREN256=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationScopeDeclarations8481); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN256);

					DebugLocation(648, 26);
					RPAREN257=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationScopeDeclarations8483); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN257);

					DebugLocation(648, 33);
					// Java.g:648:33: ( annotationDefaultValue )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, false);
					int LA84_1 = input.LA(1);

					if ((LA84_1==DEFAULT))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:648:33: annotationDefaultValue
						{
						DebugLocation(648, 33);
						PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations8485);
						annotationDefaultValue258=annotationDefaultValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationDefaultValue.Add(annotationDefaultValue258.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(648, 57);
					SEMI259=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8488); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI259);



					{
					// AST REWRITE
					// elements: modifierList, type, IDENT, annotationDefaultValue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 649:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
					{
						DebugLocation(649, 17);
						// Java.g:649:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(649, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

						DebugLocation(649, 42);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(649, 55);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(649, 60);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(649, 66);
						// Java.g:649:66: ( annotationDefaultValue )?
						if (stream_annotationDefaultValue.HasNext)
						{
							DebugLocation(649, 66);
							adaptor.AddChild(root_1, stream_annotationDefaultValue.NextTree());

						}
						stream_annotationDefaultValue.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:650:13: classFieldDeclaratorList SEMI
					{
					DebugLocation(650, 13);
					PushFollow(Follow._classFieldDeclaratorList_in_annotationScopeDeclarations8530);
					classFieldDeclaratorList260=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList260.Tree);
					DebugLocation(650, 38);
					SEMI261=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8532); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI261);



					{
					// AST REWRITE
					// elements: modifierList, type, classFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 651:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(651, 17);
						// Java.g:651:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(651, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(651, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(651, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(651, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(85); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:653:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(653, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations8577);
				typeDeclaration262=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration262.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 70);
			LeaveRule("annotationScopeDeclarations", 70);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 70, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(654, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// Java.g:656:1: annotationDefaultValue : DEFAULT ^ annotationElementValue ;
	[GrammarRule("annotationDefaultValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 71);
		TraceIn("annotationDefaultValue", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationDefaultValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT263_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(656, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// Java.g:657:5: ( DEFAULT ^ annotationElementValue )
			DebugEnterAlt(1);
			// Java.g:657:9: DEFAULT ^ annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(657, 16);
			DEFAULT263=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue8600); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT263_tree = (CommonTree)adaptor.Create(DEFAULT263);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT263_tree, root_0);
			}
			DebugLocation(657, 18);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue8603);
			annotationElementValue264=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue264.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationDefaultValue", 71);
			LeaveRule("annotationDefaultValue", 71);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 71, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(658, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return retval;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Java.g:662:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 72);
		TraceIn("block", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY265 = default(IToken);
		IToken RCURLY267 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement266 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY265_tree = default(CommonTree);
		CommonTree RCURLY267_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(662, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// Java.g:663:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
			DebugEnterAlt(1);
			// Java.g:663:9: LCURLY ( blockStatement )* RCURLY
			{
			DebugLocation(663, 9);
			LCURLY265=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block8624); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY265);

			DebugLocation(663, 16);
			// Java.g:663:16: ( blockStatement )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==ABSTRACT||LA87_1==ASSERT||LA87_1==AT||(LA87_1>=BOOLEAN && LA87_1<=BYTE)||(LA87_1>=CHAR && LA87_1<=CLASS)||(LA87_1>=CONTINUE && LA87_1<=DECIMAL_LITERAL)||LA87_1==DO||LA87_1==DOUBLE||LA87_1==ENUM||(LA87_1>=FALSE && LA87_1<=FINAL)||(LA87_1>=FLOAT && LA87_1<=FLOATING_POINT_LITERAL)||LA87_1==FOR||(LA87_1>=HEX_LITERAL && LA87_1<=IF)||LA87_1==INC||LA87_1==INT||LA87_1==INTERFACE||LA87_1==LCURLY||LA87_1==LESS_THAN||LA87_1==LOGICAL_NOT||(LA87_1>=LONG && LA87_1<=LPAREN)||LA87_1==MINUS||(LA87_1>=NATIVE && LA87_1<=NOT)||LA87_1==NULL||LA87_1==OCTAL_LITERAL||LA87_1==PLUS||(LA87_1>=PRIVATE && LA87_1<=PUBLIC)||LA87_1==RETURN||LA87_1==SEMI||LA87_1==SHORT||LA87_1==STATIC||(LA87_1>=STRICTFP && LA87_1<=SUPER)||LA87_1==SWITCH||(LA87_1>=SYNCHRONIZED && LA87_1<=THIS)||LA87_1==THROW||(LA87_1>=TRANSIENT && LA87_1<=TRY)||LA87_1==VOID||(LA87_1>=VOLATILE && LA87_1<=WHILE)))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:663:16: blockStatement
					{
					DebugLocation(663, 16);
					PushFollow(Follow._blockStatement_in_block8626);
					blockStatement266=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_blockStatement.Add(blockStatement266.Tree);

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(663, 32);
			RCURLY267=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block8629); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY267);



			{
			// AST REWRITE
			// elements: blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 664:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
			{
				DebugLocation(664, 13);
				// Java.g:664:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(664, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK_SCOPE, LCURLY265, "BLOCK_SCOPE"), root_1);

				DebugLocation(664, 51);
				// Java.g:664:51: ( blockStatement )*
				while ( stream_blockStatement.HasNext )
				{
					DebugLocation(664, 51);
					adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				}
				stream_blockStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 72);
			LeaveRule("block", 72);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 72, block_StartIndex); }

		}
		DebugLocation(665, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// Java.g:667:1: blockStatement : ( localVariableDeclaration SEMI !| typeDeclaration | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 73);
		TraceIn("blockStatement", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI269_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(667, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// Java.g:668:5: ( localVariableDeclaration SEMI !| typeDeclaration | statement )
			int alt88=3;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred116_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred116_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred116_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred116_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt88 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((true))
				{
					alt88 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ASSERT:
			case BREAK:
			case CHARACTER_LITERAL:
			case CONTINUE:
			case DEC:
			case DECIMAL_LITERAL:
			case DO:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case FOR:
			case HEX_LITERAL:
			case IF:
			case INC:
			case LCURLY:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case RETURN:
			case SEMI:
			case STRING_LITERAL:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt88 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:668:9: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(668, 9);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement8667);
				localVariableDeclaration268=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration268.Tree);
				DebugLocation(668, 38);
				SEMI269=(IToken)Match(input,SEMI,Follow._SEMI_in_blockStatement8669); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:669:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(669, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement8680);
				typeDeclaration270=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration270.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:670:9: statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(670, 9);
				PushFollow(Follow._statement_in_blockStatement8690);
				statement271=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement271.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 73);
			LeaveRule("blockStatement", 73);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 73, blockStatement_StartIndex); }

		}
		DebugLocation(671, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// Java.g:673:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 74);
		TraceIn("localVariableDeclaration", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList274 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(673, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// Java.g:674:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
			DebugEnterAlt(1);
			// Java.g:674:9: localModifierList type classFieldDeclaratorList
			{
			DebugLocation(674, 9);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration8713);
			localModifierList272=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList272.Tree);
			DebugLocation(674, 27);
			PushFollow(Follow._type_in_localVariableDeclaration8715);
			type273=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type273.Tree);
			DebugLocation(674, 32);
			PushFollow(Follow._classFieldDeclaratorList_in_localVariableDeclaration8717);
			classFieldDeclaratorList274=classFieldDeclaratorList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList274.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, classFieldDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 675:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
			{
				DebugLocation(675, 13);
				// Java.g:675:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(675, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

				DebugLocation(675, 31);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(675, 49);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(675, 54);
				adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 74);
			LeaveRule("localVariableDeclaration", 74);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 74, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(676, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Java.g:679:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI !| SEMI );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 75);
		TraceIn("statement", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSERT276 = default(IToken);
		IToken COLON277 = default(IToken);
		IToken SEMI278 = default(IToken);
		IToken SEMI279 = default(IToken);
		IToken IF280 = default(IToken);
		IToken ELSE282 = default(IToken);
		IToken FOR283 = default(IToken);
		IToken LPAREN284 = default(IToken);
		IToken SEMI286 = default(IToken);
		IToken SEMI288 = default(IToken);
		IToken RPAREN290 = default(IToken);
		IToken IDENT294 = default(IToken);
		IToken COLON295 = default(IToken);
		IToken RPAREN297 = default(IToken);
		IToken WHILE299 = default(IToken);
		IToken DO302 = default(IToken);
		IToken WHILE304 = default(IToken);
		IToken SEMI306 = default(IToken);
		IToken TRY307 = default(IToken);
		IToken SWITCH312 = default(IToken);
		IToken LCURLY314 = default(IToken);
		IToken RCURLY316 = default(IToken);
		IToken SYNCHRONIZED317 = default(IToken);
		IToken RETURN320 = default(IToken);
		IToken SEMI322 = default(IToken);
		IToken THROW323 = default(IToken);
		IToken SEMI325 = default(IToken);
		IToken BREAK326 = default(IToken);
		IToken IDENT327 = default(IToken);
		IToken SEMI328 = default(IToken);
		IToken CONTINUE329 = default(IToken);
		IToken IDENT330 = default(IToken);
		IToken SEMI331 = default(IToken);
		IToken IDENT332 = default(IToken);
		IToken COLON333 = default(IToken);
		IToken SEMI336 = default(IToken);
		IToken SEMI337 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forInit285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forCondition287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forUpdater289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList292 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> catches309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression335 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSERT276_tree = default(CommonTree);
		CommonTree COLON277_tree = default(CommonTree);
		CommonTree SEMI278_tree = default(CommonTree);
		CommonTree SEMI279_tree = default(CommonTree);
		CommonTree IF280_tree = default(CommonTree);
		CommonTree ELSE282_tree = default(CommonTree);
		CommonTree FOR283_tree = default(CommonTree);
		CommonTree LPAREN284_tree = default(CommonTree);
		CommonTree SEMI286_tree = default(CommonTree);
		CommonTree SEMI288_tree = default(CommonTree);
		CommonTree RPAREN290_tree = default(CommonTree);
		CommonTree IDENT294_tree = default(CommonTree);
		CommonTree COLON295_tree = default(CommonTree);
		CommonTree RPAREN297_tree = default(CommonTree);
		CommonTree WHILE299_tree = default(CommonTree);
		CommonTree DO302_tree = default(CommonTree);
		CommonTree WHILE304_tree = default(CommonTree);
		CommonTree SEMI306_tree = default(CommonTree);
		CommonTree TRY307_tree = default(CommonTree);
		CommonTree SWITCH312_tree = default(CommonTree);
		CommonTree LCURLY314_tree = default(CommonTree);
		CommonTree RCURLY316_tree = default(CommonTree);
		CommonTree SYNCHRONIZED317_tree = default(CommonTree);
		CommonTree RETURN320_tree = default(CommonTree);
		CommonTree SEMI322_tree = default(CommonTree);
		CommonTree THROW323_tree = default(CommonTree);
		CommonTree SEMI325_tree = default(CommonTree);
		CommonTree BREAK326_tree = default(CommonTree);
		CommonTree IDENT327_tree = default(CommonTree);
		CommonTree SEMI328_tree = default(CommonTree);
		CommonTree CONTINUE329_tree = default(CommonTree);
		CommonTree IDENT330_tree = default(CommonTree);
		CommonTree SEMI331_tree = default(CommonTree);
		CommonTree IDENT332_tree = default(CommonTree);
		CommonTree COLON333_tree = default(CommonTree);
		CommonTree SEMI336_tree = default(CommonTree);
		CommonTree SEMI337_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSERT=new RewriteRuleITokenStream(adaptor,"token ASSERT");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_DO=new RewriteRuleITokenStream(adaptor,"token DO");
		RewriteRuleITokenStream stream_TRY=new RewriteRuleITokenStream(adaptor,"token TRY");
		RewriteRuleITokenStream stream_SWITCH=new RewriteRuleITokenStream(adaptor,"token SWITCH");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleITokenStream stream_SYNCHRONIZED=new RewriteRuleITokenStream(adaptor,"token SYNCHRONIZED");
		RewriteRuleITokenStream stream_RETURN=new RewriteRuleITokenStream(adaptor,"token RETURN");
		RewriteRuleITokenStream stream_THROW=new RewriteRuleITokenStream(adaptor,"token THROW");
		RewriteRuleITokenStream stream_BREAK=new RewriteRuleITokenStream(adaptor,"token BREAK");
		RewriteRuleITokenStream stream_CONTINUE=new RewriteRuleITokenStream(adaptor,"token CONTINUE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
		RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
		RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
		RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(679, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// Java.g:680:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI !| SEMI )
			int alt97=16;
			try { DebugEnterDecision(97, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt97 = 1;
				}
				break;
			case ASSERT:
				{
				alt97 = 2;
				}
				break;
			case IF:
				{
				alt97 = 3;
				}
				break;
			case FOR:
				{
				alt97 = 4;
				}
				break;
			case WHILE:
				{
				alt97 = 5;
				}
				break;
			case DO:
				{
				alt97 = 6;
				}
				break;
			case TRY:
				{
				alt97 = 7;
				}
				break;
			case SWITCH:
				{
				alt97 = 8;
				}
				break;
			case SYNCHRONIZED:
				{
				alt97 = 9;
				}
				break;
			case RETURN:
				{
				alt97 = 10;
				}
				break;
			case THROW:
				{
				alt97 = 11;
				}
				break;
			case BREAK:
				{
				alt97 = 12;
				}
				break;
			case CONTINUE:
				{
				alt97 = 13;
				}
				break;
			case IDENT:
				{
				int LA97_2 = input.LA(2);

				if ((LA97_2==COLON))
				{
					alt97 = 14;
				}
				else if (((LA97_2>=AND && LA97_2<=AND_ASSIGN)||LA97_2==ASSIGN||(LA97_2>=BIT_SHIFT_RIGHT && LA97_2<=BIT_SHIFT_RIGHT_ASSIGN)||LA97_2==DEC||(LA97_2>=DIV && LA97_2<=DIV_ASSIGN)||LA97_2==DOT||LA97_2==EQUAL||(LA97_2>=GREATER_OR_EQUAL && LA97_2<=GREATER_THAN)||(LA97_2>=INC && LA97_2<=INSTANCEOF)||LA97_2==LBRACK||(LA97_2>=LESS_OR_EQUAL && LA97_2<=LESS_THAN)||LA97_2==LOGICAL_AND||LA97_2==LOGICAL_OR||LA97_2==LPAREN||(LA97_2>=MINUS && LA97_2<=MOD)||LA97_2==MOD_ASSIGN||LA97_2==NOT_EQUAL||(LA97_2>=OR && LA97_2<=OR_ASSIGN)||(LA97_2>=PLUS && LA97_2<=PLUS_ASSIGN)||LA97_2==QUESTION||(LA97_2>=SEMI && LA97_2<=SHIFT_RIGHT_ASSIGN)||(LA97_2>=STAR && LA97_2<=STAR_ASSIGN)||(LA97_2>=XOR && LA97_2<=XOR_ASSIGN)))
				{
					alt97 = 15;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case INC:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt97 = 15;
				}
				break;
			case SEMI:
				{
				alt97 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:680:9: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(680, 9);
				PushFollow(Follow._block_in_statement8770);
				block275=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block275.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:681:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
				{
				DebugLocation(681, 9);
				ASSERT276=(IToken)Match(input,ASSERT,Follow._ASSERT_in_statement8780); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASSERT.Add(ASSERT276);

				DebugLocation(681, 21);
				PushFollow(Follow._expression_in_statement8784);
				expr1=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expr1.Tree);
				DebugLocation(682, 9);
				// Java.g:682:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==COLON))
				{
					alt89 = 1;
				}
				else if ((LA89_1==SEMI))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:682:13: COLON expr2= expression SEMI
					{
					DebugLocation(682, 13);
					COLON277=(IToken)Match(input,COLON,Follow._COLON_in_statement8799); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COLON.Add(COLON277);

					DebugLocation(682, 24);
					PushFollow(Follow._expression_in_statement8803);
					expr2=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expr2.Tree);
					DebugLocation(682, 36);
					SEMI278=(IToken)Match(input,SEMI,Follow._SEMI_in_statement8805); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI278);



					{
					// AST REWRITE
					// elements: ASSERT, expr1, expr2
					// token labels: 
					// rule labels: expr1, expr2, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.Tree:null);
					RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 682:77: -> ^( ASSERT $expr1 $expr2)
					{
						DebugLocation(682, 81);
						// Java.g:682:81: ^( ASSERT $expr1 $expr2)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(682, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_ASSERT.NextNode(), root_1);

						DebugLocation(682, 91);
						adaptor.AddChild(root_1, stream_expr1.NextTree());
						DebugLocation(682, 98);
						adaptor.AddChild(root_1, stream_expr2.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:683:13: SEMI
					{
					DebugLocation(683, 13);
					SEMI279=(IToken)Match(input,SEMI,Follow._SEMI_in_statement8868); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI279);



					{
					// AST REWRITE
					// elements: ASSERT, expr1
					// token labels: 
					// rule labels: expr1, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 683:77: -> ^( ASSERT $expr1)
					{
						DebugLocation(683, 81);
						// Java.g:683:81: ^( ASSERT $expr1)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(683, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_ASSERT.NextNode(), root_1);

						DebugLocation(683, 91);
						adaptor.AddChild(root_1, stream_expr1.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:685:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
				{
				DebugLocation(685, 9);
				IF280=(IToken)Match(input,IF,Follow._IF_in_statement8957); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF280);

				DebugLocation(685, 12);
				PushFollow(Follow._parenthesizedExpression_in_statement8959);
				parenthesizedExpression281=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression281.Tree);
				DebugLocation(685, 42);
				PushFollow(Follow._statement_in_statement8963);
				ifStat=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(ifStat.Tree);
				DebugLocation(686, 9);
				// Java.g:686:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==ELSE))
				{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred121_Java_fragment)))
					{
						alt90 = 1;
					}
					else if ((true))
					{
						alt90 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA90_1==EOF||LA90_1==ABSTRACT||LA90_1==ASSERT||LA90_1==AT||(LA90_1>=BOOLEAN && LA90_1<=CASE)||(LA90_1>=CHAR && LA90_1<=CLASS)||(LA90_1>=CONTINUE && LA90_1<=DEFAULT)||LA90_1==DO||LA90_1==DOUBLE||LA90_1==ENUM||(LA90_1>=FALSE && LA90_1<=FINAL)||(LA90_1>=FLOAT && LA90_1<=FLOATING_POINT_LITERAL)||LA90_1==FOR||(LA90_1>=HEX_LITERAL && LA90_1<=IF)||LA90_1==INC||LA90_1==INT||LA90_1==INTERFACE||LA90_1==LCURLY||LA90_1==LESS_THAN||LA90_1==LOGICAL_NOT||(LA90_1>=LONG && LA90_1<=LPAREN)||LA90_1==MINUS||(LA90_1>=NATIVE && LA90_1<=NOT)||LA90_1==NULL||LA90_1==OCTAL_LITERAL||LA90_1==PLUS||(LA90_1>=PRIVATE && LA90_1<=PUBLIC)||(LA90_1>=RCURLY && LA90_1<=RETURN)||LA90_1==SEMI||LA90_1==SHORT||LA90_1==STATIC||(LA90_1>=STRICTFP && LA90_1<=SUPER)||LA90_1==SWITCH||(LA90_1>=SYNCHRONIZED && LA90_1<=THIS)||LA90_1==THROW||(LA90_1>=TRANSIENT && LA90_1<=TRY)||LA90_1==VOID||(LA90_1>=VOLATILE && LA90_1<=WHILE)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:686:13: ELSE elseStat= statement
					{
					DebugLocation(686, 13);
					ELSE282=(IToken)Match(input,ELSE,Follow._ELSE_in_statement8978); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE282);

					DebugLocation(686, 26);
					PushFollow(Follow._statement_in_statement8982);
					elseStat=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(elseStat.Tree);


					{
					// AST REWRITE
					// elements: IF, parenthesizedExpression, ifStat, elseStat
					// token labels: 
					// rule labels: ifStat, elseStat, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
					RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 686:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
					{
						DebugLocation(686, 81);
						// Java.g:686:81: ^( IF parenthesizedExpression $ifStat $elseStat)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(686, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(686, 86);
						adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
						DebugLocation(686, 111);
						adaptor.AddChild(root_1, stream_ifStat.NextTree());
						DebugLocation(686, 119);
						adaptor.AddChild(root_1, stream_elseStat.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:687:77: 
					{

					{
					// AST REWRITE
					// elements: IF, parenthesizedExpression, ifStat
					// token labels: 
					// rule labels: ifStat, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 687:77: -> ^( IF parenthesizedExpression $ifStat)
					{
						DebugLocation(687, 81);
						// Java.g:687:81: ^( IF parenthesizedExpression $ifStat)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(687, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(687, 86);
						adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
						DebugLocation(687, 111);
						adaptor.AddChild(root_1, stream_ifStat.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:689:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
				{
				DebugLocation(689, 9);
				FOR283=(IToken)Match(input,FOR,Follow._FOR_in_statement9148); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FOR.Add(FOR283);

				DebugLocation(689, 13);
				LPAREN284=(IToken)Match(input,LPAREN,Follow._LPAREN_in_statement9150); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN284);

				DebugLocation(690, 9);
				// Java.g:690:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				switch (input.LA(1))
				{
				case FINAL:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred123_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case AT:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred123_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred123_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred123_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DEC:
				case DECIMAL_LITERAL:
				case FALSE:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case INC:
				case LESS_THAN:
				case LOGICAL_NOT:
				case LPAREN:
				case MINUS:
				case NEW:
				case NOT:
				case NULL:
				case OCTAL_LITERAL:
				case PLUS:
				case SEMI:
				case STRING_LITERAL:
				case SUPER:
				case THIS:
				case TRUE:
				case VOID:
					{
					alt91 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:690:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
					{
					DebugLocation(690, 13);
					PushFollow(Follow._forInit_in_statement9165);
					forInit285=forInit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forInit.Add(forInit285.Tree);
					DebugLocation(690, 21);
					SEMI286=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9167); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI286);

					DebugLocation(690, 26);
					PushFollow(Follow._forCondition_in_statement9169);
					forCondition287=forCondition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forCondition.Add(forCondition287.Tree);
					DebugLocation(690, 39);
					SEMI288=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9171); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI288);

					DebugLocation(690, 44);
					PushFollow(Follow._forUpdater_in_statement9173);
					forUpdater289=forUpdater();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forUpdater.Add(forUpdater289.Tree);
					DebugLocation(690, 55);
					RPAREN290=(IToken)Match(input,RPAREN,Follow._RPAREN_in_statement9175); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN290);

					DebugLocation(690, 62);
					PushFollow(Follow._statement_in_statement9177);
					statement291=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement291.Tree);


					{
					// AST REWRITE
					// elements: FOR, forInit, forCondition, forUpdater, statement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:77: -> ^( FOR forInit forCondition forUpdater statement )
					{
						DebugLocation(690, 81);
						// Java.g:690:81: ^( FOR forInit forCondition forUpdater statement )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_FOR.NextNode(), root_1);

						DebugLocation(690, 87);
						adaptor.AddChild(root_1, stream_forInit.NextTree());
						DebugLocation(690, 95);
						adaptor.AddChild(root_1, stream_forCondition.NextTree());
						DebugLocation(690, 108);
						adaptor.AddChild(root_1, stream_forUpdater.NextTree());
						DebugLocation(690, 119);
						adaptor.AddChild(root_1, stream_statement.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:691:13: localModifierList type IDENT COLON expression RPAREN statement
					{
					DebugLocation(691, 13);
					PushFollow(Follow._localModifierList_in_statement9212);
					localModifierList292=localModifierList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifierList.Add(localModifierList292.Tree);
					DebugLocation(691, 31);
					PushFollow(Follow._type_in_statement9214);
					type293=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type293.Tree);
					DebugLocation(691, 36);
					IDENT294=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9216); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT294);

					DebugLocation(691, 42);
					COLON295=(IToken)Match(input,COLON,Follow._COLON_in_statement9218); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COLON.Add(COLON295);

					DebugLocation(691, 48);
					PushFollow(Follow._expression_in_statement9220);
					expression296=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression296.Tree);
					DebugLocation(691, 59);
					RPAREN297=(IToken)Match(input,RPAREN,Follow._RPAREN_in_statement9222); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN297);

					DebugLocation(691, 66);
					PushFollow(Follow._statement_in_statement9224);
					statement298=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement298.Tree);


					{
					// AST REWRITE
					// elements: localModifierList, type, IDENT, expression, statement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 692:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
					{
						DebugLocation(692, 81);
						// Java.g:692:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(692, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_EACH, FOR283, "FOR_EACH"), root_1);

						DebugLocation(692, 110);
						adaptor.AddChild(root_1, stream_localModifierList.NextTree());
						DebugLocation(692, 128);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(692, 133);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(692, 139);
						adaptor.AddChild(root_1, stream_expression.NextTree());
						DebugLocation(692, 150);
						adaptor.AddChild(root_1, stream_statement.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(91); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:694:9: WHILE parenthesizedExpression statement
				{
				DebugLocation(694, 9);
				WHILE299=(IToken)Match(input,WHILE,Follow._WHILE_in_statement9339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHILE.Add(WHILE299);

				DebugLocation(694, 15);
				PushFollow(Follow._parenthesizedExpression_in_statement9341);
				parenthesizedExpression300=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression300.Tree);
				DebugLocation(694, 39);
				PushFollow(Follow._statement_in_statement9343);
				statement301=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement301.Tree);


				{
				// AST REWRITE
				// elements: WHILE, parenthesizedExpression, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 694:77: -> ^( WHILE parenthesizedExpression statement )
				{
					DebugLocation(694, 81);
					// Java.g:694:81: ^( WHILE parenthesizedExpression statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(694, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

					DebugLocation(694, 89);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(694, 113);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:695:9: DO statement WHILE parenthesizedExpression SEMI
				{
				DebugLocation(695, 9);
				DO302=(IToken)Match(input,DO,Follow._DO_in_statement9392); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DO.Add(DO302);

				DebugLocation(695, 12);
				PushFollow(Follow._statement_in_statement9394);
				statement303=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement303.Tree);
				DebugLocation(695, 22);
				WHILE304=(IToken)Match(input,WHILE,Follow._WHILE_in_statement9396); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHILE.Add(WHILE304);

				DebugLocation(695, 28);
				PushFollow(Follow._parenthesizedExpression_in_statement9398);
				parenthesizedExpression305=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression305.Tree);
				DebugLocation(695, 52);
				SEMI306=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9400); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI306);



				{
				// AST REWRITE
				// elements: DO, statement, parenthesizedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 695:77: -> ^( DO statement parenthesizedExpression )
				{
					DebugLocation(695, 81);
					// Java.g:695:81: ^( DO statement parenthesizedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(695, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DO.NextNode(), root_1);

					DebugLocation(695, 86);
					adaptor.AddChild(root_1, stream_statement.NextTree());
					DebugLocation(695, 96);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:696:9: TRY block ( catches ( finallyClause )? | finallyClause )
				{
				DebugLocation(696, 9);
				TRY307=(IToken)Match(input,TRY,Follow._TRY_in_statement9441); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRY.Add(TRY307);

				DebugLocation(696, 13);
				PushFollow(Follow._block_in_statement9443);
				block308=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block308.Tree);
				DebugLocation(696, 19);
				// Java.g:696:19: ( catches ( finallyClause )? | finallyClause )
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==CATCH))
				{
					alt93 = 1;
				}
				else if ((LA93_1==FINALLY))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:696:20: catches ( finallyClause )?
					{
					DebugLocation(696, 20);
					PushFollow(Follow._catches_in_statement9446);
					catches309=catches();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catches.Add(catches309.Tree);
					DebugLocation(696, 28);
					// Java.g:696:28: ( finallyClause )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_1 = input.LA(1);

					if ((LA92_1==FINALLY))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:696:28: finallyClause
						{
						DebugLocation(696, 28);
						PushFollow(Follow._finallyClause_in_statement9448);
						finallyClause310=finallyClause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_finallyClause.Add(finallyClause310.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:696:45: finallyClause
					{
					DebugLocation(696, 45);
					PushFollow(Follow._finallyClause_in_statement9453);
					finallyClause311=finallyClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_finallyClause.Add(finallyClause311.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }



				{
				// AST REWRITE
				// elements: TRY, block, catches, finallyClause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 696:77: -> ^( TRY block ( catches )? ( finallyClause )? )
				{
					DebugLocation(696, 81);
					// Java.g:696:81: ^( TRY block ( catches )? ( finallyClause )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(696, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRY.NextNode(), root_1);

					DebugLocation(696, 87);
					adaptor.AddChild(root_1, stream_block.NextTree());
					DebugLocation(696, 93);
					// Java.g:696:93: ( catches )?
					if (stream_catches.HasNext)
					{
						DebugLocation(696, 93);
						adaptor.AddChild(root_1, stream_catches.NextTree());

					}
					stream_catches.Reset();
					DebugLocation(696, 102);
					// Java.g:696:102: ( finallyClause )?
					if (stream_finallyClause.HasNext)
					{
						DebugLocation(696, 102);
						adaptor.AddChild(root_1, stream_finallyClause.NextTree());

					}
					stream_finallyClause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:697:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
				{
				DebugLocation(697, 9);
				SWITCH312=(IToken)Match(input,SWITCH,Follow._SWITCH_in_statement9496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SWITCH.Add(SWITCH312);

				DebugLocation(697, 16);
				PushFollow(Follow._parenthesizedExpression_in_statement9498);
				parenthesizedExpression313=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression313.Tree);
				DebugLocation(697, 40);
				LCURLY314=(IToken)Match(input,LCURLY,Follow._LCURLY_in_statement9500); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LCURLY.Add(LCURLY314);

				DebugLocation(697, 47);
				PushFollow(Follow._switchBlockLabels_in_statement9502);
				switchBlockLabels315=switchBlockLabels();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchBlockLabels.Add(switchBlockLabels315.Tree);
				DebugLocation(697, 65);
				RCURLY316=(IToken)Match(input,RCURLY,Follow._RCURLY_in_statement9504); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RCURLY.Add(RCURLY316);



				{
				// AST REWRITE
				// elements: SWITCH, parenthesizedExpression, switchBlockLabels
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 697:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
					DebugLocation(697, 81);
					// Java.g:697:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(697, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SWITCH.NextNode(), root_1);

					DebugLocation(697, 90);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(697, 114);
					adaptor.AddChild(root_1, stream_switchBlockLabels.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:698:9: SYNCHRONIZED parenthesizedExpression block
				{
				DebugLocation(698, 9);
				SYNCHRONIZED317=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement9530); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYNCHRONIZED.Add(SYNCHRONIZED317);

				DebugLocation(698, 22);
				PushFollow(Follow._parenthesizedExpression_in_statement9532);
				parenthesizedExpression318=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression318.Tree);
				DebugLocation(698, 46);
				PushFollow(Follow._block_in_statement9534);
				block319=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block319.Tree);


				{
				// AST REWRITE
				// elements: SYNCHRONIZED, parenthesizedExpression, block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 698:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
				{
					DebugLocation(698, 81);
					// Java.g:698:81: ^( SYNCHRONIZED parenthesizedExpression block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(698, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SYNCHRONIZED.NextNode(), root_1);

					DebugLocation(698, 96);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(698, 120);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:699:9: RETURN ( expression )? SEMI
				{
				DebugLocation(699, 9);
				RETURN320=(IToken)Match(input,RETURN,Follow._RETURN_in_statement9580); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RETURN.Add(RETURN320);

				DebugLocation(699, 16);
				// Java.g:699:16: ( expression )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==BOOLEAN||LA94_1==BYTE||(LA94_1>=CHAR && LA94_1<=CHARACTER_LITERAL)||(LA94_1>=DEC && LA94_1<=DECIMAL_LITERAL)||LA94_1==DOUBLE||LA94_1==FALSE||(LA94_1>=FLOAT && LA94_1<=FLOATING_POINT_LITERAL)||(LA94_1>=HEX_LITERAL && LA94_1<=IDENT)||LA94_1==INC||LA94_1==INT||LA94_1==LESS_THAN||LA94_1==LOGICAL_NOT||(LA94_1>=LONG && LA94_1<=LPAREN)||LA94_1==MINUS||(LA94_1>=NEW && LA94_1<=NOT)||LA94_1==NULL||LA94_1==OCTAL_LITERAL||LA94_1==PLUS||LA94_1==SHORT||(LA94_1>=STRING_LITERAL && LA94_1<=SUPER)||LA94_1==THIS||LA94_1==TRUE||LA94_1==VOID))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:699:16: expression
					{
					DebugLocation(699, 16);
					PushFollow(Follow._expression_in_statement9582);
					expression321=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression321.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(699, 28);
				SEMI322=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9585); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI322);



				{
				// AST REWRITE
				// elements: RETURN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 699:77: -> ^( RETURN ( expression )? )
				{
					DebugLocation(699, 81);
					// Java.g:699:81: ^( RETURN ( expression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(699, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_RETURN.NextNode(), root_1);

					DebugLocation(699, 90);
					// Java.g:699:90: ( expression )?
					if (stream_expression.HasNext)
					{
						DebugLocation(699, 90);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:700:9: THROW expression SEMI
				{
				DebugLocation(700, 9);
				THROW323=(IToken)Match(input,THROW,Follow._THROW_in_statement9649); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THROW.Add(THROW323);

				DebugLocation(700, 15);
				PushFollow(Follow._expression_in_statement9651);
				expression324=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression324.Tree);
				DebugLocation(700, 26);
				SEMI325=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9653); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI325);



				{
				// AST REWRITE
				// elements: THROW, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 700:77: -> ^( THROW expression )
				{
					DebugLocation(700, 81);
					// Java.g:700:81: ^( THROW expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(700, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_THROW.NextNode(), root_1);

					DebugLocation(700, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:701:9: BREAK ( IDENT )? SEMI
				{
				DebugLocation(701, 9);
				BREAK326=(IToken)Match(input,BREAK,Follow._BREAK_in_statement9718); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BREAK.Add(BREAK326);

				DebugLocation(701, 15);
				// Java.g:701:15: ( IDENT )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==IDENT))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:701:15: IDENT
					{
					DebugLocation(701, 15);
					IDENT327=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9720); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT327);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(701, 22);
				SEMI328=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI328);



				{
				// AST REWRITE
				// elements: BREAK, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 701:77: -> ^( BREAK ( IDENT )? )
				{
					DebugLocation(701, 81);
					// Java.g:701:81: ^( BREAK ( IDENT )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(701, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_BREAK.NextNode(), root_1);

					DebugLocation(701, 89);
					// Java.g:701:89: ( IDENT )?
					if (stream_IDENT.HasNext)
					{
						DebugLocation(701, 89);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Java.g:702:9: CONTINUE ( IDENT )? SEMI
				{
				DebugLocation(702, 9);
				CONTINUE329=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_statement9793); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONTINUE.Add(CONTINUE329);

				DebugLocation(702, 18);
				// Java.g:702:18: ( IDENT )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==IDENT))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:702:18: IDENT
					{
					DebugLocation(702, 18);
					IDENT330=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9795); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT330);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(702, 25);
				SEMI331=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9798); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI331);



				{
				// AST REWRITE
				// elements: CONTINUE, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 702:77: -> ^( CONTINUE ( IDENT )? )
				{
					DebugLocation(702, 81);
					// Java.g:702:81: ^( CONTINUE ( IDENT )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(702, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_CONTINUE.NextNode(), root_1);

					DebugLocation(702, 92);
					// Java.g:702:92: ( IDENT )?
					if (stream_IDENT.HasNext)
					{
						DebugLocation(702, 92);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Java.g:703:9: IDENT COLON statement
				{
				DebugLocation(703, 9);
				IDENT332=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9865); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT332);

				DebugLocation(703, 15);
				COLON333=(IToken)Match(input,COLON,Follow._COLON_in_statement9867); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON333);

				DebugLocation(703, 21);
				PushFollow(Follow._statement_in_statement9869);
				statement334=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement334.Tree);


				{
				// AST REWRITE
				// elements: IDENT, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 703:77: -> ^( LABELED_STATEMENT IDENT statement )
				{
					DebugLocation(703, 81);
					// Java.g:703:81: ^( LABELED_STATEMENT IDENT statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(703, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

					DebugLocation(703, 101);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(703, 107);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Java.g:704:9: expression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(704, 9);
				PushFollow(Follow._expression_in_statement9936);
				expression335=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression335.Tree);
				DebugLocation(704, 24);
				SEMI336=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9938); if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Java.g:705:9: SEMI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(705, 9);
				SEMI337=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9949); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEMI337_tree = (CommonTree)adaptor.Create(SEMI337);
				adaptor.AddChild(root_0, SEMI337_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 75);
			LeaveRule("statement", 75);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 75, statement_StartIndex); }

		}
		DebugLocation(706, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// Java.g:708:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<CommonTree, IToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 76);
		TraceIn("catches", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catches_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> catchClause338 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(708, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// Java.g:709:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// Java.g:709:9: ( catchClause )+
			{
			DebugLocation(709, 9);
			// Java.g:709:9: ( catchClause )+
			int cnt98=0;
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==CATCH))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:709:9: catchClause
					{
					DebugLocation(709, 9);
					PushFollow(Follow._catchClause_in_catches9988);
					catchClause338=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catchClause.Add(catchClause338.Tree);

					}
					break;

				default:
					if (cnt98 >= 1)
						goto loop98;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee98 = new EarlyExitException( 98, input );
					DebugRecognitionException(eee98);
					throw eee98;
				}
				cnt98++;
			}
			loop98:
				;

			} finally { DebugExitSubRule(98); }



			{
			// AST REWRITE
			// elements: catchClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 710:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
				DebugLocation(710, 13);
				// Java.g:710:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(710, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

				DebugLocation(710, 33);
				if (!(stream_catchClause.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_catchClause.HasNext )
				{
					DebugLocation(710, 33);
					adaptor.AddChild(root_1, stream_catchClause.NextTree());

				}
				stream_catchClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 76);
			LeaveRule("catches", 76);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 76, catches_StartIndex); }

		}
		DebugLocation(711, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// Java.g:713:1: catchClause : CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 77);
		TraceIn("catchClause", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CATCH339 = default(IToken);
		IToken LPAREN340 = default(IToken);
		IToken RPAREN342 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block343 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CATCH339_tree = default(CommonTree);
		CommonTree LPAREN340_tree = default(CommonTree);
		CommonTree RPAREN342_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(713, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// Java.g:714:5: ( CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block )
			DebugEnterAlt(1);
			// Java.g:714:9: CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(714, 14);
			CATCH339=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause10030); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CATCH339_tree = (CommonTree)adaptor.Create(CATCH339);
			root_0 = (CommonTree)adaptor.BecomeRoot(CATCH339_tree, root_0);
			}
			DebugLocation(714, 22);
			LPAREN340=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause10033); if (state.failed) return retval;
			DebugLocation(714, 24);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause10036);
			formalParameterStandardDecl341=formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterStandardDecl341.Tree);
			DebugLocation(714, 58);
			RPAREN342=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause10038); if (state.failed) return retval;
			DebugLocation(714, 60);
			PushFollow(Follow._block_in_catchClause10041);
			block343=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block343.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 77);
			LeaveRule("catchClause", 77);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 77, catchClause_StartIndex); }

		}
		DebugLocation(715, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// Java.g:717:1: finallyClause : FINALLY block -> block ;
	[GrammarRule("finallyClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 78);
		TraceIn("finallyClause", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int finallyClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINALLY344 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block345 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINALLY344_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FINALLY=new RewriteRuleITokenStream(adaptor,"token FINALLY");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(717, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// Java.g:718:5: ( FINALLY block -> block )
			DebugEnterAlt(1);
			// Java.g:718:9: FINALLY block
			{
			DebugLocation(718, 9);
			FINALLY344=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause10060); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FINALLY.Add(FINALLY344);

			DebugLocation(718, 17);
			PushFollow(Follow._block_in_finallyClause10062);
			block345=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block345.Tree);


			{
			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 719:9: -> block
			{
				DebugLocation(719, 13);
				adaptor.AddChild(root_0, stream_block.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 78);
			LeaveRule("finallyClause", 78);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 78, finallyClause_StartIndex); }

		}
		DebugLocation(720, 4);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// Java.g:722:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
	[GrammarRule("switchBlockLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 79);
		TraceIn("switchBlockLabels", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels348 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
		RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(722, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// Java.g:723:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
			DebugEnterAlt(1);
			// Java.g:723:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
			{
			DebugLocation(723, 9);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10094);
			switchCaseLabels346=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(switchCaseLabels346.Tree);
			DebugLocation(723, 26);
			// Java.g:723:26: ( switchDefaultLabel )?
			int alt99=2;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==DEFAULT))
			{
				alt99 = 1;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:723:26: switchDefaultLabel
				{
				DebugLocation(723, 26);
				PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels10096);
				switchDefaultLabel347=switchDefaultLabel();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchDefaultLabel.Add(switchDefaultLabel347.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(99); }

			DebugLocation(723, 46);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10099);
			switchCaseLabels348=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(switchCaseLabels348.Tree);


			{
			// AST REWRITE
			// elements: switchCaseLabels, switchDefaultLabel, switchCaseLabels
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 724:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
			{
				DebugLocation(724, 13);
				// Java.g:724:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(724, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

				DebugLocation(724, 39);
				adaptor.AddChild(root_1, stream_switchCaseLabels.NextTree());
				DebugLocation(724, 56);
				// Java.g:724:56: ( switchDefaultLabel )?
				if (stream_switchDefaultLabel.HasNext)
				{
					DebugLocation(724, 56);
					adaptor.AddChild(root_1, stream_switchDefaultLabel.NextTree());

				}
				stream_switchDefaultLabel.Reset();
				DebugLocation(724, 76);
				adaptor.AddChild(root_1, stream_switchCaseLabels.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockLabels", 79);
			LeaveRule("switchBlockLabels", 79);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 79, switchBlockLabels_StartIndex); }

		}
		DebugLocation(725, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return retval;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabels();
	partial void LeaveRule_switchCaseLabels();
	// $ANTLR start "switchCaseLabels"
	// Java.g:727:1: switchCaseLabels : ( switchCaseLabel )* ;
	[GrammarRule("switchCaseLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels()
	{
		EnterRule_switchCaseLabels();
		EnterRule("switchCaseLabels", 80);
		TraceIn("switchCaseLabels", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel349 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseLabels");
		DebugLocation(727, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// Java.g:728:5: ( ( switchCaseLabel )* )
			DebugEnterAlt(1);
			// Java.g:728:9: ( switchCaseLabel )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(728, 9);
			// Java.g:728:9: ( switchCaseLabel )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_1 = input.LA(1);

				if ((LA100_1==CASE))
				{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred143_Java_fragment)))
					{
						alt100 = 1;
					}


				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:728:9: switchCaseLabel
					{
					DebugLocation(728, 9);
					PushFollow(Follow._switchCaseLabel_in_switchCaseLabels10144);
					switchCaseLabel349=switchCaseLabel();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchCaseLabel349.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabels", 80);
			LeaveRule("switchCaseLabels", 80);
			LeaveRule_switchCaseLabels();
			if (state.backtracking > 0) { Memoize(input, 80, switchCaseLabels_StartIndex); }

		}
		DebugLocation(729, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabels"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// Java.g:731:1: switchCaseLabel : CASE ^ expression COLON ! ( blockStatement )* ;
	[GrammarRule("switchCaseLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 81);
		TraceIn("switchCaseLabel", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CASE350 = default(IToken);
		IToken COLON352 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement353 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CASE350_tree = default(CommonTree);
		CommonTree COLON352_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(731, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// Java.g:732:5: ( CASE ^ expression COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:732:9: CASE ^ expression COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(732, 13);
			CASE350=(IToken)Match(input,CASE,Follow._CASE_in_switchCaseLabel10172); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CASE350_tree = (CommonTree)adaptor.Create(CASE350);
			root_0 = (CommonTree)adaptor.BecomeRoot(CASE350_tree, root_0);
			}
			DebugLocation(732, 15);
			PushFollow(Follow._expression_in_switchCaseLabel10175);
			expression351=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression351.Tree);
			DebugLocation(732, 31);
			COLON352=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseLabel10177); if (state.failed) return retval;
			DebugLocation(732, 33);
			// Java.g:732:33: ( blockStatement )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==ABSTRACT||LA101_1==ASSERT||LA101_1==AT||(LA101_1>=BOOLEAN && LA101_1<=BYTE)||(LA101_1>=CHAR && LA101_1<=CLASS)||(LA101_1>=CONTINUE && LA101_1<=DECIMAL_LITERAL)||LA101_1==DO||LA101_1==DOUBLE||LA101_1==ENUM||(LA101_1>=FALSE && LA101_1<=FINAL)||(LA101_1>=FLOAT && LA101_1<=FLOATING_POINT_LITERAL)||LA101_1==FOR||(LA101_1>=HEX_LITERAL && LA101_1<=IF)||LA101_1==INC||LA101_1==INT||LA101_1==INTERFACE||LA101_1==LCURLY||LA101_1==LESS_THAN||LA101_1==LOGICAL_NOT||(LA101_1>=LONG && LA101_1<=LPAREN)||LA101_1==MINUS||(LA101_1>=NATIVE && LA101_1<=NOT)||LA101_1==NULL||LA101_1==OCTAL_LITERAL||LA101_1==PLUS||(LA101_1>=PRIVATE && LA101_1<=PUBLIC)||LA101_1==RETURN||LA101_1==SEMI||LA101_1==SHORT||LA101_1==STATIC||(LA101_1>=STRICTFP && LA101_1<=SUPER)||LA101_1==SWITCH||(LA101_1>=SYNCHRONIZED && LA101_1<=THIS)||LA101_1==THROW||(LA101_1>=TRANSIENT && LA101_1<=TRY)||LA101_1==VOID||(LA101_1>=VOLATILE && LA101_1<=WHILE)))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:732:33: blockStatement
					{
					DebugLocation(732, 33);
					PushFollow(Follow._blockStatement_in_switchCaseLabel10180);
					blockStatement353=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement353.Tree);

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabel", 81);
			LeaveRule("switchCaseLabel", 81);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 81, switchCaseLabel_StartIndex); }

		}
		DebugLocation(733, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// Java.g:735:1: switchDefaultLabel : DEFAULT ^ COLON ! ( blockStatement )* ;
	[GrammarRule("switchDefaultLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 82);
		TraceIn("switchDefaultLabel", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchDefaultLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT354 = default(IToken);
		IToken COLON355 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement356 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT354_tree = default(CommonTree);
		CommonTree COLON355_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(735, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// Java.g:736:5: ( DEFAULT ^ COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:736:9: DEFAULT ^ COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(736, 16);
			DEFAULT354=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel10204); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT354_tree = (CommonTree)adaptor.Create(DEFAULT354);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT354_tree, root_0);
			}
			DebugLocation(736, 23);
			COLON355=(IToken)Match(input,COLON,Follow._COLON_in_switchDefaultLabel10207); if (state.failed) return retval;
			DebugLocation(736, 25);
			// Java.g:736:25: ( blockStatement )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==ABSTRACT||LA102_1==ASSERT||LA102_1==AT||(LA102_1>=BOOLEAN && LA102_1<=BYTE)||(LA102_1>=CHAR && LA102_1<=CLASS)||(LA102_1>=CONTINUE && LA102_1<=DECIMAL_LITERAL)||LA102_1==DO||LA102_1==DOUBLE||LA102_1==ENUM||(LA102_1>=FALSE && LA102_1<=FINAL)||(LA102_1>=FLOAT && LA102_1<=FLOATING_POINT_LITERAL)||LA102_1==FOR||(LA102_1>=HEX_LITERAL && LA102_1<=IF)||LA102_1==INC||LA102_1==INT||LA102_1==INTERFACE||LA102_1==LCURLY||LA102_1==LESS_THAN||LA102_1==LOGICAL_NOT||(LA102_1>=LONG && LA102_1<=LPAREN)||LA102_1==MINUS||(LA102_1>=NATIVE && LA102_1<=NOT)||LA102_1==NULL||LA102_1==OCTAL_LITERAL||LA102_1==PLUS||(LA102_1>=PRIVATE && LA102_1<=PUBLIC)||LA102_1==RETURN||LA102_1==SEMI||LA102_1==SHORT||LA102_1==STATIC||(LA102_1>=STRICTFP && LA102_1<=SUPER)||LA102_1==SWITCH||(LA102_1>=SYNCHRONIZED && LA102_1<=THIS)||LA102_1==THROW||(LA102_1>=TRANSIENT && LA102_1<=TRY)||LA102_1==VOID||(LA102_1>=VOLATILE && LA102_1<=WHILE)))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:736:25: blockStatement
					{
					DebugLocation(736, 25);
					PushFollow(Follow._blockStatement_in_switchDefaultLabel10210);
					blockStatement356=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement356.Tree);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchDefaultLabel", 82);
			LeaveRule("switchDefaultLabel", 82);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 82, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(737, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return retval;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Java.g:739:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 83);
		TraceIn("forInit", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList358 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(739, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// Java.g:740:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
			int alt103=3;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case AT:
			case FINAL:
				{
				alt103 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Java_fragment)))
				{
					alt103 = 1;
				}
				else if ((EvaluatePredicate(synpred147_Java_fragment)))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Java_fragment)))
				{
					alt103 = 1;
				}
				else if ((EvaluatePredicate(synpred147_Java_fragment)))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case INC:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt103 = 2;
				}
				break;
			case SEMI:
				{
				alt103 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:740:9: localVariableDeclaration
				{
				DebugLocation(740, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit10234);
				localVariableDeclaration357=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_localVariableDeclaration.Add(localVariableDeclaration357.Tree);


				{
				// AST REWRITE
				// elements: localVariableDeclaration
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 740:37: -> ^( FOR_INIT localVariableDeclaration )
				{
					DebugLocation(740, 41);
					// Java.g:740:41: ^( FOR_INIT localVariableDeclaration )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(740, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(740, 52);
					adaptor.AddChild(root_1, stream_localVariableDeclaration.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:741:9: expressionList
				{
				DebugLocation(741, 9);
				PushFollow(Follow._expressionList_in_forInit10256);
				expressionList358=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList358.Tree);


				{
				// AST REWRITE
				// elements: expressionList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 741:37: -> ^( FOR_INIT expressionList )
				{
					DebugLocation(741, 41);
					// Java.g:741:41: ^( FOR_INIT expressionList )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(741, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(741, 52);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:742:37: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 742:37: -> ^( FOR_INIT )
				{
					DebugLocation(742, 41);
					// Java.g:742:41: ^( FOR_INIT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(742, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 83);
			LeaveRule("forInit", 83);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 83, forInit_StartIndex); }

		}
		DebugLocation(743, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// Java.g:745:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 84);
		TraceIn("forCondition", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expression359 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(745, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// Java.g:746:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// Java.g:746:9: ( expression )?
			{
			DebugLocation(746, 9);
			// Java.g:746:9: ( expression )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_1 = input.LA(1);

			if ((LA104_1==BOOLEAN||LA104_1==BYTE||(LA104_1>=CHAR && LA104_1<=CHARACTER_LITERAL)||(LA104_1>=DEC && LA104_1<=DECIMAL_LITERAL)||LA104_1==DOUBLE||LA104_1==FALSE||(LA104_1>=FLOAT && LA104_1<=FLOATING_POINT_LITERAL)||(LA104_1>=HEX_LITERAL && LA104_1<=IDENT)||LA104_1==INC||LA104_1==INT||LA104_1==LESS_THAN||LA104_1==LOGICAL_NOT||(LA104_1>=LONG && LA104_1<=LPAREN)||LA104_1==MINUS||(LA104_1>=NEW && LA104_1<=NOT)||LA104_1==NULL||LA104_1==OCTAL_LITERAL||LA104_1==PLUS||LA104_1==SHORT||(LA104_1>=STRING_LITERAL && LA104_1<=SUPER)||LA104_1==THIS||LA104_1==TRUE||LA104_1==VOID))
			{
				alt104 = 1;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:746:9: expression
				{
				DebugLocation(746, 9);
				PushFollow(Follow._expression_in_forCondition10344);
				expression359=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression359.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 747:9: -> ^( FOR_CONDITION ( expression )? )
			{
				DebugLocation(747, 13);
				// Java.g:747:13: ^( FOR_CONDITION ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(747, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_1);

				DebugLocation(747, 29);
				// Java.g:747:29: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(747, 29);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 84);
			LeaveRule("forCondition", 84);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 84, forCondition_StartIndex); }

		}
		DebugLocation(748, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// Java.g:750:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
	[GrammarRule("forUpdater")]
	private AstParserRuleReturnScope<CommonTree, IToken> forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 85);
		TraceIn("forUpdater", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forUpdater_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expressionList360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(750, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// Java.g:751:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
			DebugEnterAlt(1);
			// Java.g:751:9: ( expressionList )?
			{
			DebugLocation(751, 9);
			// Java.g:751:9: ( expressionList )?
			int alt105=2;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			int LA105_1 = input.LA(1);

			if ((LA105_1==BOOLEAN||LA105_1==BYTE||(LA105_1>=CHAR && LA105_1<=CHARACTER_LITERAL)||(LA105_1>=DEC && LA105_1<=DECIMAL_LITERAL)||LA105_1==DOUBLE||LA105_1==FALSE||(LA105_1>=FLOAT && LA105_1<=FLOATING_POINT_LITERAL)||(LA105_1>=HEX_LITERAL && LA105_1<=IDENT)||LA105_1==INC||LA105_1==INT||LA105_1==LESS_THAN||LA105_1==LOGICAL_NOT||(LA105_1>=LONG && LA105_1<=LPAREN)||LA105_1==MINUS||(LA105_1>=NEW && LA105_1<=NOT)||LA105_1==NULL||LA105_1==OCTAL_LITERAL||LA105_1==PLUS||LA105_1==SHORT||(LA105_1>=STRING_LITERAL && LA105_1<=SUPER)||LA105_1==THIS||LA105_1==TRUE||LA105_1==VOID))
			{
				alt105 = 1;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:751:9: expressionList
				{
				DebugLocation(751, 9);
				PushFollow(Follow._expressionList_in_forUpdater10386);
				expressionList360=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList360.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(105); }



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 752:9: -> ^( FOR_UPDATE ( expressionList )? )
			{
				DebugLocation(752, 13);
				// Java.g:752:13: ^( FOR_UPDATE ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(752, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_UPDATE, "FOR_UPDATE"), root_1);

				DebugLocation(752, 26);
				// Java.g:752:26: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(752, 26);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdater", 85);
			LeaveRule("forUpdater", 85);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 85, forUpdater_StartIndex); }

		}
		DebugLocation(753, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return retval;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// Java.g:757:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
	[GrammarRule("parenthesizedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 86);
		TraceIn("parenthesizedExpression", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parenthesizedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN361 = default(IToken);
		IToken RPAREN363 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN361_tree = default(CommonTree);
		CommonTree RPAREN363_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(757, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// Java.g:758:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
			DebugEnterAlt(1);
			// Java.g:758:9: LPAREN expression RPAREN
			{
			DebugLocation(758, 9);
			LPAREN361=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenthesizedExpression10426); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN361);

			DebugLocation(758, 16);
			PushFollow(Follow._expression_in_parenthesizedExpression10428);
			expression362=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression362.Tree);
			DebugLocation(758, 27);
			RPAREN363=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenthesizedExpression10430); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN363);



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 759:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
			{
				DebugLocation(759, 13);
				// Java.g:759:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(759, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARENTESIZED_EXPR, LPAREN361, "PARENTESIZED_EXPR"), root_1);

				DebugLocation(759, 63);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenthesizedExpression", 86);
			LeaveRule("parenthesizedExpression", 86);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 86, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(760, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return retval;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// Java.g:762:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 87);
		TraceIn("expressionList", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA365 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression366 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA365_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(762, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// Java.g:763:5: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// Java.g:763:9: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(763, 9);
			PushFollow(Follow._expression_in_expressionList10471);
			expression364=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression364.Tree);
			DebugLocation(763, 20);
			// Java.g:763:20: ( COMMA ! expression )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==COMMA))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:763:21: COMMA ! expression
					{
					DebugLocation(763, 26);
					COMMA365=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList10474); if (state.failed) return retval;
					DebugLocation(763, 28);
					PushFollow(Follow._expression_in_expressionList10477);
					expression366=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression366.Tree);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 87);
			LeaveRule("expressionList", 87);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 87, expressionList_StartIndex); }

		}
		DebugLocation(764, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Java.g:766:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 88);
		TraceIn("expression", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(766, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// Java.g:767:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
			DebugEnterAlt(1);
			// Java.g:767:9: assignmentExpression
			{
			DebugLocation(767, 9);
			PushFollow(Follow._assignmentExpression_in_expression10498);
			assignmentExpression367=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression367.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 768:9: -> ^( EXPR assignmentExpression )
			{
				DebugLocation(768, 13);
				// Java.g:768:13: ^( EXPR assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(768, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(768, 20);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 88);
			LeaveRule("expression", 88);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 88, expression_StartIndex); }

		}
		DebugLocation(769, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Java.g:771:1: assignmentExpression : conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 89);
		TraceIn("assignmentExpression", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN369 = default(IToken);
		IToken PLUS_ASSIGN370 = default(IToken);
		IToken MINUS_ASSIGN371 = default(IToken);
		IToken STAR_ASSIGN372 = default(IToken);
		IToken DIV_ASSIGN373 = default(IToken);
		IToken AND_ASSIGN374 = default(IToken);
		IToken OR_ASSIGN375 = default(IToken);
		IToken XOR_ASSIGN376 = default(IToken);
		IToken MOD_ASSIGN377 = default(IToken);
		IToken SHIFT_LEFT_ASSIGN378 = default(IToken);
		IToken SHIFT_RIGHT_ASSIGN379 = default(IToken);
		IToken BIT_SHIFT_RIGHT_ASSIGN380 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression368 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN369_tree = default(CommonTree);
		CommonTree PLUS_ASSIGN370_tree = default(CommonTree);
		CommonTree MINUS_ASSIGN371_tree = default(CommonTree);
		CommonTree STAR_ASSIGN372_tree = default(CommonTree);
		CommonTree DIV_ASSIGN373_tree = default(CommonTree);
		CommonTree AND_ASSIGN374_tree = default(CommonTree);
		CommonTree OR_ASSIGN375_tree = default(CommonTree);
		CommonTree XOR_ASSIGN376_tree = default(CommonTree);
		CommonTree MOD_ASSIGN377_tree = default(CommonTree);
		CommonTree SHIFT_LEFT_ASSIGN378_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT_ASSIGN379_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT_ASSIGN380_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(771, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// Java.g:772:5: ( conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? )
			DebugEnterAlt(1);
			// Java.g:772:9: conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(772, 9);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression10534);
			conditionalExpression368=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression368.Tree);
			DebugLocation(773, 9);
			// Java.g:773:9: ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==AND_ASSIGN||LA108_1==ASSIGN||LA108_1==BIT_SHIFT_RIGHT_ASSIGN||LA108_1==DIV_ASSIGN||LA108_1==MINUS_ASSIGN||LA108_1==MOD_ASSIGN||LA108_1==OR_ASSIGN||LA108_1==PLUS_ASSIGN||LA108_1==SHIFT_LEFT_ASSIGN||LA108_1==SHIFT_RIGHT_ASSIGN||LA108_1==STAR_ASSIGN||LA108_1==XOR_ASSIGN))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:773:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression
				{
				DebugLocation(773, 13);
				// Java.g:773:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^)
				int alt107=12;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				switch (input.LA(1))
				{
				case ASSIGN:
					{
					alt107 = 1;
					}
					break;
				case PLUS_ASSIGN:
					{
					alt107 = 2;
					}
					break;
				case MINUS_ASSIGN:
					{
					alt107 = 3;
					}
					break;
				case STAR_ASSIGN:
					{
					alt107 = 4;
					}
					break;
				case DIV_ASSIGN:
					{
					alt107 = 5;
					}
					break;
				case AND_ASSIGN:
					{
					alt107 = 6;
					}
					break;
				case OR_ASSIGN:
					{
					alt107 = 7;
					}
					break;
				case XOR_ASSIGN:
					{
					alt107 = 8;
					}
					break;
				case MOD_ASSIGN:
					{
					alt107 = 9;
					}
					break;
				case SHIFT_LEFT_ASSIGN:
					{
					alt107 = 10;
					}
					break;
				case SHIFT_RIGHT_ASSIGN:
					{
					alt107 = 11;
					}
					break;
				case BIT_SHIFT_RIGHT_ASSIGN:
					{
					alt107 = 12;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 107, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:773:17: ASSIGN ^
					{
					DebugLocation(773, 23);
					ASSIGN369=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assignmentExpression10553); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ASSIGN369_tree = (CommonTree)adaptor.Create(ASSIGN369);
					root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN369_tree, root_0);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:774:17: PLUS_ASSIGN ^
					{
					DebugLocation(774, 28);
					PLUS_ASSIGN370=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_assignmentExpression10572); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PLUS_ASSIGN370_tree = (CommonTree)adaptor.Create(PLUS_ASSIGN370);
					root_0 = (CommonTree)adaptor.BecomeRoot(PLUS_ASSIGN370_tree, root_0);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:775:17: MINUS_ASSIGN ^
					{
					DebugLocation(775, 29);
					MINUS_ASSIGN371=(IToken)Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_assignmentExpression10591); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MINUS_ASSIGN371_tree = (CommonTree)adaptor.Create(MINUS_ASSIGN371);
					root_0 = (CommonTree)adaptor.BecomeRoot(MINUS_ASSIGN371_tree, root_0);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:776:17: STAR_ASSIGN ^
					{
					DebugLocation(776, 28);
					STAR_ASSIGN372=(IToken)Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_assignmentExpression10610); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STAR_ASSIGN372_tree = (CommonTree)adaptor.Create(STAR_ASSIGN372);
					root_0 = (CommonTree)adaptor.BecomeRoot(STAR_ASSIGN372_tree, root_0);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:777:17: DIV_ASSIGN ^
					{
					DebugLocation(777, 27);
					DIV_ASSIGN373=(IToken)Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_assignmentExpression10629); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DIV_ASSIGN373_tree = (CommonTree)adaptor.Create(DIV_ASSIGN373);
					root_0 = (CommonTree)adaptor.BecomeRoot(DIV_ASSIGN373_tree, root_0);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// Java.g:778:17: AND_ASSIGN ^
					{
					DebugLocation(778, 27);
					AND_ASSIGN374=(IToken)Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_assignmentExpression10648); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND_ASSIGN374_tree = (CommonTree)adaptor.Create(AND_ASSIGN374);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND_ASSIGN374_tree, root_0);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// Java.g:779:17: OR_ASSIGN ^
					{
					DebugLocation(779, 26);
					OR_ASSIGN375=(IToken)Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_assignmentExpression10667); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR_ASSIGN375_tree = (CommonTree)adaptor.Create(OR_ASSIGN375);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR_ASSIGN375_tree, root_0);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// Java.g:780:17: XOR_ASSIGN ^
					{
					DebugLocation(780, 27);
					XOR_ASSIGN376=(IToken)Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_assignmentExpression10686); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR_ASSIGN376_tree = (CommonTree)adaptor.Create(XOR_ASSIGN376);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR_ASSIGN376_tree, root_0);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// Java.g:781:17: MOD_ASSIGN ^
					{
					DebugLocation(781, 27);
					MOD_ASSIGN377=(IToken)Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_assignmentExpression10705); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MOD_ASSIGN377_tree = (CommonTree)adaptor.Create(MOD_ASSIGN377);
					root_0 = (CommonTree)adaptor.BecomeRoot(MOD_ASSIGN377_tree, root_0);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// Java.g:782:17: SHIFT_LEFT_ASSIGN ^
					{
					DebugLocation(782, 34);
					SHIFT_LEFT_ASSIGN378=(IToken)Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_assignmentExpression10724); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_LEFT_ASSIGN378_tree = (CommonTree)adaptor.Create(SHIFT_LEFT_ASSIGN378);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT_ASSIGN378_tree, root_0);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// Java.g:783:17: SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(783, 35);
					SHIFT_RIGHT_ASSIGN379=(IToken)Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_assignmentExpression10743); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_RIGHT_ASSIGN379_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT_ASSIGN379);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT_ASSIGN379_tree, root_0);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// Java.g:784:17: BIT_SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(784, 39);
					BIT_SHIFT_RIGHT_ASSIGN380=(IToken)Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10762); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BIT_SHIFT_RIGHT_ASSIGN380_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT_ASSIGN380);
					root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT_ASSIGN380_tree, root_0);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(786, 9);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression10784);
				assignmentExpression381=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression381.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 89);
			LeaveRule("assignmentExpression", 89);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 89, assignmentExpression_StartIndex); }

		}
		DebugLocation(787, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// Java.g:789:1: conditionalExpression : logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 90);
		TraceIn("conditionalExpression", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION383 = default(IToken);
		IToken COLON385 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression382 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression384 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression386 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION383_tree = default(CommonTree);
		CommonTree COLON385_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(789, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// Java.g:790:5: ( logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? )
			DebugEnterAlt(1);
			// Java.g:790:9: logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(790, 9);
			PushFollow(Follow._logicalOrExpression_in_conditionalExpression10809);
			logicalOrExpression382=logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOrExpression382.Tree);
			DebugLocation(790, 29);
			// Java.g:790:29: ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_1 = input.LA(1);

			if ((LA109_1==QUESTION))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:790:30: QUESTION ^ assignmentExpression COLON ! conditionalExpression
				{
				DebugLocation(790, 38);
				QUESTION383=(IToken)Match(input,QUESTION,Follow._QUESTION_in_conditionalExpression10812); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION383_tree = (CommonTree)adaptor.Create(QUESTION383);
				root_0 = (CommonTree)adaptor.BecomeRoot(QUESTION383_tree, root_0);
				}
				DebugLocation(790, 40);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression10815);
				assignmentExpression384=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression384.Tree);
				DebugLocation(790, 66);
				COLON385=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression10817); if (state.failed) return retval;
				DebugLocation(790, 68);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression10820);
				conditionalExpression386=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression386.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 90);
			LeaveRule("conditionalExpression", 90);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 90, conditionalExpression_StartIndex); }

		}
		DebugLocation(791, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// Java.g:793:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 91);
		TraceIn("logicalOrExpression", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR388 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression387 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression389 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR388_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(793, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// Java.g:794:5: ( logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* )
			DebugEnterAlt(1);
			// Java.g:794:9: logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(794, 9);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10841);
			logicalAndExpression387=logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression387.Tree);
			DebugLocation(794, 30);
			// Java.g:794:30: ( LOGICAL_OR ^ logicalAndExpression )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==LOGICAL_OR))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:794:31: LOGICAL_OR ^ logicalAndExpression
					{
					DebugLocation(794, 41);
					LOGICAL_OR388=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_logicalOrExpression10844); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_OR388_tree = (CommonTree)adaptor.Create(LOGICAL_OR388);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR388_tree, root_0);
					}
					DebugLocation(794, 43);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10847);
					logicalAndExpression389=logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression389.Tree);

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 91);
			LeaveRule("logicalOrExpression", 91);
			LeaveRule_logicalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 91, logicalOrExpression_StartIndex); }

		}
		DebugLocation(795, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// Java.g:797:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 92);
		TraceIn("logicalAndExpression", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalAndExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND391 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression392 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND391_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(797, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// Java.g:798:5: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:798:9: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(798, 9);
			PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression10868);
			inclusiveOrExpression390=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression390.Tree);
			DebugLocation(798, 31);
			// Java.g:798:31: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==LOGICAL_AND))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:798:32: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(798, 43);
					LOGICAL_AND391=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_logicalAndExpression10871); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_AND391_tree = (CommonTree)adaptor.Create(LOGICAL_AND391);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND391_tree, root_0);
					}
					DebugLocation(798, 45);
					PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression10874);
					inclusiveOrExpression392=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression392.Tree);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 92);
			LeaveRule("logicalAndExpression", 92);
			LeaveRule_logicalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 92, logicalAndExpression_StartIndex); }

		}
		DebugLocation(799, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// Java.g:801:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 93);
		TraceIn("inclusiveOrExpression", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken OR394 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression393 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR394_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(801, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// Java.g:802:5: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:802:9: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(802, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression10895);
			exclusiveOrExpression393=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression393.Tree);
			DebugLocation(802, 31);
			// Java.g:802:31: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==OR))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:802:32: OR ^ exclusiveOrExpression
					{
					DebugLocation(802, 34);
					OR394=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression10898); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR394_tree = (CommonTree)adaptor.Create(OR394);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR394_tree, root_0);
					}
					DebugLocation(802, 36);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression10901);
					exclusiveOrExpression395=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression395.Tree);

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 93);
			LeaveRule("inclusiveOrExpression", 93);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 93, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(803, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// Java.g:805:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 94);
		TraceIn("exclusiveOrExpression", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken XOR397 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression396 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression398 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR397_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(805, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// Java.g:806:5: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// Java.g:806:9: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(806, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression10922);
			andExpression396=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression396.Tree);
			DebugLocation(806, 23);
			// Java.g:806:23: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_1 = input.LA(1);

				if ((LA113_1==XOR))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:806:24: XOR ^ andExpression
					{
					DebugLocation(806, 27);
					XOR397=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression10925); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR397_tree = (CommonTree)adaptor.Create(XOR397);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR397_tree, root_0);
					}
					DebugLocation(806, 29);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression10928);
					andExpression398=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression398.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 94);
			LeaveRule("exclusiveOrExpression", 94);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 94, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(807, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Java.g:809:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 95);
		TraceIn("andExpression", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AND400 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression401 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND400_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(809, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// Java.g:810:5: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// Java.g:810:9: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(810, 9);
			PushFollow(Follow._equalityExpression_in_andExpression10949);
			equalityExpression399=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression399.Tree);
			DebugLocation(810, 28);
			// Java.g:810:28: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==AND))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:810:29: AND ^ equalityExpression
					{
					DebugLocation(810, 32);
					AND400=(IToken)Match(input,AND,Follow._AND_in_andExpression10952); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND400_tree = (CommonTree)adaptor.Create(AND400);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND400_tree, root_0);
					}
					DebugLocation(810, 34);
					PushFollow(Follow._equalityExpression_in_andExpression10955);
					equalityExpression401=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression401.Tree);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 95);
			LeaveRule("andExpression", 95);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 95, andExpression_StartIndex); }

		}
		DebugLocation(811, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Java.g:813:1: equalityExpression : instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 96);
		TraceIn("equalityExpression", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EQUAL403 = default(IToken);
		IToken NOT_EQUAL404 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression402 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression405 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EQUAL403_tree = default(CommonTree);
		CommonTree NOT_EQUAL404_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(813, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// Java.g:814:5: ( instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* )
			DebugEnterAlt(1);
			// Java.g:814:9: instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(814, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression10976);
			instanceOfExpression402=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression402.Tree);
			DebugLocation(815, 9);
			// Java.g:815:9: ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==EQUAL||LA116_1==NOT_EQUAL))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:815:13: ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression
					{
					DebugLocation(815, 13);
					// Java.g:815:13: ( EQUAL ^| NOT_EQUAL ^)
					int alt115=2;
					try { DebugEnterSubRule(115);
					try { DebugEnterDecision(115, false);
					int LA115_1 = input.LA(1);

					if ((LA115_1==EQUAL))
					{
						alt115 = 1;
					}
					else if ((LA115_1==NOT_EQUAL))
					{
						alt115 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 115, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(115); }
					switch (alt115)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:815:17: EQUAL ^
						{
						DebugLocation(815, 22);
						EQUAL403=(IToken)Match(input,EQUAL,Follow._EQUAL_in_equalityExpression10995); if (state.failed) return retval;
						if (state.backtracking == 0) {
						EQUAL403_tree = (CommonTree)adaptor.Create(EQUAL403);
						root_0 = (CommonTree)adaptor.BecomeRoot(EQUAL403_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:816:17: NOT_EQUAL ^
						{
						DebugLocation(816, 26);
						NOT_EQUAL404=(IToken)Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_equalityExpression11014); if (state.failed) return retval;
						if (state.backtracking == 0) {
						NOT_EQUAL404_tree = (CommonTree)adaptor.Create(NOT_EQUAL404);
						root_0 = (CommonTree)adaptor.BecomeRoot(NOT_EQUAL404_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(115); }

					DebugLocation(818, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression11044);
					instanceOfExpression405=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression405.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 96);
			LeaveRule("equalityExpression", 96);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 96, equalityExpression_StartIndex); }

		}
		DebugLocation(820, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// Java.g:822:1: instanceOfExpression : relationalExpression ( INSTANCEOF ^ type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 97);
		TraceIn("instanceOfExpression", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INSTANCEOF407 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type408 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INSTANCEOF407_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(822, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// Java.g:823:5: ( relationalExpression ( INSTANCEOF ^ type )? )
			DebugEnterAlt(1);
			// Java.g:823:9: relationalExpression ( INSTANCEOF ^ type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(823, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression11074);
			relationalExpression406=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression406.Tree);
			DebugLocation(823, 30);
			// Java.g:823:30: ( INSTANCEOF ^ type )?
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, false);
			int LA117_1 = input.LA(1);

			if ((LA117_1==INSTANCEOF))
			{
				alt117 = 1;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:823:31: INSTANCEOF ^ type
				{
				DebugLocation(823, 41);
				INSTANCEOF407=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression11077); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INSTANCEOF407_tree = (CommonTree)adaptor.Create(INSTANCEOF407);
				root_0 = (CommonTree)adaptor.BecomeRoot(INSTANCEOF407_tree, root_0);
				}
				DebugLocation(823, 43);
				PushFollow(Follow._type_in_instanceOfExpression11080);
				type408=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type408.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 97);
			LeaveRule("instanceOfExpression", 97);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 97, instanceOfExpression_StartIndex); }

		}
		DebugLocation(824, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Java.g:826:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 98);
		TraceIn("relationalExpression", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_OR_EQUAL410 = default(IToken);
		IToken GREATER_OR_EQUAL411 = default(IToken);
		IToken LESS_THAN412 = default(IToken);
		IToken GREATER_THAN413 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression409 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression414 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_OR_EQUAL410_tree = default(CommonTree);
		CommonTree GREATER_OR_EQUAL411_tree = default(CommonTree);
		CommonTree LESS_THAN412_tree = default(CommonTree);
		CommonTree GREATER_THAN413_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(826, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// Java.g:827:5: ( shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* )
			DebugEnterAlt(1);
			// Java.g:827:9: shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(827, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression11101);
			shiftExpression409=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression409.Tree);
			DebugLocation(828, 9);
			// Java.g:828:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if (((LA119_1>=GREATER_OR_EQUAL && LA119_1<=GREATER_THAN)||(LA119_1>=LESS_OR_EQUAL && LA119_1<=LESS_THAN)))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:828:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression
					{
					DebugLocation(828, 13);
					// Java.g:828:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^)
					int alt118=4;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, false);
					switch (input.LA(1))
					{
					case LESS_OR_EQUAL:
						{
						alt118 = 1;
						}
						break;
					case GREATER_OR_EQUAL:
						{
						alt118 = 2;
						}
						break;
					case LESS_THAN:
						{
						alt118 = 3;
						}
						break;
					case GREATER_THAN:
						{
						alt118 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 118, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:828:17: LESS_OR_EQUAL ^
						{
						DebugLocation(828, 30);
						LESS_OR_EQUAL410=(IToken)Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_relationalExpression11120); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_OR_EQUAL410_tree = (CommonTree)adaptor.Create(LESS_OR_EQUAL410);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_OR_EQUAL410_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:829:17: GREATER_OR_EQUAL ^
						{
						DebugLocation(829, 33);
						GREATER_OR_EQUAL411=(IToken)Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_relationalExpression11139); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_OR_EQUAL411_tree = (CommonTree)adaptor.Create(GREATER_OR_EQUAL411);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_OR_EQUAL411_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:830:17: LESS_THAN ^
						{
						DebugLocation(830, 26);
						LESS_THAN412=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_relationalExpression11158); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_THAN412_tree = (CommonTree)adaptor.Create(LESS_THAN412);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_THAN412_tree, root_0);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// Java.g:831:17: GREATER_THAN ^
						{
						DebugLocation(831, 29);
						GREATER_THAN413=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_relationalExpression11177); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_THAN413_tree = (CommonTree)adaptor.Create(GREATER_THAN413);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_THAN413_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(118); }

					DebugLocation(833, 13);
					PushFollow(Follow._shiftExpression_in_relationalExpression11206);
					shiftExpression414=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression414.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 98);
			LeaveRule("relationalExpression", 98);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 98, relationalExpression_StartIndex); }

		}
		DebugLocation(835, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// Java.g:837:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 99);
		TraceIn("shiftExpression", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken BIT_SHIFT_RIGHT416 = default(IToken);
		IToken SHIFT_RIGHT417 = default(IToken);
		IToken SHIFT_LEFT418 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression415 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression419 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree BIT_SHIFT_RIGHT416_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT417_tree = default(CommonTree);
		CommonTree SHIFT_LEFT418_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(837, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// Java.g:838:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* )
			DebugEnterAlt(1);
			// Java.g:838:9: additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(838, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression11240);
			additiveExpression415=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression415.Tree);
			DebugLocation(839, 9);
			// Java.g:839:9: ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==BIT_SHIFT_RIGHT||LA121_1==SHIFT_LEFT||LA121_1==SHIFT_RIGHT))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:839:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression
					{
					DebugLocation(839, 13);
					// Java.g:839:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^)
					int alt120=3;
					try { DebugEnterSubRule(120);
					try { DebugEnterDecision(120, false);
					switch (input.LA(1))
					{
					case BIT_SHIFT_RIGHT:
						{
						alt120 = 1;
						}
						break;
					case SHIFT_RIGHT:
						{
						alt120 = 2;
						}
						break;
					case SHIFT_LEFT:
						{
						alt120 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 120, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:839:17: BIT_SHIFT_RIGHT ^
						{
						DebugLocation(839, 32);
						BIT_SHIFT_RIGHT416=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_shiftExpression11258); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BIT_SHIFT_RIGHT416_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT416);
						root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT416_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:840:17: SHIFT_RIGHT ^
						{
						DebugLocation(840, 28);
						SHIFT_RIGHT417=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_shiftExpression11277); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_RIGHT417_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT417);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT417_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:841:17: SHIFT_LEFT ^
						{
						DebugLocation(841, 27);
						SHIFT_LEFT418=(IToken)Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_shiftExpression11296); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_LEFT418_tree = (CommonTree)adaptor.Create(SHIFT_LEFT418);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT418_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(120); }

					DebugLocation(843, 13);
					PushFollow(Follow._additiveExpression_in_shiftExpression11325);
					additiveExpression419=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression419.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 99);
			LeaveRule("shiftExpression", 99);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 99, shiftExpression_StartIndex); }

		}
		DebugLocation(845, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Java.g:847:1: additiveExpression : multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 100);
		TraceIn("additiveExpression", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS421 = default(IToken);
		IToken MINUS422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression423 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS421_tree = default(CommonTree);
		CommonTree MINUS422_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(847, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// Java.g:848:5: ( multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Java.g:848:9: multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(848, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression11355);
			multiplicativeExpression420=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression420.Tree);
			DebugLocation(849, 9);
			// Java.g:849:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_1 = input.LA(1);

				if ((LA123_1==MINUS||LA123_1==PLUS))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:849:13: ( PLUS ^| MINUS ^) multiplicativeExpression
					{
					DebugLocation(849, 13);
					// Java.g:849:13: ( PLUS ^| MINUS ^)
					int alt122=2;
					try { DebugEnterSubRule(122);
					try { DebugEnterDecision(122, false);
					int LA122_1 = input.LA(1);

					if ((LA122_1==PLUS))
					{
						alt122 = 1;
					}
					else if ((LA122_1==MINUS))
					{
						alt122 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(122); }
					switch (alt122)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:849:17: PLUS ^
						{
						DebugLocation(849, 21);
						PLUS421=(IToken)Match(input,PLUS,Follow._PLUS_in_additiveExpression11373); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PLUS421_tree = (CommonTree)adaptor.Create(PLUS421);
						root_0 = (CommonTree)adaptor.BecomeRoot(PLUS421_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:850:17: MINUS ^
						{
						DebugLocation(850, 22);
						MINUS422=(IToken)Match(input,MINUS,Follow._MINUS_in_additiveExpression11392); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MINUS422_tree = (CommonTree)adaptor.Create(MINUS422);
						root_0 = (CommonTree)adaptor.BecomeRoot(MINUS422_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(122); }

					DebugLocation(852, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression11421);
					multiplicativeExpression423=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression423.Tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 100);
			LeaveRule("additiveExpression", 100);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 100, additiveExpression_StartIndex); }

		}
		DebugLocation(854, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// Java.g:856:1: multiplicativeExpression : unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 101);
		TraceIn("multiplicativeExpression", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken STAR425 = default(IToken);
		IToken DIV426 = default(IToken);
		IToken MOD427 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression424 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression428 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STAR425_tree = default(CommonTree);
		CommonTree DIV426_tree = default(CommonTree);
		CommonTree MOD427_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(856, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// Java.g:857:5: ( unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )* )
			DebugEnterAlt(1);
			// Java.g:857:9: unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(857, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression11451);
			unaryExpression424=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression424.Tree);
			DebugLocation(858, 9);
			// Java.g:858:9: ( ( STAR ^| DIV ^| MOD ^) unaryExpression )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_1 = input.LA(1);

				if ((LA125_1==DIV||LA125_1==MOD||LA125_1==STAR))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:858:13: ( STAR ^| DIV ^| MOD ^) unaryExpression
					{
					DebugLocation(858, 13);
					// Java.g:858:13: ( STAR ^| DIV ^| MOD ^)
					int alt124=3;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, false);
					switch (input.LA(1))
					{
					case STAR:
						{
						alt124 = 1;
						}
						break;
					case DIV:
						{
						alt124 = 2;
						}
						break;
					case MOD:
						{
						alt124 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 124, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:858:17: STAR ^
						{
						DebugLocation(858, 21);
						STAR425=(IToken)Match(input,STAR,Follow._STAR_in_multiplicativeExpression11470); if (state.failed) return retval;
						if (state.backtracking == 0) {
						STAR425_tree = (CommonTree)adaptor.Create(STAR425);
						root_0 = (CommonTree)adaptor.BecomeRoot(STAR425_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:859:17: DIV ^
						{
						DebugLocation(859, 20);
						DIV426=(IToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression11489); if (state.failed) return retval;
						if (state.backtracking == 0) {
						DIV426_tree = (CommonTree)adaptor.Create(DIV426);
						root_0 = (CommonTree)adaptor.BecomeRoot(DIV426_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:860:17: MOD ^
						{
						DebugLocation(860, 20);
						MOD427=(IToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression11508); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MOD427_tree = (CommonTree)adaptor.Create(MOD427);
						root_0 = (CommonTree)adaptor.BecomeRoot(MOD427_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(124); }

					DebugLocation(862, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression11537);
					unaryExpression428=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression428.Tree);

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 101);
			LeaveRule("multiplicativeExpression", 101);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 101, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(864, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// Java.g:866:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 102);
		TraceIn("unaryExpression", 102);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS429 = default(IToken);
		IToken MINUS431 = default(IToken);
		IToken INC433 = default(IToken);
		IToken DEC435 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression434 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionNotPlusMinus437 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS429_tree = default(CommonTree);
		CommonTree MINUS431_tree = default(CommonTree);
		CommonTree INC433_tree = default(CommonTree);
		CommonTree DEC435_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(866, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// Java.g:867:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
			int alt126=5;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt126 = 1;
				}
				break;
			case MINUS:
				{
				alt126 = 2;
				}
				break;
			case INC:
				{
				alt126 = 3;
				}
				break;
			case DEC:
				{
				alt126 = 4;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt126 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:867:9: PLUS unaryExpression
				{
				DebugLocation(867, 9);
				PLUS429=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression11571); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUS.Add(PLUS429);

				DebugLocation(867, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression11573);
				unaryExpression430=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression430.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 867:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
				{
					DebugLocation(867, 41);
					// Java.g:867:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(867, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_PLUS, PLUS429, "UNARY_PLUS"), root_1);

					DebugLocation(867, 75);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:868:9: MINUS unaryExpression
				{
				DebugLocation(868, 9);
				MINUS431=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression11600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(MINUS431);

				DebugLocation(868, 15);
				PushFollow(Follow._unaryExpression_in_unaryExpression11602);
				unaryExpression432=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression432.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 868:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
				{
					DebugLocation(868, 41);
					// Java.g:868:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(868, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_MINUS, MINUS431, "UNARY_MINUS"), root_1);

					DebugLocation(868, 78);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:869:9: INC postfixedExpression
				{
				DebugLocation(869, 9);
				INC433=(IToken)Match(input,INC,Follow._INC_in_unaryExpression11628); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC433);

				DebugLocation(869, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpression11630);
				postfixedExpression434=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression434.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 869:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
				{
					DebugLocation(869, 41);
					// Java.g:869:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(869, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_INC, INC433, "PRE_INC"), root_1);

					DebugLocation(869, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:870:9: DEC postfixedExpression
				{
				DebugLocation(870, 9);
				DEC435=(IToken)Match(input,DEC,Follow._DEC_in_unaryExpression11654); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC435);

				DebugLocation(870, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpression11656);
				postfixedExpression436=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression436.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 870:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
				{
					DebugLocation(870, 41);
					// Java.g:870:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(870, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_DEC, DEC435, "PRE_DEC"), root_1);

					DebugLocation(870, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:871:9: unaryExpressionNotPlusMinus
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(871, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression11680);
				unaryExpressionNotPlusMinus437=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus437.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 102);
			LeaveRule("unaryExpression", 102);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 102, unaryExpression_StartIndex); }

		}
		DebugLocation(872, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// Java.g:874:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 103);
		TraceIn("unaryExpressionNotPlusMinus", 103);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NOT438 = default(IToken);
		IToken LOGICAL_NOT440 = default(IToken);
		IToken LPAREN442 = default(IToken);
		IToken RPAREN444 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type443 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression445 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression446 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NOT438_tree = default(CommonTree);
		CommonTree LOGICAL_NOT440_tree = default(CommonTree);
		CommonTree LPAREN442_tree = default(CommonTree);
		CommonTree RPAREN444_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_LOGICAL_NOT=new RewriteRuleITokenStream(adaptor,"token LOGICAL_NOT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(874, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// Java.g:875:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
			int alt127=4;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				alt127 = 1;
				}
				break;
			case LOGICAL_NOT:
				{
				alt127 = 2;
				}
				break;
			case LPAREN:
				{
				int LA127_2 = input.LA(2);

				if ((EvaluatePredicate(synpred190_Java_fragment)))
				{
					alt127 = 3;
				}
				else if ((true))
				{
					alt127 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt127 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:875:9: NOT unaryExpression
				{
				DebugLocation(875, 9);
				NOT438=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpressionNotPlusMinus11699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT438);

				DebugLocation(875, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11701);
				unaryExpression439=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression439.Tree);


				{
				// AST REWRITE
				// elements: NOT, unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 875:57: -> ^( NOT unaryExpression )
				{
					DebugLocation(875, 61);
					// Java.g:875:61: ^( NOT unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(875, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NOT.NextNode(), root_1);

					DebugLocation(875, 67);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:876:9: LOGICAL_NOT unaryExpression
				{
				DebugLocation(876, 9);
				LOGICAL_NOT440=(IToken)Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_unaryExpressionNotPlusMinus11748); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOGICAL_NOT.Add(LOGICAL_NOT440);

				DebugLocation(876, 21);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11750);
				unaryExpression441=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression441.Tree);


				{
				// AST REWRITE
				// elements: LOGICAL_NOT, unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 876:57: -> ^( LOGICAL_NOT unaryExpression )
				{
					DebugLocation(876, 61);
					// Java.g:876:61: ^( LOGICAL_NOT unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(876, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_LOGICAL_NOT.NextNode(), root_1);

					DebugLocation(876, 75);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:877:9: LPAREN type RPAREN unaryExpression
				{
				DebugLocation(877, 9);
				LPAREN442=(IToken)Match(input,LPAREN,Follow._LPAREN_in_unaryExpressionNotPlusMinus11789); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN442);

				DebugLocation(877, 16);
				PushFollow(Follow._type_in_unaryExpressionNotPlusMinus11791);
				type443=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type443.Tree);
				DebugLocation(877, 21);
				RPAREN444=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unaryExpressionNotPlusMinus11793); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN444);

				DebugLocation(877, 28);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11795);
				unaryExpression445=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression445.Tree);


				{
				// AST REWRITE
				// elements: type, unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 877:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
				{
					DebugLocation(877, 61);
					// Java.g:877:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(877, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, LPAREN442, "CAST_EXPR"), root_1);

					DebugLocation(877, 95);
					adaptor.AddChild(root_1, stream_type.NextTree());
					DebugLocation(877, 100);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:878:9: postfixedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(878, 9);
				PushFollow(Follow._postfixedExpression_in_unaryExpressionNotPlusMinus11830);
				postfixedExpression446=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixedExpression446.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 103);
			LeaveRule("unaryExpressionNotPlusMinus", 103);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 103, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(879, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_postfixedExpression();
	partial void LeaveRule_postfixedExpression();
	// $ANTLR start "postfixedExpression"
	// Java.g:881:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
	[GrammarRule("postfixedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression()
	{
		EnterRule_postfixedExpression();
		EnterRule("postfixedExpression", 104);
		TraceIn("postfixedExpression", 104);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int postfixedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken IDENT449 = default(IToken);
		IToken THIS451 = default(IToken);
		IToken SUPER453 = default(IToken);
		IToken IDENT454 = default(IToken);
		IToken LBRACK457 = default(IToken);
		IToken RBRACK459 = default(IToken);
		IToken INC460 = default(IToken);
		IToken DEC461 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression447 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments450 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments452 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments455 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression456 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression458 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree IDENT449_tree = default(CommonTree);
		CommonTree THIS451_tree = default(CommonTree);
		CommonTree SUPER453_tree = default(CommonTree);
		CommonTree IDENT454_tree = default(CommonTree);
		CommonTree LBRACK457_tree = default(CommonTree);
		CommonTree RBRACK459_tree = default(CommonTree);
		CommonTree INC460_tree = default(CommonTree);
		CommonTree DEC461_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "postfixedExpression");
		DebugLocation(881, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// Java.g:883:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
			DebugEnterAlt(1);
			// Java.g:883:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			{
			DebugLocation(883, 9);
			// Java.g:883:9: ( primaryExpression -> primaryExpression )
			DebugEnterAlt(1);
			// Java.g:883:13: primaryExpression
			{
			DebugLocation(883, 13);
			PushFollow(Follow._primaryExpression_in_postfixedExpression11866);
			primaryExpression447=primaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primaryExpression.Add(primaryExpression447.Tree);


			{
			// AST REWRITE
			// elements: primaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 883:53: -> primaryExpression
			{
				DebugLocation(883, 57);
				adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(886, 9);
			// Java.g:886:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=3;
				try { DebugEnterDecision(132, false);
				int LA132_1 = input.LA(1);

				if ((LA132_1==DOT))
				{
					alt132 = 1;
				}
				else if ((LA132_1==LBRACK))
				{
					alt132 = 2;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:886:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					{
					DebugLocation(886, 21);
					outerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression11928); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(outerDot);

					DebugLocation(887, 13);
					// Java.g:887:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					int alt131=5;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, false);
					switch (input.LA(1))
					{
					case IDENT:
					case LESS_THAN:
						{
						alt131 = 1;
						}
						break;
					case THIS:
						{
						alt131 = 2;
						}
						break;
					case SUPER:
						{
						int LA131_2 = input.LA(2);

						if ((LA131_2==DOT))
						{
							alt131 = 4;
						}
						else if ((LA131_2==LPAREN))
						{
							alt131 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 131, 3, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case NEW:
						{
						alt131 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:887:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						{
						DebugLocation(887, 17);
						// Java.g:887:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
						DebugEnterAlt(1);
						// Java.g:887:21: ( genericTypeArgumentListSimplified )? IDENT
						{
						DebugLocation(887, 21);
						// Java.g:887:21: ( genericTypeArgumentListSimplified )?
						int alt128=2;
						try { DebugEnterSubRule(128);
						try { DebugEnterDecision(128, false);
						int LA128_1 = input.LA(1);

						if ((LA128_1==LESS_THAN))
						{
							alt128 = 1;
						}
						} finally { DebugExitDecision(128); }
						switch (alt128)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:887:21: genericTypeArgumentListSimplified
							{
							DebugLocation(887, 21);
							PushFollow(Follow._genericTypeArgumentListSimplified_in_postfixedExpression11978);
							genericTypeArgumentListSimplified448=genericTypeArgumentListSimplified();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified448.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(128); }

						DebugLocation(889, 21);
						IDENT449=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12060); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT449);



						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, IDENT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 889:53: -> ^( DOT $postfixedExpression IDENT )
						{
							DebugLocation(889, 57);
							// Java.g:889:57: ^( DOT $postfixedExpression IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(889, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(889, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(889, 84);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(891, 17);
						// Java.g:891:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						int alt129=2;
						try { DebugEnterSubRule(129);
						try { DebugEnterDecision(129, false);
						int LA129_1 = input.LA(1);

						if ((LA129_1==LPAREN))
						{
							alt129 = 1;
						}
						} finally { DebugExitDecision(129); }
						switch (alt129)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:891:21: arguments
							{
							DebugLocation(891, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12139);
							arguments450=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments450.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 891:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
							{
								DebugLocation(891, 57);
								// Java.g:891:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(891, 59);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(891, 72);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(891, 92);
								// Java.g:891:92: ( genericTypeArgumentListSimplified )?
								if (stream_genericTypeArgumentListSimplified.HasNext)
								{
									DebugLocation(891, 92);
									adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

								}
								stream_genericTypeArgumentListSimplified.Reset();
								DebugLocation(891, 127);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(129); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:893:17: THIS
						{
						DebugLocation(893, 17);
						THIS451=(IToken)Match(input,THIS,Follow._THIS_in_postfixedExpression12213); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_THIS.Add(THIS451);



						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, THIS
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 893:53: -> ^( DOT $postfixedExpression THIS )
						{
							DebugLocation(893, 57);
							// Java.g:893:57: ^( DOT $postfixedExpression THIS )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(893, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(893, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(893, 84);
							adaptor.AddChild(root_1, stream_THIS.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:894:17: Super= SUPER arguments
						{
						DebugLocation(894, 22);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12276); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(894, 29);
						PushFollow(Follow._arguments_in_postfixedExpression12278);
						arguments452=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments452.Tree);


						{
						// AST REWRITE
						// elements: postfixedExpression, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 894:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
						{
							DebugLocation(894, 61);
							// Java.g:894:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(894, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(894, 121);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(894, 141);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// Java.g:895:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						{
						DebugLocation(895, 17);
						// Java.g:895:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
						DebugEnterAlt(1);
						// Java.g:895:21: SUPER innerDot= DOT IDENT
						{
						DebugLocation(895, 21);
						SUPER453=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12331); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER453);

						DebugLocation(895, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression12335); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(895, 40);
						IDENT454=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12337); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT454);



						{
						// AST REWRITE
						// elements: innerDot, outerDot, postfixedExpression, SUPER, IDENT
						// token labels: innerDot, outerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 895:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
						{
							DebugLocation(895, 57);
							// Java.g:895:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(895, 60);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_1);

							DebugLocation(895, 69);
							// Java.g:895:69: ^( $outerDot $postfixedExpression SUPER )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(895, 72);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_2);

							DebugLocation(895, 82);
							adaptor.AddChild(root_2, stream_retval.NextTree());
							DebugLocation(895, 102);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(895, 109);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(897, 17);
						// Java.g:897:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						int alt130=2;
						try { DebugEnterSubRule(130);
						try { DebugEnterDecision(130, false);
						int LA130_1 = input.LA(1);

						if ((LA130_1==LPAREN))
						{
							alt130 = 1;
						}
						} finally { DebugExitDecision(130); }
						switch (alt130)
						{
						case 1:
							DebugEnterAlt(1);
							// Java.g:897:21: arguments
							{
							DebugLocation(897, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12404);
							arguments455=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments455.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 897:53: -> ^( METHOD_CALL $postfixedExpression arguments )
							{
								DebugLocation(897, 57);
								// Java.g:897:57: ^( METHOD_CALL $postfixedExpression arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(897, 59);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(897, 72);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(897, 92);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(130); }


						}
						break;
					case 5:
						DebugEnterAlt(5);
						// Java.g:899:17: innerNewExpression
						{
						DebugLocation(899, 17);
						PushFollow(Follow._innerNewExpression_in_postfixedExpression12475);
						innerNewExpression456=innerNewExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression456.Tree);


						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, innerNewExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 899:53: -> ^( DOT $postfixedExpression innerNewExpression )
						{
							DebugLocation(899, 57);
							// Java.g:899:57: ^( DOT $postfixedExpression innerNewExpression )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(899, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(899, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(899, 84);
							adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(131); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:901:13: LBRACK expression RBRACK
					{
					DebugLocation(901, 13);
					LBRACK457=(IToken)Match(input,LBRACK,Follow._LBRACK_in_postfixedExpression12532); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LBRACK.Add(LBRACK457);

					DebugLocation(901, 20);
					PushFollow(Follow._expression_in_postfixedExpression12534);
					expression458=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression458.Tree);
					DebugLocation(901, 31);
					RBRACK459=(IToken)Match(input,RBRACK,Follow._RBRACK_in_postfixedExpression12536); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RBRACK.Add(RBRACK459);



					{
					// AST REWRITE
					// elements: postfixedExpression, expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 901:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
					{
						DebugLocation(901, 57);
						// Java.g:901:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(901, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

						DebugLocation(901, 81);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(901, 101);
						adaptor.AddChild(root_1, stream_expression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(904, 9);
			// Java.g:904:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			int alt133=3;
			try { DebugEnterSubRule(133);
			try { DebugEnterDecision(133, false);
			int LA133_1 = input.LA(1);

			if ((LA133_1==INC))
			{
				alt133 = 1;
			}
			else if ((LA133_1==DEC))
			{
				alt133 = 2;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:904:13: INC
				{
				DebugLocation(904, 13);
				INC460=(IToken)Match(input,INC,Follow._INC_in_postfixedExpression12597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC460);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 904:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
				{
					DebugLocation(904, 20);
					// Java.g:904:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(904, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_INC, INC460, "POST_INC"), root_1);

					DebugLocation(904, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:905:13: DEC
				{
				DebugLocation(905, 13);
				DEC461=(IToken)Match(input,DEC,Follow._DEC_in_postfixedExpression12621); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC461);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 905:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
				{
					DebugLocation(905, 20);
					// Java.g:905:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(905, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_DEC, DEC461, "POST_DEC"), root_1);

					DebugLocation(905, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixedExpression", 104);
			LeaveRule("postfixedExpression", 104);
			LeaveRule_postfixedExpression();
			if (state.backtracking > 0) { Memoize(input, 104, postfixedExpression_StartIndex); }

		}
		DebugLocation(907, 4);
		} finally { DebugExitRule(GrammarFileName, "postfixedExpression"); }
		return retval;

	}
	// $ANTLR end "postfixedExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// Java.g:909:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 105);
		TraceIn("primaryExpression", 105);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SUPER467 = default(IToken);
		IToken DOT469 = default(IToken);
		IToken IDENT470 = default(IToken);
		IToken IDENT472 = default(IToken);
		IToken THIS474 = default(IToken);
		IToken THIS476 = default(IToken);
		IToken SUPER478 = default(IToken);
		IToken SUPER480 = default(IToken);
		IToken DOT481 = default(IToken);
		IToken IDENT482 = default(IToken);
		IToken DOT486 = default(IToken);
		IToken CLASS487 = default(IToken);
		IToken VOID488 = default(IToken);
		IToken DOT489 = default(IToken);
		IToken CLASS490 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal463 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newExpression464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression465 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments468 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments471 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments473 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments477 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType484 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator485 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SUPER467_tree = default(CommonTree);
		CommonTree DOT469_tree = default(CommonTree);
		CommonTree IDENT470_tree = default(CommonTree);
		CommonTree IDENT472_tree = default(CommonTree);
		CommonTree THIS474_tree = default(CommonTree);
		CommonTree THIS476_tree = default(CommonTree);
		CommonTree SUPER478_tree = default(CommonTree);
		CommonTree SUPER480_tree = default(CommonTree);
		CommonTree DOT481_tree = default(CommonTree);
		CommonTree IDENT482_tree = default(CommonTree);
		CommonTree DOT486_tree = default(CommonTree);
		CommonTree CLASS487_tree = default(CommonTree);
		CommonTree VOID488_tree = default(CommonTree);
		CommonTree DOT489_tree = default(CommonTree);
		CommonTree CLASS490_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(909, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// Java.g:910:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
			int alt139=10;
			try { DebugEnterDecision(139, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt139 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt139 = 2;
				}
				break;
			case NEW:
				{
				alt139 = 3;
				}
				break;
			case IDENT:
				{
				alt139 = 4;
				}
				break;
			case LESS_THAN:
				{
				alt139 = 5;
				}
				break;
			case THIS:
				{
				alt139 = 6;
				}
				break;
			case SUPER:
				{
				int LA139_2 = input.LA(2);

				if ((LA139_2==DOT))
				{
					alt139 = 8;
				}
				else if ((LA139_2==LPAREN))
				{
					alt139 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt139 = 9;
				}
				break;
			case VOID:
				{
				alt139 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:910:9: parenthesizedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(910, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression12669);
				parenthesizedExpression462=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parenthesizedExpression462.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:911:9: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(911, 9);
				PushFollow(Follow._literal_in_primaryExpression12679);
				literal463=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal463.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:912:9: newExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(912, 9);
				PushFollow(Follow._newExpression_in_primaryExpression12689);
				newExpression464=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression464.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:913:9: qualifiedIdentExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(913, 9);
				PushFollow(Follow._qualifiedIdentExpression_in_primaryExpression12699);
				qualifiedIdentExpression465=qualifiedIdentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentExpression465.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:914:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				{
				DebugLocation(914, 9);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_primaryExpression12709);
				genericTypeArgumentListSimplified466=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified466.Tree);
				DebugLocation(915, 9);
				// Java.g:915:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				int alt135=3;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				switch (input.LA(1))
				{
				case SUPER:
					{
					alt135 = 1;
					}
					break;
				case IDENT:
					{
					alt135 = 2;
					}
					break;
				case THIS:
					{
					alt135 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 135, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:915:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(915, 13);
					SUPER467=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression12724); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(SUPER467);

					DebugLocation(916, 13);
					// Java.g:916:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt134=2;
					try { DebugEnterSubRule(134);
					try { DebugEnterDecision(134, false);
					int LA134_1 = input.LA(1);

					if ((LA134_1==LPAREN))
					{
						alt134 = 1;
					}
					else if ((LA134_1==DOT))
					{
						alt134 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:916:17: arguments
						{
						DebugLocation(916, 17);
						PushFollow(Follow._arguments_in_primaryExpression12742);
						arguments468=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments468.Tree);


						{
						// AST REWRITE
						// elements: genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 916:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(916, 61);
							// Java.g:916:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(916, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER467, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(916, 120);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(916, 154);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:917:17: DOT IDENT arguments
						{
						DebugLocation(917, 17);
						DOT469=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression12802); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(DOT469);

						DebugLocation(917, 21);
						IDENT470=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12804); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT470);

						DebugLocation(917, 27);
						PushFollow(Follow._arguments_in_primaryExpression12806);
						arguments471=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments471.Tree);


						{
						// AST REWRITE
						// elements: DOT, SUPER, IDENT, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 917:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(917, 61);
							// Java.g:917:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(917, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(917, 75);
							// Java.g:917:75: ^( DOT SUPER IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(917, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(917, 81);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());
							DebugLocation(917, 87);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(917, 94);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(917, 128);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(134); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:919:13: IDENT arguments
					{
					DebugLocation(919, 13);
					IDENT472=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12873); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT472);

					DebugLocation(919, 19);
					PushFollow(Follow._arguments_in_primaryExpression12875);
					arguments473=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments473.Tree);


					{
					// AST REWRITE
					// elements: IDENT, genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 919:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(919, 61);
						// Java.g:919:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(919, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(919, 75);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(919, 81);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(919, 115);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:920:13: THIS arguments
					{
					DebugLocation(920, 13);
					THIS474=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression12930); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS474);

					DebugLocation(920, 18);
					PushFollow(Follow._arguments_in_primaryExpression12932);
					arguments475=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments475.Tree);


					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 920:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(920, 61);
						// Java.g:920:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(920, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS474, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(920, 117);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(920, 151);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:922:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				{
				DebugLocation(922, 9);
				// Java.g:922:9: ( THIS -> THIS )
				DebugEnterAlt(1);
				// Java.g:922:13: THIS
				{
				DebugLocation(922, 13);
				THIS476=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression12997); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THIS.Add(THIS476);



				{
				// AST REWRITE
				// elements: THIS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 922:57: -> THIS
				{
					DebugLocation(922, 61);
					adaptor.AddChild(root_0, stream_THIS.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(924, 9);
				// Java.g:924:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, false);
				int LA136_1 = input.LA(1);

				if ((LA136_1==LPAREN))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:924:13: arguments
					{
					DebugLocation(924, 13);
					PushFollow(Follow._arguments_in_primaryExpression13065);
					arguments477=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments477.Tree);


					{
					// AST REWRITE
					// elements: arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 924:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
					{
						DebugLocation(924, 61);
						// Java.g:924:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(924, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS476, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(924, 117);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(136); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:926:9: SUPER arguments
				{
				DebugLocation(926, 9);
				SUPER478=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13130); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER478);

				DebugLocation(926, 15);
				PushFollow(Follow._arguments_in_primaryExpression13132);
				arguments479=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments479.Tree);


				{
				// AST REWRITE
				// elements: arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 926:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
				{
					DebugLocation(926, 61);
					// Java.g:926:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(926, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER478, "SUPER_CONSTRUCTOR_CALL"), root_1);

					DebugLocation(926, 120);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:927:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				{
				DebugLocation(927, 9);
				// Java.g:927:9: ( SUPER DOT IDENT )
				DebugEnterAlt(1);
				// Java.g:927:13: SUPER DOT IDENT
				{
				DebugLocation(927, 13);
				SUPER480=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13188); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER480);

				DebugLocation(927, 19);
				DOT481=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT481);

				DebugLocation(927, 23);
				IDENT482=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression13192); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT482);


				}

				DebugLocation(929, 9);
				// Java.g:929:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				int LA137_1 = input.LA(1);

				if ((LA137_1==LPAREN))
				{
					alt137 = 1;
				}
				else if ((LA137_1==EOF||(LA137_1>=AND && LA137_1<=AND_ASSIGN)||LA137_1==ASSIGN||(LA137_1>=BIT_SHIFT_RIGHT && LA137_1<=BIT_SHIFT_RIGHT_ASSIGN)||(LA137_1>=COLON && LA137_1<=COMMA)||LA137_1==DEC||(LA137_1>=DIV && LA137_1<=DIV_ASSIGN)||LA137_1==DOT||LA137_1==EQUAL||(LA137_1>=GREATER_OR_EQUAL && LA137_1<=GREATER_THAN)||(LA137_1>=INC && LA137_1<=INSTANCEOF)||LA137_1==LBRACK||(LA137_1>=LESS_OR_EQUAL && LA137_1<=LESS_THAN)||LA137_1==LOGICAL_AND||LA137_1==LOGICAL_OR||(LA137_1>=MINUS && LA137_1<=MOD)||LA137_1==MOD_ASSIGN||LA137_1==NOT_EQUAL||(LA137_1>=OR && LA137_1<=OR_ASSIGN)||(LA137_1>=PLUS && LA137_1<=PLUS_ASSIGN)||(LA137_1>=QUESTION && LA137_1<=RCURLY)||(LA137_1>=RPAREN && LA137_1<=SHIFT_RIGHT_ASSIGN)||(LA137_1>=STAR && LA137_1<=STAR_ASSIGN)||(LA137_1>=XOR && LA137_1<=XOR_ASSIGN)))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:929:13: arguments
					{
					DebugLocation(929, 13);
					PushFollow(Follow._arguments_in_primaryExpression13216);
					arguments483=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments483.Tree);


					{
					// AST REWRITE
					// elements: DOT, SUPER, IDENT, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 929:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
					{
						DebugLocation(929, 61);
						// Java.g:929:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(929, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(929, 75);
						// Java.g:929:75: ^( DOT SUPER IDENT )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(929, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

						DebugLocation(929, 81);
						adaptor.AddChild(root_2, stream_SUPER.NextNode());
						DebugLocation(929, 87);
						adaptor.AddChild(root_2, stream_IDENT.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(929, 94);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:930:57: 
					{

					{
					// AST REWRITE
					// elements: DOT, SUPER, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 930:57: -> ^( DOT SUPER IDENT )
					{
						DebugLocation(930, 61);
						// Java.g:930:61: ^( DOT SUPER IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(930, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(930, 67);
						adaptor.AddChild(root_1, stream_SUPER.NextNode());
						DebugLocation(930, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(137); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:932:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
				{
				DebugLocation(932, 9);
				// Java.g:932:9: ( primitiveType -> primitiveType )
				DebugEnterAlt(1);
				// Java.g:932:13: primitiveType
				{
				DebugLocation(932, 13);
				PushFollow(Follow._primitiveType_in_primaryExpression13358);
				primitiveType484=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType484.Tree);


				{
				// AST REWRITE
				// elements: primitiveType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 932:57: -> primitiveType
				{
					DebugLocation(932, 61);
					adaptor.AddChild(root_0, stream_primitiveType.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(934, 9);
				// Java.g:934:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_1 = input.LA(1);

					if ((LA138_1==LBRACK))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch ( alt138 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:934:13: arrayDeclarator
						{
						DebugLocation(934, 13);
						PushFollow(Follow._arrayDeclarator_in_primaryExpression13417);
						arrayDeclarator485=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator485.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 934:57: -> ^( arrayDeclarator $primaryExpression)
						{
							DebugLocation(934, 61);
							// Java.g:934:61: ^( arrayDeclarator $primaryExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(934, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(934, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						goto loop138;
					}
				}

				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(936, 9);
				DOT486=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13480); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT486);

				DebugLocation(936, 13);
				CLASS487=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS487);



				{
				// AST REWRITE
				// elements: DOT, primaryExpression, CLASS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 936:57: -> ^( DOT $primaryExpression CLASS )
				{
					DebugLocation(936, 61);
					// Java.g:936:61: ^( DOT $primaryExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(936, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(936, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(936, 86);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:937:9: VOID DOT CLASS
				{
				DebugLocation(937, 9);
				VOID488=(IToken)Match(input,VOID,Follow._VOID_in_primaryExpression13542); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VOID.Add(VOID488);

				DebugLocation(937, 14);
				DOT489=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13544); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT489);

				DebugLocation(937, 18);
				CLASS490=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13546); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS490);



				{
				// AST REWRITE
				// elements: DOT, VOID, CLASS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 937:57: -> ^( DOT VOID CLASS )
				{
					DebugLocation(937, 61);
					// Java.g:937:61: ^( DOT VOID CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(937, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(937, 67);
					adaptor.AddChild(root_1, stream_VOID.NextNode());
					DebugLocation(937, 72);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 105);
			LeaveRule("primaryExpression", 105);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 105, primaryExpression_StartIndex); }

		}
		DebugLocation(938, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_qualifiedIdentExpression();
	partial void LeaveRule_qualifiedIdentExpression();
	// $ANTLR start "qualifiedIdentExpression"
	// Java.g:940:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
	[GrammarRule("qualifiedIdentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression()
	{
		EnterRule_qualifiedIdentExpression();
		EnterRule("qualifiedIdentExpression", 106);
		TraceIn("qualifiedIdentExpression", 106);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken DOT493 = default(IToken);
		IToken CLASS494 = default(IToken);
		IToken CLASS496 = default(IToken);
		IToken SUPER499 = default(IToken);
		IToken IDENT500 = default(IToken);
		IToken IDENT502 = default(IToken);
		IToken THIS504 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator492 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified497 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments503 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments505 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression506 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree DOT493_tree = default(CommonTree);
		CommonTree CLASS494_tree = default(CommonTree);
		CommonTree CLASS496_tree = default(CommonTree);
		CommonTree SUPER499_tree = default(CommonTree);
		CommonTree IDENT500_tree = default(CommonTree);
		CommonTree IDENT502_tree = default(CommonTree);
		CommonTree THIS504_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentExpression");
		DebugLocation(940, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// Java.g:942:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
			DebugEnterAlt(1);
			// Java.g:942:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			{
			DebugLocation(942, 9);
			// Java.g:942:9: ( qualifiedIdentifier -> qualifiedIdentifier )
			DebugEnterAlt(1);
			// Java.g:942:13: qualifiedIdentifier
			{
			DebugLocation(942, 13);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentExpression13626);
			qualifiedIdentifier491=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentifier.Add(qualifiedIdentifier491.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 942:61: -> qualifiedIdentifier
			{
				DebugLocation(942, 65);
				adaptor.AddChild(root_0, stream_qualifiedIdentifier.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(945, 9);
			// Java.g:945:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			int alt143=4;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case LBRACK:
				{
				int LA143_2 = input.LA(2);

				if ((EvaluatePredicate(synpred218_Java_fragment)))
				{
					alt143 = 1;
				}
				}
				break;
			case LPAREN:
				{
				alt143 = 2;
				}
				break;
			case DOT:
				{
				int LA143_2 = input.LA(2);

				if ((EvaluatePredicate(synpred226_Java_fragment)))
				{
					alt143 = 3;
				}
				}
				break;
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:945:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				{
				DebugLocation(945, 13);
				// Java.g:945:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
				int cnt140=0;
				try { DebugEnterSubRule(140);
				while (true)
				{
					int alt140=2;
					try { DebugEnterDecision(140, false);
					int LA140_1 = input.LA(1);

					if ((LA140_1==LBRACK))
					{
						alt140 = 1;
					}


					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:945:17: arrayDeclarator
						{
						DebugLocation(945, 17);
						PushFollow(Follow._arrayDeclarator_in_qualifiedIdentExpression13696);
						arrayDeclarator492=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator492.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, qualifiedIdentExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 945:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
						{
							DebugLocation(945, 61);
							// Java.g:945:61: ^( arrayDeclarator $qualifiedIdentExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(945, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(945, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						if (cnt140 >= 1)
							goto loop140;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee140 = new EarlyExitException( 140, input );
						DebugRecognitionException(eee140);
						throw eee140;
					}
					cnt140++;
				}
				loop140:
					;

				} finally { DebugExitSubRule(140); }

				DebugLocation(947, 13);
				// Java.g:947:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				DebugEnterAlt(1);
				// Java.g:947:17: DOT CLASS
				{
				DebugLocation(947, 17);
				DOT493=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13764); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT493);

				DebugLocation(947, 21);
				CLASS494=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13766); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS494);



				{
				// AST REWRITE
				// elements: DOT, qualifiedIdentExpression, CLASS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 947:57: -> ^( DOT $qualifiedIdentExpression CLASS )
				{
					DebugLocation(947, 61);
					// Java.g:947:61: ^( DOT $qualifiedIdentExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(947, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(947, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(947, 93);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:949:13: arguments
				{
				DebugLocation(949, 13);
				PushFollow(Follow._arguments_in_qualifiedIdentExpression13836);
				arguments495=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments495.Tree);


				{
				// AST REWRITE
				// elements: qualifiedIdentifier, arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 949:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
				{
					DebugLocation(949, 61);
					// Java.g:949:61: ^( METHOD_CALL qualifiedIdentifier arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(949, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(949, 75);
					adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
					DebugLocation(949, 95);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:950:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				{
				DebugLocation(950, 21);
				outerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13897); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(outerDot);

				DebugLocation(951, 13);
				// Java.g:951:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				int alt142=5;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, false);
				switch (input.LA(1))
				{
				case CLASS:
					{
					alt142 = 1;
					}
					break;
				case LESS_THAN:
					{
					alt142 = 2;
					}
					break;
				case THIS:
					{
					alt142 = 3;
					}
					break;
				case SUPER:
					{
					alt142 = 4;
					}
					break;
				case NEW:
					{
					alt142 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 142, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:951:17: CLASS
					{
					DebugLocation(951, 17);
					CLASS496=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13915); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLASS.Add(CLASS496);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 951:57: -> ^( DOT qualifiedIdentifier CLASS )
					{
						DebugLocation(951, 61);
						// Java.g:951:61: ^( DOT qualifiedIdentifier CLASS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(951, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(951, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(951, 87);
						adaptor.AddChild(root_1, stream_CLASS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:952:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(952, 17);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_qualifiedIdentExpression13978);
					genericTypeArgumentListSimplified497=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified497.Tree);
					DebugLocation(953, 17);
					// Java.g:953:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt141=3;
					try { DebugEnterSubRule(141);
					try { DebugEnterDecision(141, false);
					int LA141_1 = input.LA(1);

					if ((LA141_1==SUPER))
					{
						int LA141_2 = input.LA(2);

						if ((LA141_2==DOT))
						{
							alt141 = 2;
						}
						else if ((LA141_2==LPAREN))
						{
							alt141 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 141, 1, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA141_1==IDENT))
					{
						alt141 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:953:21: Super= SUPER arguments
						{
						DebugLocation(953, 26);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14003); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(953, 33);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14005);
						arguments498=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments498.Tree);


						{
						// AST REWRITE
						// elements: qualifiedIdentifier, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 953:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(953, 61);
							// Java.g:953:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(953, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(953, 120);
							adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
							DebugLocation(953, 140);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(953, 174);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:954:21: SUPER innerDot= DOT IDENT arguments
						{
						DebugLocation(954, 21);
						SUPER499=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14055); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER499);

						DebugLocation(954, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression14059); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(954, 40);
						IDENT500=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14061); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT500);

						DebugLocation(954, 46);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14063);
						arguments501=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments501.Tree);


						{
						// AST REWRITE
						// elements: innerDot, outerDot, qualifiedIdentifier, SUPER, IDENT, genericTypeArgumentListSimplified, arguments
						// token labels: innerDot, outerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 954:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(954, 61);
							// Java.g:954:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(954, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(954, 75);
							// Java.g:954:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(954, 78);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_2);

							DebugLocation(954, 87);
							// Java.g:954:87: ^( $outerDot qualifiedIdentifier SUPER )
							{
							CommonTree root_3 = (CommonTree)adaptor.Nil();
							DebugLocation(954, 90);
							root_3 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_3);

							DebugLocation(954, 99);
							adaptor.AddChild(root_3, stream_qualifiedIdentifier.NextTree());
							DebugLocation(954, 119);
							adaptor.AddChild(root_3, stream_SUPER.NextNode());

							adaptor.AddChild(root_2, root_3);
							}
							DebugLocation(954, 126);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(954, 133);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(954, 167);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Java.g:955:21: IDENT arguments
						{
						DebugLocation(955, 21);
						IDENT502=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14113); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT502);

						DebugLocation(955, 27);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14115);
						arguments503=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments503.Tree);


						{
						// AST REWRITE
						// elements: DOT, qualifiedIdentifier, IDENT, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 955:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(955, 61);
							// Java.g:955:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(955, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(955, 75);
							// Java.g:955:75: ^( DOT qualifiedIdentifier IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(955, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(955, 81);
							adaptor.AddChild(root_2, stream_qualifiedIdentifier.NextTree());
							DebugLocation(955, 101);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(955, 108);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(955, 142);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(141); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:957:17: THIS
					{
					DebugLocation(957, 17);
					THIS504=(IToken)Match(input,THIS,Follow._THIS_in_qualifiedIdentExpression14190); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS504);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, THIS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 957:57: -> ^( DOT qualifiedIdentifier THIS )
					{
						DebugLocation(957, 61);
						// Java.g:957:61: ^( DOT qualifiedIdentifier THIS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(957, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(957, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(957, 87);
						adaptor.AddChild(root_1, stream_THIS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:958:17: Super= SUPER arguments
					{
					DebugLocation(958, 22);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14256); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(Super);

					DebugLocation(958, 29);
					PushFollow(Follow._arguments_in_qualifiedIdentExpression14258);
					arguments505=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments505.Tree);


					{
					// AST REWRITE
					// elements: qualifiedIdentifier, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 958:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
					{
						DebugLocation(958, 61);
						// Java.g:958:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(958, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(958, 120);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(958, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:959:17: innerNewExpression
					{
					DebugLocation(959, 17);
					PushFollow(Follow._innerNewExpression_in_qualifiedIdentExpression14306);
					innerNewExpression506=innerNewExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression506.Tree);


					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, innerNewExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 959:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
					{
						DebugLocation(959, 61);
						// Java.g:959:61: ^( DOT qualifiedIdentifier innerNewExpression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(959, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(959, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(959, 87);
						adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(142); }


				}
				break;

			}
			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentExpression", 106);
			LeaveRule("qualifiedIdentExpression", 106);
			LeaveRule_qualifiedIdentExpression();
			if (state.backtracking > 0) { Memoize(input, 106, qualifiedIdentExpression_StartIndex); }

		}
		DebugLocation(962, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentExpression"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentExpression"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// Java.g:964:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
	[GrammarRule("newExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 107);
		TraceIn("newExpression", 107);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW507 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType508 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified510 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified511 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction512 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments513 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody514 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW507_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(964, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// Java.g:965:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
			DebugEnterAlt(1);
			// Java.g:965:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			{
			DebugLocation(965, 9);
			NEW507=(IToken)Match(input,NEW,Follow._NEW_in_newExpression14382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW507);

			DebugLocation(966, 9);
			// Java.g:966:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_1 = input.LA(1);

			if ((LA147_1==BOOLEAN||LA147_1==BYTE||LA147_1==CHAR||LA147_1==DOUBLE||LA147_1==FLOAT||LA147_1==INT||LA147_1==LONG||LA147_1==SHORT))
			{
				alt147 = 1;
			}
			else if ((LA147_1==IDENT||LA147_1==LESS_THAN))
			{
				alt147 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 147, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:966:13: primitiveType newArrayConstruction
				{
				DebugLocation(966, 13);
				PushFollow(Follow._primitiveType_in_newExpression14398);
				primitiveType508=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType508.Tree);
				DebugLocation(966, 27);
				PushFollow(Follow._newArrayConstruction_in_newExpression14400);
				newArrayConstruction509=newArrayConstruction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction509.Tree);


				{
				// AST REWRITE
				// elements: primitiveType, newArrayConstruction
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 967:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
				{
					DebugLocation(967, 17);
					// Java.g:967:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(967, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW507, "STATIC_ARRAY_CREATOR"), root_1);

					DebugLocation(967, 70);
					adaptor.AddChild(root_1, stream_primitiveType.NextTree());
					DebugLocation(967, 84);
					adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:968:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				{
				DebugLocation(968, 13);
				// Java.g:968:13: ( genericTypeArgumentListSimplified )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==LESS_THAN))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:968:13: genericTypeArgumentListSimplified
					{
					DebugLocation(968, 13);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_newExpression14444);
					genericTypeArgumentListSimplified510=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified510.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(968, 48);
				PushFollow(Follow._qualifiedTypeIdentSimplified_in_newExpression14447);
				qualifiedTypeIdentSimplified511=qualifiedTypeIdentSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified511.Tree);
				DebugLocation(969, 13);
				// Java.g:969:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				int LA146_1 = input.LA(1);

				if ((LA146_1==LBRACK))
				{
					alt146 = 1;
				}
				else if ((LA146_1==LPAREN))
				{
					alt146 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:969:17: newArrayConstruction
					{
					DebugLocation(969, 17);
					PushFollow(Follow._newArrayConstruction_in_newExpression14465);
					newArrayConstruction512=newArrayConstruction();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction512.Tree);


					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, newArrayConstruction
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 970:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
					{
						DebugLocation(970, 21);
						// Java.g:970:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(970, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW507, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(970, 74);
						// Java.g:970:74: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(970, 74);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(970, 109);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(970, 138);
						adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:971:17: arguments ( classBody )?
					{
					DebugLocation(971, 17);
					PushFollow(Follow._arguments_in_newExpression14530);
					arguments513=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments513.Tree);
					DebugLocation(971, 27);
					// Java.g:971:27: ( classBody )?
					int alt145=2;
					try { DebugEnterSubRule(145);
					try { DebugEnterDecision(145, false);
					int LA145_1 = input.LA(1);

					if ((LA145_1==LCURLY))
					{
						alt145 = 1;
					}
					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:971:27: classBody
						{
						DebugLocation(971, 27);
						PushFollow(Follow._classBody_in_newExpression14532);
						classBody514=classBody();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_classBody.Add(classBody514.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(145); }



					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, arguments, classBody
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 972:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
					{
						DebugLocation(972, 21);
						// Java.g:972:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(972, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW507, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(972, 76);
						// Java.g:972:76: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(972, 76);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(972, 111);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(972, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());
						DebugLocation(972, 150);
						// Java.g:972:150: ( classBody )?
						if (stream_classBody.HasNext)
						{
							DebugLocation(972, 150);
							adaptor.AddChild(root_1, stream_classBody.NextTree());

						}
						stream_classBody.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(146); }


				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 107);
			LeaveRule("newExpression", 107);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 107, newExpression_StartIndex); }

		}
		DebugLocation(975, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// Java.g:977:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
	[GrammarRule("innerNewExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 108);
		TraceIn("innerNewExpression", 108);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int innerNewExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW515 = default(IToken);
		IToken IDENT517 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments518 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody519 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW515_tree = default(CommonTree);
		CommonTree IDENT517_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(977, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// Java.g:978:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
			DebugEnterAlt(1);
			// Java.g:978:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
			{
			DebugLocation(978, 9);
			NEW515=(IToken)Match(input,NEW,Follow._NEW_in_innerNewExpression14631); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW515);

			DebugLocation(978, 13);
			// Java.g:978:13: ( genericTypeArgumentListSimplified )?
			int alt148=2;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			int LA148_1 = input.LA(1);

			if ((LA148_1==LESS_THAN))
			{
				alt148 = 1;
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:978:13: genericTypeArgumentListSimplified
				{
				DebugLocation(978, 13);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_innerNewExpression14633);
				genericTypeArgumentListSimplified516=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified516.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(148); }

			DebugLocation(978, 48);
			IDENT517=(IToken)Match(input,IDENT,Follow._IDENT_in_innerNewExpression14636); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT517);

			DebugLocation(978, 54);
			PushFollow(Follow._arguments_in_innerNewExpression14638);
			arguments518=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_arguments.Add(arguments518.Tree);
			DebugLocation(978, 64);
			// Java.g:978:64: ( classBody )?
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			int LA149_1 = input.LA(1);

			if ((LA149_1==LCURLY))
			{
				alt149 = 1;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:978:64: classBody
				{
				DebugLocation(978, 64);
				PushFollow(Follow._classBody_in_innerNewExpression14640);
				classBody519=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classBody.Add(classBody519.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(149); }



			{
			// AST REWRITE
			// elements: genericTypeArgumentListSimplified, IDENT, arguments, classBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 979:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
			{
				DebugLocation(979, 13);
				// Java.g:979:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(979, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW515, "STATIC_ARRAY_CREATOR"), root_1);

				DebugLocation(979, 68);
				// Java.g:979:68: ( genericTypeArgumentListSimplified )?
				if (stream_genericTypeArgumentListSimplified.HasNext)
				{
					DebugLocation(979, 68);
					adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

				}
				stream_genericTypeArgumentListSimplified.Reset();
				DebugLocation(979, 103);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(979, 109);
				adaptor.AddChild(root_1, stream_arguments.NextTree());
				DebugLocation(979, 119);
				// Java.g:979:119: ( classBody )?
				if (stream_classBody.HasNext)
				{
					DebugLocation(979, 119);
					adaptor.AddChild(root_1, stream_classBody.NextTree());

				}
				stream_classBody.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerNewExpression", 108);
			LeaveRule("innerNewExpression", 108);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 108, innerNewExpression_StartIndex); }

		}
		DebugLocation(980, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return retval;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// Java.g:982:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	private AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 109);
		TraceIn("newArrayConstruction", 109);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newArrayConstruction_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK522 = default(IToken);
		IToken RBRACK524 = default(IToken);
		IToken LBRACK525 = default(IToken);
		IToken RBRACK527 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList528 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LBRACK522_tree = default(CommonTree);
		CommonTree RBRACK524_tree = default(CommonTree);
		CommonTree LBRACK525_tree = default(CommonTree);
		CommonTree RBRACK527_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(982, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// Java.g:983:5: ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? )
			int alt152=2;
			try { DebugEnterDecision(152, false);
			int LA152_1 = input.LA(1);

			if ((LA152_1==LBRACK))
			{
				int LA152_2 = input.LA(2);

				if ((LA152_2==RBRACK))
				{
					alt152 = 1;
				}
				else if ((LA152_2==BOOLEAN||LA152_2==BYTE||(LA152_2>=CHAR && LA152_2<=CHARACTER_LITERAL)||(LA152_2>=DEC && LA152_2<=DECIMAL_LITERAL)||LA152_2==DOUBLE||LA152_2==FALSE||(LA152_2>=FLOAT && LA152_2<=FLOATING_POINT_LITERAL)||(LA152_2>=HEX_LITERAL && LA152_2<=IDENT)||LA152_2==INC||LA152_2==INT||LA152_2==LESS_THAN||LA152_2==LOGICAL_NOT||(LA152_2>=LONG && LA152_2<=LPAREN)||LA152_2==MINUS||(LA152_2>=NEW && LA152_2<=NOT)||LA152_2==NULL||LA152_2==OCTAL_LITERAL||LA152_2==PLUS||LA152_2==SHORT||(LA152_2>=STRING_LITERAL && LA152_2<=SUPER)||LA152_2==THIS||LA152_2==TRUE||LA152_2==VOID))
				{
					alt152 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 152, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 152, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:983:9: arrayDeclaratorList arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(983, 9);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14686);
				arrayDeclaratorList520=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList520.Tree);
				DebugLocation(983, 29);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction14688);
				arrayInitializer521=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer521.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:984:9: LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(984, 15);
				LBRACK522=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14698); if (state.failed) return retval;
				DebugLocation(984, 17);
				PushFollow(Follow._expression_in_newArrayConstruction14701);
				expression523=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression523.Tree);
				DebugLocation(984, 34);
				RBRACK524=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14703); if (state.failed) return retval;
				DebugLocation(984, 36);
				// Java.g:984:36: ( LBRACK ! expression RBRACK !)*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_1 = input.LA(1);

					if ((LA150_1==LBRACK))
					{
						int LA150_2 = input.LA(2);

						if ((EvaluatePredicate(synpred234_Java_fragment)))
						{
							alt150 = 1;
						}


					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:984:37: LBRACK ! expression RBRACK !
						{
						DebugLocation(984, 43);
						LBRACK525=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14707); if (state.failed) return retval;
						DebugLocation(984, 45);
						PushFollow(Follow._expression_in_newArrayConstruction14710);
						expression526=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression526.Tree);
						DebugLocation(984, 62);
						RBRACK527=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14712); if (state.failed) return retval;

						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(984, 66);
				// Java.g:984:66: ( arrayDeclaratorList )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, false);
				int LA151_1 = input.LA(1);

				if ((LA151_1==LBRACK))
				{
					int LA151_2 = input.LA(2);

					if ((LA151_2==RBRACK))
					{
						alt151 = 1;
					}
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:984:66: arrayDeclaratorList
					{
					DebugLocation(984, 66);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14717);
					arrayDeclaratorList528=arrayDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList528.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(151); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newArrayConstruction", 109);
			LeaveRule("newArrayConstruction", 109);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 109, newArrayConstruction_StartIndex); }

		}
		DebugLocation(985, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return retval;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// Java.g:987:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 110);
		TraceIn("arguments", 110);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN529 = default(IToken);
		IToken RPAREN531 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList530 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN529_tree = default(CommonTree);
		CommonTree RPAREN531_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(987, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// Java.g:988:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
			DebugEnterAlt(1);
			// Java.g:988:9: LPAREN ( expressionList )? RPAREN
			{
			DebugLocation(988, 9);
			LPAREN529=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments14737); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN529);

			DebugLocation(988, 16);
			// Java.g:988:16: ( expressionList )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_1 = input.LA(1);

			if ((LA153_1==BOOLEAN||LA153_1==BYTE||(LA153_1>=CHAR && LA153_1<=CHARACTER_LITERAL)||(LA153_1>=DEC && LA153_1<=DECIMAL_LITERAL)||LA153_1==DOUBLE||LA153_1==FALSE||(LA153_1>=FLOAT && LA153_1<=FLOATING_POINT_LITERAL)||(LA153_1>=HEX_LITERAL && LA153_1<=IDENT)||LA153_1==INC||LA153_1==INT||LA153_1==LESS_THAN||LA153_1==LOGICAL_NOT||(LA153_1>=LONG && LA153_1<=LPAREN)||LA153_1==MINUS||(LA153_1>=NEW && LA153_1<=NOT)||LA153_1==NULL||LA153_1==OCTAL_LITERAL||LA153_1==PLUS||LA153_1==SHORT||(LA153_1>=STRING_LITERAL && LA153_1<=SUPER)||LA153_1==THIS||LA153_1==TRUE||LA153_1==VOID))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:988:16: expressionList
				{
				DebugLocation(988, 16);
				PushFollow(Follow._expressionList_in_arguments14739);
				expressionList530=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList530.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(153); }

			DebugLocation(988, 32);
			RPAREN531=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments14742); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN531);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 989:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
			{
				DebugLocation(989, 13);
				// Java.g:989:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(989, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, LPAREN529, "ARGUMENT_LIST"), root_1);

				DebugLocation(989, 55);
				// Java.g:989:55: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(989, 55);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 110);
			LeaveRule("arguments", 110);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 110, arguments_StartIndex); }

		}
		DebugLocation(990, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Java.g:992:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 111);
		TraceIn("literal", 111);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set532 = default(IToken);

		CommonTree set532_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(992, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// Java.g:993:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(993, 5);

			set532=(IToken)input.LT(1);
			if (input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set532));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 111);
			LeaveRule("literal", 111);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 111, literal_StartIndex); }

		}
		DebugLocation(1002, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_synpred14_Java_fragment();
	partial void LeaveRule_synpred14_Java_fragment();

	// $ANTLR start synpred14_Java
	public void synpred14_Java_fragment()
	{
		EnterRule_synpred14_Java_fragment();
		EnterRule("synpred14_Java_fragment", 125);
		TraceIn("synpred14_Java_fragment", 125);
		try
		{
			// Java.g:310:9: ( GREATER_THAN )
			DebugEnterAlt(1);
			// Java.g:310:9: GREATER_THAN
			{
			DebugLocation(310, 9);
			Match(input,GREATER_THAN,Follow._GREATER_THAN_in_synpred14_Java5125); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Java_fragment", 125);
			LeaveRule("synpred14_Java_fragment", 125);
			LeaveRule_synpred14_Java_fragment();
		}
	}
	// $ANTLR end synpred14_Java

	partial void EnterRule_synpred15_Java_fragment();
	partial void LeaveRule_synpred15_Java_fragment();

	// $ANTLR start synpred15_Java
	public void synpred15_Java_fragment()
	{
		EnterRule_synpred15_Java_fragment();
		EnterRule("synpred15_Java_fragment", 126);
		TraceIn("synpred15_Java_fragment", 126);
		try
		{
			// Java.g:311:9: ( SHIFT_RIGHT )
			DebugEnterAlt(1);
			// Java.g:311:9: SHIFT_RIGHT
			{
			DebugLocation(311, 9);
			Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_synpred15_Java5135); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Java_fragment", 126);
			LeaveRule("synpred15_Java_fragment", 126);
			LeaveRule_synpred15_Java_fragment();
		}
	}
	// $ANTLR end synpred15_Java

	partial void EnterRule_synpred16_Java_fragment();
	partial void LeaveRule_synpred16_Java_fragment();

	// $ANTLR start synpred16_Java
	public void synpred16_Java_fragment()
	{
		EnterRule_synpred16_Java_fragment();
		EnterRule("synpred16_Java_fragment", 127);
		TraceIn("synpred16_Java_fragment", 127);
		try
		{
			// Java.g:312:9: ( BIT_SHIFT_RIGHT )
			DebugEnterAlt(1);
			// Java.g:312:9: BIT_SHIFT_RIGHT
			{
			DebugLocation(312, 9);
			Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_synpred16_Java5145); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Java_fragment", 127);
			LeaveRule("synpred16_Java_fragment", 127);
			LeaveRule_synpred16_Java_fragment();
		}
	}
	// $ANTLR end synpred16_Java

	partial void EnterRule_synpred17_Java_fragment();
	partial void LeaveRule_synpred17_Java_fragment();

	// $ANTLR start synpred17_Java
	public void synpred17_Java_fragment()
	{
		EnterRule_synpred17_Java_fragment();
		EnterRule("synpred17_Java_fragment", 128);
		TraceIn("synpred17_Java_fragment", 128);
		try
		{
			// Java.g:317:15: ( bound )
			DebugEnterAlt(1);
			// Java.g:317:15: bound
			{
			DebugLocation(317, 15);
			PushFollow(Follow._bound_in_synpred17_Java5175);
			bound();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Java_fragment", 128);
			LeaveRule("synpred17_Java_fragment", 128);
			LeaveRule_synpred17_Java_fragment();
		}
	}
	// $ANTLR end synpred17_Java

	partial void EnterRule_synpred32_Java_fragment();
	partial void LeaveRule_synpred32_Java_fragment();

	// $ANTLR start synpred32_Java
	public void synpred32_Java_fragment()
	{
		EnterRule_synpred32_Java_fragment();
		EnterRule("synpred32_Java_fragment", 143);
		TraceIn("synpred32_Java_fragment", 143);
		try
		{
			// Java.g:374:9: ( STATIC block )
			DebugEnterAlt(1);
			// Java.g:374:9: STATIC block
			{
			DebugLocation(374, 9);
			Match(input,STATIC,Follow._STATIC_in_synpred32_Java5707); if (state.failed) return;
			DebugLocation(374, 16);
			PushFollow(Follow._block_in_synpred32_Java5709);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_Java_fragment", 143);
			LeaveRule("synpred32_Java_fragment", 143);
			LeaveRule_synpred32_Java_fragment();
		}
	}
	// $ANTLR end synpred32_Java

	partial void EnterRule_synpred42_Java_fragment();
	partial void LeaveRule_synpred42_Java_fragment();

	// $ANTLR start synpred42_Java
	public void synpred42_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred42_Java_fragment();
		EnterRule("synpred42_Java_fragment", 153);
		TraceIn("synpred42_Java_fragment", 153);
		try
		{
			// Java.g:376:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) )
			DebugEnterAlt(1);
			// Java.g:376:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			{
			DebugLocation(376, 13);
			// Java.g:376:13: ( genericTypeParameterList )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, false);
			int LA159_1 = input.LA(1);

			if ((LA159_1==LESS_THAN))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:376:13: genericTypeParameterList
				{
				DebugLocation(376, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred42_Java5746);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(159); }

			DebugLocation(377, 13);
			// Java.g:377:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			int alt166=3;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt166 = 1;
				}
				break;
			case IDENT:
				{
				int LA166_2 = input.LA(2);

				if ((LA166_2==DOT||LA166_2==IDENT||LA166_2==LBRACK||LA166_2==LESS_THAN))
				{
					alt166 = 1;
				}
				else if ((LA166_2==LPAREN))
				{
					alt166 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 166, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				alt166 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 166, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:377:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(377, 17);
				PushFollow(Follow._type_in_synpred42_Java5765);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(377, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred42_Java5767); if (state.failed) return;
				DebugLocation(377, 28);
				PushFollow(Follow._formalParameterList_in_synpred42_Java5769);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(377, 48);
				// Java.g:377:48: ( arrayDeclaratorList )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, false);
				int LA160_1 = input.LA(1);

				if ((LA160_1==LBRACK))
				{
					alt160 = 1;
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:377:48: arrayDeclaratorList
					{
					DebugLocation(377, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred42_Java5771);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(160); }

				DebugLocation(377, 69);
				// Java.g:377:69: ( throwsClause )?
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, false);
				int LA161_1 = input.LA(1);

				if ((LA161_1==THROWS))
				{
					alt161 = 1;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:377:69: throwsClause
					{
					DebugLocation(377, 69);
					PushFollow(Follow._throwsClause_in_synpred42_Java5774);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(161); }

				DebugLocation(377, 83);
				// Java.g:377:83: ( block | SEMI )
				int alt162=2;
				try { DebugEnterSubRule(162);
				try { DebugEnterDecision(162, false);
				int LA162_1 = input.LA(1);

				if ((LA162_1==LCURLY))
				{
					alt162 = 1;
				}
				else if ((LA162_1==SEMI))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(162); }
				switch (alt162)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:377:84: block
					{
					DebugLocation(377, 84);
					PushFollow(Follow._block_in_synpred42_Java5778);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:377:92: SEMI
					{
					DebugLocation(377, 92);
					Match(input,SEMI,Follow._SEMI_in_synpred42_Java5782); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(162); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:379:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(379, 17);
				Match(input,VOID,Follow._VOID_in_synpred42_Java5844); if (state.failed) return;
				DebugLocation(379, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred42_Java5846); if (state.failed) return;
				DebugLocation(379, 28);
				PushFollow(Follow._formalParameterList_in_synpred42_Java5848);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(379, 48);
				// Java.g:379:48: ( throwsClause )?
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, false);
				int LA163_1 = input.LA(1);

				if ((LA163_1==THROWS))
				{
					alt163 = 1;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:379:48: throwsClause
					{
					DebugLocation(379, 48);
					PushFollow(Follow._throwsClause_in_synpred42_Java5850);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(163); }

				DebugLocation(379, 62);
				// Java.g:379:62: ( block | SEMI )
				int alt164=2;
				try { DebugEnterSubRule(164);
				try { DebugEnterDecision(164, false);
				int LA164_1 = input.LA(1);

				if ((LA164_1==LCURLY))
				{
					alt164 = 1;
				}
				else if ((LA164_1==SEMI))
				{
					alt164 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 164, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(164); }
				switch (alt164)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:379:63: block
					{
					DebugLocation(379, 63);
					PushFollow(Follow._block_in_synpred42_Java5854);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:379:71: SEMI
					{
					DebugLocation(379, 71);
					Match(input,SEMI,Follow._SEMI_in_synpred42_Java5858); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(164); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:381:17: ident= IDENT formalParameterList ( throwsClause )? block
				{
				DebugLocation(381, 22);
				ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred42_Java5917); if (state.failed) return;
				DebugLocation(381, 29);
				PushFollow(Follow._formalParameterList_in_synpred42_Java5919);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(381, 49);
				// Java.g:381:49: ( throwsClause )?
				int alt165=2;
				try { DebugEnterSubRule(165);
				try { DebugEnterDecision(165, false);
				int LA165_1 = input.LA(1);

				if ((LA165_1==THROWS))
				{
					alt165 = 1;
				}
				} finally { DebugExitDecision(165); }
				switch (alt165)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:381:49: throwsClause
					{
					DebugLocation(381, 49);
					PushFollow(Follow._throwsClause_in_synpred42_Java5921);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(165); }

				DebugLocation(381, 63);
				PushFollow(Follow._block_in_synpred42_Java5924);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(166); }


			}

		}
		finally
		{
			TraceOut("synpred42_Java_fragment", 153);
			LeaveRule("synpred42_Java_fragment", 153);
			LeaveRule_synpred42_Java_fragment();
		}
	}
	// $ANTLR end synpred42_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	public void synpred43_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 154);
		TraceIn("synpred43_Java_fragment", 154);
		try
		{
			// Java.g:375:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// Java.g:375:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
			{
			DebugLocation(375, 9);
			PushFollow(Follow._modifierList_in_synpred43_Java5732);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(376, 9);
			// Java.g:376:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt175 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA175_2 = input.LA(2);

				if ((EvaluatePredicate(synpred42_Java_fragment)))
				{
					alt175 = 1;
				}
				else if ((true))
				{
					alt175 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 175, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA175_2 = input.LA(2);

				if ((EvaluatePredicate(synpred42_Java_fragment)))
				{
					alt175 = 1;
				}
				else if ((true))
				{
					alt175 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 175, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 175, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:376:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				{
				DebugLocation(376, 13);
				// Java.g:376:13: ( genericTypeParameterList )?
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, false);
				int LA167_1 = input.LA(1);

				if ((LA167_1==LESS_THAN))
				{
					alt167 = 1;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:376:13: genericTypeParameterList
					{
					DebugLocation(376, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred43_Java5746);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(167); }

				DebugLocation(377, 13);
				// Java.g:377:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				int alt174=3;
				try { DebugEnterSubRule(174);
				try { DebugEnterDecision(174, false);
				switch (input.LA(1))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					alt174 = 1;
					}
					break;
				case IDENT:
					{
					int LA174_2 = input.LA(2);

					if ((LA174_2==DOT||LA174_2==IDENT||LA174_2==LBRACK||LA174_2==LESS_THAN))
					{
						alt174 = 1;
					}
					else if ((LA174_2==LPAREN))
					{
						alt174 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 174, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VOID:
					{
					alt174 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 174, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(174); }
				switch (alt174)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:377:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(377, 17);
					PushFollow(Follow._type_in_synpred43_Java5765);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(377, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred43_Java5767); if (state.failed) return;
					DebugLocation(377, 28);
					PushFollow(Follow._formalParameterList_in_synpred43_Java5769);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(377, 48);
					// Java.g:377:48: ( arrayDeclaratorList )?
					int alt168=2;
					try { DebugEnterSubRule(168);
					try { DebugEnterDecision(168, false);
					int LA168_1 = input.LA(1);

					if ((LA168_1==LBRACK))
					{
						alt168 = 1;
					}
					} finally { DebugExitDecision(168); }
					switch (alt168)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:377:48: arrayDeclaratorList
						{
						DebugLocation(377, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred43_Java5771);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(168); }

					DebugLocation(377, 69);
					// Java.g:377:69: ( throwsClause )?
					int alt169=2;
					try { DebugEnterSubRule(169);
					try { DebugEnterDecision(169, false);
					int LA169_1 = input.LA(1);

					if ((LA169_1==THROWS))
					{
						alt169 = 1;
					}
					} finally { DebugExitDecision(169); }
					switch (alt169)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:377:69: throwsClause
						{
						DebugLocation(377, 69);
						PushFollow(Follow._throwsClause_in_synpred43_Java5774);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(169); }

					DebugLocation(377, 83);
					// Java.g:377:83: ( block | SEMI )
					int alt170=2;
					try { DebugEnterSubRule(170);
					try { DebugEnterDecision(170, false);
					int LA170_1 = input.LA(1);

					if ((LA170_1==LCURLY))
					{
						alt170 = 1;
					}
					else if ((LA170_1==SEMI))
					{
						alt170 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 170, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(170); }
					switch (alt170)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:377:84: block
						{
						DebugLocation(377, 84);
						PushFollow(Follow._block_in_synpred43_Java5778);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:377:92: SEMI
						{
						DebugLocation(377, 92);
						Match(input,SEMI,Follow._SEMI_in_synpred43_Java5782); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(170); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:379:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(379, 17);
					Match(input,VOID,Follow._VOID_in_synpred43_Java5844); if (state.failed) return;
					DebugLocation(379, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred43_Java5846); if (state.failed) return;
					DebugLocation(379, 28);
					PushFollow(Follow._formalParameterList_in_synpred43_Java5848);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(379, 48);
					// Java.g:379:48: ( throwsClause )?
					int alt171=2;
					try { DebugEnterSubRule(171);
					try { DebugEnterDecision(171, false);
					int LA171_1 = input.LA(1);

					if ((LA171_1==THROWS))
					{
						alt171 = 1;
					}
					} finally { DebugExitDecision(171); }
					switch (alt171)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:379:48: throwsClause
						{
						DebugLocation(379, 48);
						PushFollow(Follow._throwsClause_in_synpred43_Java5850);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(171); }

					DebugLocation(379, 62);
					// Java.g:379:62: ( block | SEMI )
					int alt172=2;
					try { DebugEnterSubRule(172);
					try { DebugEnterDecision(172, false);
					int LA172_1 = input.LA(1);

					if ((LA172_1==LCURLY))
					{
						alt172 = 1;
					}
					else if ((LA172_1==SEMI))
					{
						alt172 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 172, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:379:63: block
						{
						DebugLocation(379, 63);
						PushFollow(Follow._block_in_synpred43_Java5854);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Java.g:379:71: SEMI
						{
						DebugLocation(379, 71);
						Match(input,SEMI,Follow._SEMI_in_synpred43_Java5858); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(172); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:381:17: ident= IDENT formalParameterList ( throwsClause )? block
					{
					DebugLocation(381, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred43_Java5917); if (state.failed) return;
					DebugLocation(381, 29);
					PushFollow(Follow._formalParameterList_in_synpred43_Java5919);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(381, 49);
					// Java.g:381:49: ( throwsClause )?
					int alt173=2;
					try { DebugEnterSubRule(173);
					try { DebugEnterDecision(173, false);
					int LA173_1 = input.LA(1);

					if ((LA173_1==THROWS))
					{
						alt173 = 1;
					}
					} finally { DebugExitDecision(173); }
					switch (alt173)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:381:49: throwsClause
						{
						DebugLocation(381, 49);
						PushFollow(Follow._throwsClause_in_synpred43_Java5921);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(173); }

					DebugLocation(381, 63);
					PushFollow(Follow._block_in_synpred43_Java5924);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(174); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:384:13: type classFieldDeclaratorList SEMI
				{
				DebugLocation(384, 13);
				PushFollow(Follow._type_in_synpred43_Java5988);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(384, 18);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred43_Java5990);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(384, 43);
				Match(input,SEMI,Follow._SEMI_in_synpred43_Java5992); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(175); }


			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 154);
			LeaveRule("synpred43_Java_fragment", 154);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred44_Java_fragment();
	partial void LeaveRule_synpred44_Java_fragment();

	// $ANTLR start synpred44_Java
	public void synpred44_Java_fragment()
	{
		EnterRule_synpred44_Java_fragment();
		EnterRule("synpred44_Java_fragment", 155);
		TraceIn("synpred44_Java_fragment", 155);
		try
		{
			// Java.g:387:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// Java.g:387:9: typeDeclaration
			{
			DebugLocation(387, 9);
			PushFollow(Follow._typeDeclaration_in_synpred44_Java6037);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred44_Java_fragment", 155);
			LeaveRule("synpred44_Java_fragment", 155);
			LeaveRule_synpred44_Java_fragment();
		}
	}
	// $ANTLR end synpred44_Java

	partial void EnterRule_synpred50_Java_fragment();
	partial void LeaveRule_synpred50_Java_fragment();

	// $ANTLR start synpred50_Java
	public void synpred50_Java_fragment()
	{
		EnterRule_synpred50_Java_fragment();
		EnterRule("synpred50_Java_fragment", 161);
		TraceIn("synpred50_Java_fragment", 161);
		try
		{
			// Java.g:393:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
			DebugEnterAlt(1);
			// Java.g:393:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			{
			DebugLocation(393, 13);
			// Java.g:393:13: ( genericTypeParameterList )?
			int alt178=2;
			try { DebugEnterSubRule(178);
			try { DebugEnterDecision(178, false);
			int LA178_1 = input.LA(1);

			if ((LA178_1==LESS_THAN))
			{
				alt178 = 1;
			}
			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:393:13: genericTypeParameterList
				{
				DebugLocation(393, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred50_Java6093);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(178); }

			DebugLocation(394, 13);
			// Java.g:394:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_1 = input.LA(1);

			if ((LA182_1==BOOLEAN||LA182_1==BYTE||LA182_1==CHAR||LA182_1==DOUBLE||LA182_1==FLOAT||LA182_1==IDENT||LA182_1==INT||LA182_1==LONG||LA182_1==SHORT))
			{
				alt182 = 1;
			}
			else if ((LA182_1==VOID))
			{
				alt182 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 182, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:394:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
				{
				DebugLocation(394, 17);
				PushFollow(Follow._type_in_synpred50_Java6112);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(394, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred50_Java6114); if (state.failed) return;
				DebugLocation(394, 28);
				PushFollow(Follow._formalParameterList_in_synpred50_Java6116);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(394, 48);
				// Java.g:394:48: ( arrayDeclaratorList )?
				int alt179=2;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				int LA179_1 = input.LA(1);

				if ((LA179_1==LBRACK))
				{
					alt179 = 1;
				}
				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:394:48: arrayDeclaratorList
					{
					DebugLocation(394, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred50_Java6118);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(179); }

				DebugLocation(394, 69);
				// Java.g:394:69: ( throwsClause )?
				int alt180=2;
				try { DebugEnterSubRule(180);
				try { DebugEnterDecision(180, false);
				int LA180_1 = input.LA(1);

				if ((LA180_1==THROWS))
				{
					alt180 = 1;
				}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:394:69: throwsClause
					{
					DebugLocation(394, 69);
					PushFollow(Follow._throwsClause_in_synpred50_Java6121);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(180); }

				DebugLocation(394, 83);
				Match(input,SEMI,Follow._SEMI_in_synpred50_Java6124); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:396:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
				{
				DebugLocation(396, 17);
				Match(input,VOID,Follow._VOID_in_synpred50_Java6182); if (state.failed) return;
				DebugLocation(396, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred50_Java6184); if (state.failed) return;
				DebugLocation(396, 28);
				PushFollow(Follow._formalParameterList_in_synpred50_Java6186);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(396, 48);
				// Java.g:396:48: ( throwsClause )?
				int alt181=2;
				try { DebugEnterSubRule(181);
				try { DebugEnterDecision(181, false);
				int LA181_1 = input.LA(1);

				if ((LA181_1==THROWS))
				{
					alt181 = 1;
				}
				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:396:48: throwsClause
					{
					DebugLocation(396, 48);
					PushFollow(Follow._throwsClause_in_synpred50_Java6188);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(181); }

				DebugLocation(396, 62);
				Match(input,SEMI,Follow._SEMI_in_synpred50_Java6191); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(182); }


			}

		}
		finally
		{
			TraceOut("synpred50_Java_fragment", 161);
			LeaveRule("synpred50_Java_fragment", 161);
			LeaveRule_synpred50_Java_fragment();
		}
	}
	// $ANTLR end synpred50_Java

	partial void EnterRule_synpred51_Java_fragment();
	partial void LeaveRule_synpred51_Java_fragment();

	// $ANTLR start synpred51_Java
	public void synpred51_Java_fragment()
	{
		EnterRule_synpred51_Java_fragment();
		EnterRule("synpred51_Java_fragment", 162);
		TraceIn("synpred51_Java_fragment", 162);
		try
		{
			// Java.g:392:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// Java.g:392:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			{
			DebugLocation(392, 9);
			PushFollow(Follow._modifierList_in_synpred51_Java6079);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(393, 9);
			// Java.g:393:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt188 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred50_Java_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred50_Java_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:393:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				{
				DebugLocation(393, 13);
				// Java.g:393:13: ( genericTypeParameterList )?
				int alt183=2;
				try { DebugEnterSubRule(183);
				try { DebugEnterDecision(183, false);
				int LA183_1 = input.LA(1);

				if ((LA183_1==LESS_THAN))
				{
					alt183 = 1;
				}
				} finally { DebugExitDecision(183); }
				switch (alt183)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:393:13: genericTypeParameterList
					{
					DebugLocation(393, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred51_Java6093);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(183); }

				DebugLocation(394, 13);
				// Java.g:394:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, false);
				int LA187_1 = input.LA(1);

				if ((LA187_1==BOOLEAN||LA187_1==BYTE||LA187_1==CHAR||LA187_1==DOUBLE||LA187_1==FLOAT||LA187_1==IDENT||LA187_1==INT||LA187_1==LONG||LA187_1==SHORT))
				{
					alt187 = 1;
				}
				else if ((LA187_1==VOID))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 187, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:394:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
					{
					DebugLocation(394, 17);
					PushFollow(Follow._type_in_synpred51_Java6112);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(394, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred51_Java6114); if (state.failed) return;
					DebugLocation(394, 28);
					PushFollow(Follow._formalParameterList_in_synpred51_Java6116);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(394, 48);
					// Java.g:394:48: ( arrayDeclaratorList )?
					int alt184=2;
					try { DebugEnterSubRule(184);
					try { DebugEnterDecision(184, false);
					int LA184_1 = input.LA(1);

					if ((LA184_1==LBRACK))
					{
						alt184 = 1;
					}
					} finally { DebugExitDecision(184); }
					switch (alt184)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:394:48: arrayDeclaratorList
						{
						DebugLocation(394, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred51_Java6118);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(184); }

					DebugLocation(394, 69);
					// Java.g:394:69: ( throwsClause )?
					int alt185=2;
					try { DebugEnterSubRule(185);
					try { DebugEnterDecision(185, false);
					int LA185_1 = input.LA(1);

					if ((LA185_1==THROWS))
					{
						alt185 = 1;
					}
					} finally { DebugExitDecision(185); }
					switch (alt185)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:394:69: throwsClause
						{
						DebugLocation(394, 69);
						PushFollow(Follow._throwsClause_in_synpred51_Java6121);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(185); }

					DebugLocation(394, 83);
					Match(input,SEMI,Follow._SEMI_in_synpred51_Java6124); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:396:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
					{
					DebugLocation(396, 17);
					Match(input,VOID,Follow._VOID_in_synpred51_Java6182); if (state.failed) return;
					DebugLocation(396, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred51_Java6184); if (state.failed) return;
					DebugLocation(396, 28);
					PushFollow(Follow._formalParameterList_in_synpred51_Java6186);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(396, 48);
					// Java.g:396:48: ( throwsClause )?
					int alt186=2;
					try { DebugEnterSubRule(186);
					try { DebugEnterDecision(186, false);
					int LA186_1 = input.LA(1);

					if ((LA186_1==THROWS))
					{
						alt186 = 1;
					}
					} finally { DebugExitDecision(186); }
					switch (alt186)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:396:48: throwsClause
						{
						DebugLocation(396, 48);
						PushFollow(Follow._throwsClause_in_synpred51_Java6188);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(186); }

					DebugLocation(396, 62);
					Match(input,SEMI,Follow._SEMI_in_synpred51_Java6191); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(187); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:399:13: type interfaceFieldDeclaratorList SEMI
				{
				DebugLocation(399, 13);
				PushFollow(Follow._type_in_synpred51_Java6254);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(399, 18);
				PushFollow(Follow._interfaceFieldDeclaratorList_in_synpred51_Java6256);
				interfaceFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(399, 47);
				Match(input,SEMI,Follow._SEMI_in_synpred51_Java6258); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(188); }


			}

		}
		finally
		{
			TraceOut("synpred51_Java_fragment", 162);
			LeaveRule("synpred51_Java_fragment", 162);
			LeaveRule_synpred51_Java_fragment();
		}
	}
	// $ANTLR end synpred51_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	public void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 163);
		TraceIn("synpred52_Java_fragment", 163);
		try
		{
			// Java.g:402:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// Java.g:402:9: typeDeclaration
			{
			DebugLocation(402, 9);
			PushFollow(Follow._typeDeclaration_in_synpred52_Java6303);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 163);
			LeaveRule("synpred52_Java_fragment", 163);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred58_Java_fragment();
	partial void LeaveRule_synpred58_Java_fragment();

	// $ANTLR start synpred58_Java
	public void synpred58_Java_fragment()
	{
		EnterRule_synpred58_Java_fragment();
		EnterRule("synpred58_Java_fragment", 169);
		TraceIn("synpred58_Java_fragment", 169);
		try
		{
			// Java.g:441:9: ( arrayDeclarator )
			DebugEnterAlt(1);
			// Java.g:441:9: arrayDeclarator
			{
			DebugLocation(441, 9);
			PushFollow(Follow._arrayDeclarator_in_synpred58_Java6605);
			arrayDeclarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred58_Java_fragment", 169);
			LeaveRule("synpred58_Java_fragment", 169);
			LeaveRule_synpred58_Java_fragment();
		}
	}
	// $ANTLR end synpred58_Java

	partial void EnterRule_synpred76_Java_fragment();
	partial void LeaveRule_synpred76_Java_fragment();

	// $ANTLR start synpred76_Java
	public void synpred76_Java_fragment()
	{
		EnterRule_synpred76_Java_fragment();
		EnterRule("synpred76_Java_fragment", 187);
		TraceIn("synpred76_Java_fragment", 187);
		try
		{
			// Java.g:490:23: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// Java.g:490:23: arrayDeclaratorList
			{
			DebugLocation(490, 23);
			PushFollow(Follow._arrayDeclaratorList_in_synpred76_Java7006);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred76_Java_fragment", 187);
			LeaveRule("synpred76_Java_fragment", 187);
			LeaveRule_synpred76_Java_fragment();
		}
	}
	// $ANTLR end synpred76_Java

	partial void EnterRule_synpred77_Java_fragment();
	partial void LeaveRule_synpred77_Java_fragment();

	// $ANTLR start synpred77_Java
	public void synpred77_Java_fragment()
	{
		EnterRule_synpred77_Java_fragment();
		EnterRule("synpred77_Java_fragment", 188);
		TraceIn("synpred77_Java_fragment", 188);
		try
		{
			// Java.g:495:28: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// Java.g:495:28: arrayDeclaratorList
			{
			DebugLocation(495, 28);
			PushFollow(Follow._arrayDeclaratorList_in_synpred77_Java7055);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred77_Java_fragment", 188);
			LeaveRule("synpred77_Java_fragment", 188);
			LeaveRule_synpred77_Java_fragment();
		}
	}
	// $ANTLR end synpred77_Java

	partial void EnterRule_synpred79_Java_fragment();
	partial void LeaveRule_synpred79_Java_fragment();

	// $ANTLR start synpred79_Java
	public void synpred79_Java_fragment()
	{
		EnterRule_synpred79_Java_fragment();
		EnterRule("synpred79_Java_fragment", 190);
		TraceIn("synpred79_Java_fragment", 190);
		try
		{
			// Java.g:505:20: ( DOT typeIdent )
			DebugEnterAlt(1);
			// Java.g:505:20: DOT typeIdent
			{
			DebugLocation(505, 20);
			Match(input,DOT,Follow._DOT_in_synpred79_Java7140); if (state.failed) return;
			DebugLocation(505, 24);
			PushFollow(Follow._typeIdent_in_synpred79_Java7142);
			typeIdent();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred79_Java_fragment", 190);
			LeaveRule("synpred79_Java_fragment", 190);
			LeaveRule_synpred79_Java_fragment();
		}
	}
	// $ANTLR end synpred79_Java

	partial void EnterRule_synpred90_Java_fragment();
	partial void LeaveRule_synpred90_Java_fragment();

	// $ANTLR start synpred90_Java
	public void synpred90_Java_fragment()
	{
		EnterRule_synpred90_Java_fragment();
		EnterRule("synpred90_Java_fragment", 201);
		TraceIn("synpred90_Java_fragment", 201);
		try
		{
			// Java.g:534:40: ( COMMA genericTypeArgument )
			DebugEnterAlt(1);
			// Java.g:534:40: COMMA genericTypeArgument
			{
			DebugLocation(534, 40);
			Match(input,COMMA,Follow._COMMA_in_synpred90_Java7367); if (state.failed) return;
			DebugLocation(534, 46);
			PushFollow(Follow._genericTypeArgument_in_synpred90_Java7369);
			genericTypeArgument();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_Java_fragment", 201);
			LeaveRule("synpred90_Java_fragment", 201);
			LeaveRule_synpred90_Java_fragment();
		}
	}
	// $ANTLR end synpred90_Java

	partial void EnterRule_synpred92_Java_fragment();
	partial void LeaveRule_synpred92_Java_fragment();

	// $ANTLR start synpred92_Java
	public void synpred92_Java_fragment()
	{
		EnterRule_synpred92_Java_fragment();
		EnterRule("synpred92_Java_fragment", 203);
		TraceIn("synpred92_Java_fragment", 203);
		try
		{
			// Java.g:540:18: ( genericWildcardBoundType )
			DebugEnterAlt(1);
			// Java.g:540:18: genericWildcardBoundType
			{
			DebugLocation(540, 18);
			PushFollow(Follow._genericWildcardBoundType_in_synpred92_Java7423);
			genericWildcardBoundType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred92_Java_fragment", 203);
			LeaveRule("synpred92_Java_fragment", 203);
			LeaveRule_synpred92_Java_fragment();
		}
	}
	// $ANTLR end synpred92_Java

	partial void EnterRule_synpred97_Java_fragment();
	partial void LeaveRule_synpred97_Java_fragment();

	// $ANTLR start synpred97_Java
	public void synpred97_Java_fragment()
	{
		EnterRule_synpred97_Java_fragment();
		EnterRule("synpred97_Java_fragment", 208);
		TraceIn("synpred97_Java_fragment", 208);
		try
		{
			// Java.g:565:42: ( COMMA formalParameterStandardDecl )
			DebugEnterAlt(1);
			// Java.g:565:42: COMMA formalParameterStandardDecl
			{
			DebugLocation(565, 42);
			Match(input,COMMA,Follow._COMMA_in_synpred97_Java7641); if (state.failed) return;
			DebugLocation(565, 48);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred97_Java7643);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_Java_fragment", 208);
			LeaveRule("synpred97_Java_fragment", 208);
			LeaveRule_synpred97_Java_fragment();
		}
	}
	// $ANTLR end synpred97_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	public void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 210);
		TraceIn("synpred99_Java_fragment", 210);
		try
		{
			// Java.g:565:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
			DebugEnterAlt(1);
			// Java.g:565:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
			{
			DebugLocation(565, 13);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred99_Java7638);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(565, 41);
			// Java.g:565:41: ( COMMA formalParameterStandardDecl )*
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=2;
				try { DebugEnterDecision(191, false);
				int LA191_1 = input.LA(1);

				if ((LA191_1==COMMA))
				{
					int LA191_2 = input.LA(2);

					if ((EvaluatePredicate(synpred97_Java_fragment)))
					{
						alt191 = 1;
					}


				}


				} finally { DebugExitDecision(191); }
				switch ( alt191 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:565:42: COMMA formalParameterStandardDecl
					{
					DebugLocation(565, 42);
					Match(input,COMMA,Follow._COMMA_in_synpred99_Java7641); if (state.failed) return;
					DebugLocation(565, 48);
					PushFollow(Follow._formalParameterStandardDecl_in_synpred99_Java7643);
					formalParameterStandardDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop191;
				}
			}

			loop191:
				;

			} finally { DebugExitSubRule(191); }

			DebugLocation(565, 78);
			// Java.g:565:78: ( COMMA formalParameterVarArgDecl )?
			int alt192=2;
			try { DebugEnterSubRule(192);
			try { DebugEnterDecision(192, false);
			int LA192_1 = input.LA(1);

			if ((LA192_1==COMMA))
			{
				alt192 = 1;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:565:79: COMMA formalParameterVarArgDecl
				{
				DebugLocation(565, 79);
				Match(input,COMMA,Follow._COMMA_in_synpred99_Java7648); if (state.failed) return;
				DebugLocation(565, 85);
				PushFollow(Follow._formalParameterVarArgDecl_in_synpred99_Java7650);
				formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(192); }


			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 210);
			LeaveRule("synpred99_Java_fragment", 210);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred100_Java_fragment();
	partial void LeaveRule_synpred100_Java_fragment();

	// $ANTLR start synpred100_Java
	public void synpred100_Java_fragment()
	{
		EnterRule_synpred100_Java_fragment();
		EnterRule("synpred100_Java_fragment", 211);
		TraceIn("synpred100_Java_fragment", 211);
		try
		{
			// Java.g:568:13: ( formalParameterVarArgDecl )
			DebugEnterAlt(1);
			// Java.g:568:13: formalParameterVarArgDecl
			{
			DebugLocation(568, 13);
			PushFollow(Follow._formalParameterVarArgDecl_in_synpred100_Java7707);
			formalParameterVarArgDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred100_Java_fragment", 211);
			LeaveRule("synpred100_Java_fragment", 211);
			LeaveRule_synpred100_Java_fragment();
		}
	}
	// $ANTLR end synpred100_Java

	partial void EnterRule_synpred101_Java_fragment();
	partial void LeaveRule_synpred101_Java_fragment();

	// $ANTLR start synpred101_Java
	public void synpred101_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred101_Java_fragment();
		EnterRule("synpred101_Java_fragment", 212);
		TraceIn("synpred101_Java_fragment", 212);
		try
		{
			// Java.g:589:13: ( DOT ident= IDENT )
			DebugEnterAlt(1);
			// Java.g:589:13: DOT ident= IDENT
			{
			DebugLocation(589, 13);
			Match(input,DOT,Follow._DOT_in_synpred101_Java7952); if (state.failed) return;
			DebugLocation(589, 22);
			ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred101_Java7956); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred101_Java_fragment", 212);
			LeaveRule("synpred101_Java_fragment", 212);
			LeaveRule_synpred101_Java_fragment();
		}
	}
	// $ANTLR end synpred101_Java

	partial void EnterRule_synpred102_Java_fragment();
	partial void LeaveRule_synpred102_Java_fragment();

	// $ANTLR start synpred102_Java
	public void synpred102_Java_fragment()
	{
		EnterRule_synpred102_Java_fragment();
		EnterRule("synpred102_Java_fragment", 213);
		TraceIn("synpred102_Java_fragment", 213);
		try
		{
			// Java.g:596:9: ( annotation )
			DebugEnterAlt(1);
			// Java.g:596:9: annotation
			{
			DebugLocation(596, 9);
			PushFollow(Follow._annotation_in_synpred102_Java8009);
			annotation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred102_Java_fragment", 213);
			LeaveRule("synpred102_Java_fragment", 213);
			LeaveRule_synpred102_Java_fragment();
		}
	}
	// $ANTLR end synpred102_Java

	partial void EnterRule_synpred114_Java_fragment();
	partial void LeaveRule_synpred114_Java_fragment();

	// $ANTLR start synpred114_Java
	public void synpred114_Java_fragment()
	{
		EnterRule_synpred114_Java_fragment();
		EnterRule("synpred114_Java_fragment", 225);
		TraceIn("synpred114_Java_fragment", 225);
		try
		{
			// Java.g:647:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// Java.g:647:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			{
			DebugLocation(647, 9);
			PushFollow(Follow._modifierList_in_synpred114_Java8463);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(647, 22);
			PushFollow(Follow._type_in_synpred114_Java8465);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(648, 9);
			// Java.g:648:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_1 = input.LA(1);

			if ((LA197_1==IDENT))
			{
				int LA197_2 = input.LA(2);

				if ((LA197_2==LPAREN))
				{
					alt197 = 1;
				}
				else if ((LA197_2==ASSIGN||LA197_2==COMMA||LA197_2==LBRACK||LA197_2==SEMI))
				{
					alt197 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 197, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 197, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:648:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
				{
				DebugLocation(648, 13);
				Match(input,IDENT,Follow._IDENT_in_synpred114_Java8479); if (state.failed) return;
				DebugLocation(648, 19);
				Match(input,LPAREN,Follow._LPAREN_in_synpred114_Java8481); if (state.failed) return;
				DebugLocation(648, 26);
				Match(input,RPAREN,Follow._RPAREN_in_synpred114_Java8483); if (state.failed) return;
				DebugLocation(648, 33);
				// Java.g:648:33: ( annotationDefaultValue )?
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				int LA196_1 = input.LA(1);

				if ((LA196_1==DEFAULT))
				{
					alt196 = 1;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:648:33: annotationDefaultValue
					{
					DebugLocation(648, 33);
					PushFollow(Follow._annotationDefaultValue_in_synpred114_Java8485);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(196); }

				DebugLocation(648, 57);
				Match(input,SEMI,Follow._SEMI_in_synpred114_Java8488); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:650:13: classFieldDeclaratorList SEMI
				{
				DebugLocation(650, 13);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred114_Java8530);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(650, 38);
				Match(input,SEMI,Follow._SEMI_in_synpred114_Java8532); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(197); }


			}

		}
		finally
		{
			TraceOut("synpred114_Java_fragment", 225);
			LeaveRule("synpred114_Java_fragment", 225);
			LeaveRule_synpred114_Java_fragment();
		}
	}
	// $ANTLR end synpred114_Java

	partial void EnterRule_synpred116_Java_fragment();
	partial void LeaveRule_synpred116_Java_fragment();

	// $ANTLR start synpred116_Java
	public void synpred116_Java_fragment()
	{
		EnterRule_synpred116_Java_fragment();
		EnterRule("synpred116_Java_fragment", 227);
		TraceIn("synpred116_Java_fragment", 227);
		try
		{
			// Java.g:668:9: ( localVariableDeclaration SEMI )
			DebugEnterAlt(1);
			// Java.g:668:9: localVariableDeclaration SEMI
			{
			DebugLocation(668, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred116_Java8667);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(668, 34);
			Match(input,SEMI,Follow._SEMI_in_synpred116_Java8669); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred116_Java_fragment", 227);
			LeaveRule("synpred116_Java_fragment", 227);
			LeaveRule_synpred116_Java_fragment();
		}
	}
	// $ANTLR end synpred116_Java

	partial void EnterRule_synpred117_Java_fragment();
	partial void LeaveRule_synpred117_Java_fragment();

	// $ANTLR start synpred117_Java
	public void synpred117_Java_fragment()
	{
		EnterRule_synpred117_Java_fragment();
		EnterRule("synpred117_Java_fragment", 228);
		TraceIn("synpred117_Java_fragment", 228);
		try
		{
			// Java.g:669:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// Java.g:669:9: typeDeclaration
			{
			DebugLocation(669, 9);
			PushFollow(Follow._typeDeclaration_in_synpred117_Java8680);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Java_fragment", 228);
			LeaveRule("synpred117_Java_fragment", 228);
			LeaveRule_synpred117_Java_fragment();
		}
	}
	// $ANTLR end synpred117_Java

	partial void EnterRule_synpred121_Java_fragment();
	partial void LeaveRule_synpred121_Java_fragment();

	// $ANTLR start synpred121_Java
	public void synpred121_Java_fragment()
	{
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);

		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 232);
		TraceIn("synpred121_Java_fragment", 232);
		try
		{
			// Java.g:686:13: ( ELSE elseStat= statement )
			DebugEnterAlt(1);
			// Java.g:686:13: ELSE elseStat= statement
			{
			DebugLocation(686, 13);
			Match(input,ELSE,Follow._ELSE_in_synpred121_Java8978); if (state.failed) return;
			DebugLocation(686, 26);
			PushFollow(Follow._statement_in_synpred121_Java8982);
			elseStat=statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 232);
			LeaveRule("synpred121_Java_fragment", 232);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java

	partial void EnterRule_synpred123_Java_fragment();
	partial void LeaveRule_synpred123_Java_fragment();

	// $ANTLR start synpred123_Java
	public void synpred123_Java_fragment()
	{
		EnterRule_synpred123_Java_fragment();
		EnterRule("synpred123_Java_fragment", 234);
		TraceIn("synpred123_Java_fragment", 234);
		try
		{
			// Java.g:690:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
			DebugEnterAlt(1);
			// Java.g:690:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
			{
			DebugLocation(690, 13);
			PushFollow(Follow._forInit_in_synpred123_Java9165);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(690, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred123_Java9167); if (state.failed) return;
			DebugLocation(690, 26);
			PushFollow(Follow._forCondition_in_synpred123_Java9169);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(690, 39);
			Match(input,SEMI,Follow._SEMI_in_synpred123_Java9171); if (state.failed) return;
			DebugLocation(690, 44);
			PushFollow(Follow._forUpdater_in_synpred123_Java9173);
			forUpdater();
			PopFollow();
			if (state.failed) return;
			DebugLocation(690, 55);
			Match(input,RPAREN,Follow._RPAREN_in_synpred123_Java9175); if (state.failed) return;
			DebugLocation(690, 62);
			PushFollow(Follow._statement_in_synpred123_Java9177);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred123_Java_fragment", 234);
			LeaveRule("synpred123_Java_fragment", 234);
			LeaveRule_synpred123_Java_fragment();
		}
	}
	// $ANTLR end synpred123_Java

	partial void EnterRule_synpred143_Java_fragment();
	partial void LeaveRule_synpred143_Java_fragment();

	// $ANTLR start synpred143_Java
	public void synpred143_Java_fragment()
	{
		EnterRule_synpred143_Java_fragment();
		EnterRule("synpred143_Java_fragment", 254);
		TraceIn("synpred143_Java_fragment", 254);
		try
		{
			// Java.g:728:9: ( switchCaseLabel )
			DebugEnterAlt(1);
			// Java.g:728:9: switchCaseLabel
			{
			DebugLocation(728, 9);
			PushFollow(Follow._switchCaseLabel_in_synpred143_Java10144);
			switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred143_Java_fragment", 254);
			LeaveRule("synpred143_Java_fragment", 254);
			LeaveRule_synpred143_Java_fragment();
		}
	}
	// $ANTLR end synpred143_Java

	partial void EnterRule_synpred146_Java_fragment();
	partial void LeaveRule_synpred146_Java_fragment();

	// $ANTLR start synpred146_Java
	public void synpred146_Java_fragment()
	{
		EnterRule_synpred146_Java_fragment();
		EnterRule("synpred146_Java_fragment", 257);
		TraceIn("synpred146_Java_fragment", 257);
		try
		{
			// Java.g:740:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// Java.g:740:9: localVariableDeclaration
			{
			DebugLocation(740, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred146_Java10234);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred146_Java_fragment", 257);
			LeaveRule("synpred146_Java_fragment", 257);
			LeaveRule_synpred146_Java_fragment();
		}
	}
	// $ANTLR end synpred146_Java

	partial void EnterRule_synpred147_Java_fragment();
	partial void LeaveRule_synpred147_Java_fragment();

	// $ANTLR start synpred147_Java
	public void synpred147_Java_fragment()
	{
		EnterRule_synpred147_Java_fragment();
		EnterRule("synpred147_Java_fragment", 258);
		TraceIn("synpred147_Java_fragment", 258);
		try
		{
			// Java.g:741:9: ( expressionList )
			DebugEnterAlt(1);
			// Java.g:741:9: expressionList
			{
			DebugLocation(741, 9);
			PushFollow(Follow._expressionList_in_synpred147_Java10256);
			expressionList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred147_Java_fragment", 258);
			LeaveRule("synpred147_Java_fragment", 258);
			LeaveRule_synpred147_Java_fragment();
		}
	}
	// $ANTLR end synpred147_Java

	partial void EnterRule_synpred190_Java_fragment();
	partial void LeaveRule_synpred190_Java_fragment();

	// $ANTLR start synpred190_Java
	public void synpred190_Java_fragment()
	{
		EnterRule_synpred190_Java_fragment();
		EnterRule("synpred190_Java_fragment", 301);
		TraceIn("synpred190_Java_fragment", 301);
		try
		{
			// Java.g:877:9: ( LPAREN type RPAREN unaryExpression )
			DebugEnterAlt(1);
			// Java.g:877:9: LPAREN type RPAREN unaryExpression
			{
			DebugLocation(877, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred190_Java11789); if (state.failed) return;
			DebugLocation(877, 16);
			PushFollow(Follow._type_in_synpred190_Java11791);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(877, 21);
			Match(input,RPAREN,Follow._RPAREN_in_synpred190_Java11793); if (state.failed) return;
			DebugLocation(877, 28);
			PushFollow(Follow._unaryExpression_in_synpred190_Java11795);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred190_Java_fragment", 301);
			LeaveRule("synpred190_Java_fragment", 301);
			LeaveRule_synpred190_Java_fragment();
		}
	}
	// $ANTLR end synpred190_Java

	partial void EnterRule_synpred218_Java_fragment();
	partial void LeaveRule_synpred218_Java_fragment();

	// $ANTLR start synpred218_Java
	public void synpred218_Java_fragment()
	{
		EnterRule_synpred218_Java_fragment();
		EnterRule("synpred218_Java_fragment", 329);
		TraceIn("synpred218_Java_fragment", 329);
		try
		{
			// Java.g:945:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
			DebugEnterAlt(1);
			// Java.g:945:13: ( arrayDeclarator )+ ( DOT CLASS )
			{
			DebugLocation(945, 13);
			// Java.g:945:13: ( arrayDeclarator )+
			int cnt220=0;
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_1 = input.LA(1);

				if ((LA220_1==LBRACK))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch (alt220)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:945:17: arrayDeclarator
					{
					DebugLocation(945, 17);
					PushFollow(Follow._arrayDeclarator_in_synpred218_Java13696);
					arrayDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt220 >= 1)
						goto loop220;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee220 = new EarlyExitException( 220, input );
					DebugRecognitionException(eee220);
					throw eee220;
				}
				cnt220++;
			}
			loop220:
				;

			} finally { DebugExitSubRule(220); }

			DebugLocation(947, 13);
			// Java.g:947:13: ( DOT CLASS )
			DebugEnterAlt(1);
			// Java.g:947:17: DOT CLASS
			{
			DebugLocation(947, 17);
			Match(input,DOT,Follow._DOT_in_synpred218_Java13764); if (state.failed) return;
			DebugLocation(947, 21);
			Match(input,CLASS,Follow._CLASS_in_synpred218_Java13766); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred218_Java_fragment", 329);
			LeaveRule("synpred218_Java_fragment", 329);
			LeaveRule_synpred218_Java_fragment();
		}
	}
	// $ANTLR end synpred218_Java

	partial void EnterRule_synpred226_Java_fragment();
	partial void LeaveRule_synpred226_Java_fragment();

	// $ANTLR start synpred226_Java
	public void synpred226_Java_fragment()
	{
		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);

		EnterRule_synpred226_Java_fragment();
		EnterRule("synpred226_Java_fragment", 337);
		TraceIn("synpred226_Java_fragment", 337);
		try
		{
			// Java.g:950:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression ) )
			DebugEnterAlt(1);
			// Java.g:950:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			{
			DebugLocation(950, 21);
			outerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred226_Java13897); if (state.failed) return;
			DebugLocation(951, 13);
			// Java.g:951:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			int alt223=5;
			try { DebugEnterSubRule(223);
			try { DebugEnterDecision(223, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt223 = 1;
				}
				break;
			case LESS_THAN:
				{
				alt223 = 2;
				}
				break;
			case THIS:
				{
				alt223 = 3;
				}
				break;
			case SUPER:
				{
				alt223 = 4;
				}
				break;
			case NEW:
				{
				alt223 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 223, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(223); }
			switch (alt223)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:951:17: CLASS
				{
				DebugLocation(951, 17);
				Match(input,CLASS,Follow._CLASS_in_synpred226_Java13915); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:952:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				{
				DebugLocation(952, 17);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred226_Java13978);
				genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return;
				DebugLocation(953, 17);
				// Java.g:953:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				int alt222=3;
				try { DebugEnterSubRule(222);
				try { DebugEnterDecision(222, false);
				int LA222_1 = input.LA(1);

				if ((LA222_1==SUPER))
				{
					int LA222_2 = input.LA(2);

					if ((LA222_2==DOT))
					{
						alt222 = 2;
					}
					else if ((LA222_2==LPAREN))
					{
						alt222 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 222, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA222_1==IDENT))
				{
					alt222 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 222, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(222); }
				switch (alt222)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:953:21: Super= SUPER arguments
					{
					DebugLocation(953, 26);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred226_Java14003); if (state.failed) return;
					DebugLocation(953, 33);
					PushFollow(Follow._arguments_in_synpred226_Java14005);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:954:21: SUPER innerDot= DOT IDENT arguments
					{
					DebugLocation(954, 21);
					Match(input,SUPER,Follow._SUPER_in_synpred226_Java14055); if (state.failed) return;
					DebugLocation(954, 35);
					innerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred226_Java14059); if (state.failed) return;
					DebugLocation(954, 40);
					Match(input,IDENT,Follow._IDENT_in_synpred226_Java14061); if (state.failed) return;
					DebugLocation(954, 46);
					PushFollow(Follow._arguments_in_synpred226_Java14063);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:955:21: IDENT arguments
					{
					DebugLocation(955, 21);
					Match(input,IDENT,Follow._IDENT_in_synpred226_Java14113); if (state.failed) return;
					DebugLocation(955, 27);
					PushFollow(Follow._arguments_in_synpred226_Java14115);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(222); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:957:17: THIS
				{
				DebugLocation(957, 17);
				Match(input,THIS,Follow._THIS_in_synpred226_Java14190); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:958:17: Super= SUPER arguments
				{
				DebugLocation(958, 22);
				Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred226_Java14256); if (state.failed) return;
				DebugLocation(958, 29);
				PushFollow(Follow._arguments_in_synpred226_Java14258);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:959:17: innerNewExpression
				{
				DebugLocation(959, 17);
				PushFollow(Follow._innerNewExpression_in_synpred226_Java14306);
				innerNewExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(223); }


			}

		}
		finally
		{
			TraceOut("synpred226_Java_fragment", 337);
			LeaveRule("synpred226_Java_fragment", 337);
			LeaveRule_synpred226_Java_fragment();
		}
	}
	// $ANTLR end synpred226_Java

	partial void EnterRule_synpred234_Java_fragment();
	partial void LeaveRule_synpred234_Java_fragment();

	// $ANTLR start synpred234_Java
	public void synpred234_Java_fragment()
	{
		EnterRule_synpred234_Java_fragment();
		EnterRule("synpred234_Java_fragment", 345);
		TraceIn("synpred234_Java_fragment", 345);
		try
		{
			// Java.g:984:37: ( LBRACK expression RBRACK )
			DebugEnterAlt(1);
			// Java.g:984:37: LBRACK expression RBRACK
			{
			DebugLocation(984, 37);
			Match(input,LBRACK,Follow._LBRACK_in_synpred234_Java14707); if (state.failed) return;
			DebugLocation(984, 45);
			PushFollow(Follow._expression_in_synpred234_Java14710);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(984, 56);
			Match(input,RBRACK,Follow._RBRACK_in_synpred234_Java14712); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred234_Java_fragment", 345);
			LeaveRule("synpred234_Java_fragment", 345);
			LeaveRule_synpred234_Java_fragment();
		}
	}
	// $ANTLR end synpred234_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _compilationUnit_in_javaSource4512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationList_in_compilationUnit4548 = new BitSet(new ulong[]{0x100000800400012UL,0x8040000084000004UL,0x4004105010380UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit4559 = new BitSet(new ulong[]{0x100000800400012UL,0x40000084000004UL,0x4004105010380UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit4571 = new BitSet(new ulong[]{0x100000800400012UL,0x40000084000004UL,0x4004105010380UL});
		public static readonly BitSet _typeDecls_in_compilationUnit4583 = new BitSet(new ulong[]{0x100000800400012UL,0x40000080000004UL,0x4004105010380UL});
		public static readonly BitSet _typeDeclaration_in_typeDecls4603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDecls4613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration4633 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration4636 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration4638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration4664 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x1000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration4667 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration4670 = new BitSet(new ulong[]{0x10000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration4672 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_importDeclaration4675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_typeDeclaration4699 = new BitSet(new ulong[]{0x100000800400000UL,0x80000000UL});
		public static readonly BitSet _classTypeDeclaration_in_typeDeclaration4714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceTypeDeclaration_in_typeDeclaration4729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumTypeDeclaration_in_typeDeclaration4744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_typeDeclaration4759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_classTypeDeclaration4794 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classTypeDeclaration4796 = new BitSet(new ulong[]{0x4000000000000000UL,0x14001000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classTypeDeclaration4798 = new BitSet(new ulong[]{0x4000000000000000UL,0x4001000000UL});
		public static readonly BitSet _classExtendsClause_in_classTypeDeclaration4801 = new BitSet(new ulong[]{0x0UL,0x4001000000UL});
		public static readonly BitSet _implementsClause_in_classTypeDeclaration4804 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_classTypeDeclaration4807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_classExtendsClause4860 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_classExtendsClause4862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_interfaceExtendsClause4906 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _typeList_in_interfaceExtendsClause4908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_implementsClause4952 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _typeList_in_implementsClause4954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeParameterList4999 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5001 = new BitSet(new ulong[]{0x20000800000UL,0x80000UL,0x80000UL});
		public static readonly BitSet _COMMA_in_genericTypeParameterList5004 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5006 = new BitSet(new ulong[]{0x20000800000UL,0x80000UL,0x80000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeParameterList5010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_genericTypeListClosing5125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_genericTypeListClosing5135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_genericTypeListClosing5145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter5173 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _bound_in_genericTypeParameter5175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_bound5221 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_bound5223 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_bound5226 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_bound5228 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _ENUM_in_enumTypeDeclaration5269 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_enumTypeDeclaration5271 = new BitSet(new ulong[]{0x0UL,0x4001000000UL});
		public static readonly BitSet _implementsClause_in_enumTypeDeclaration5273 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _enumBody_in_enumTypeDeclaration5276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_enumBody5323 = new BitSet(new ulong[]{0x400000UL,0x400000UL});
		public static readonly BitSet _enumScopeDeclarations_in_enumBody5325 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _RCURLY_in_enumBody5327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstants_in_enumScopeDeclarations5364 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_enumScopeDeclarations5367 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000UL});
		public static readonly BitSet _enumClassScopeDeclarations_in_enumScopeDeclarations5372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumClassScopeDeclarations5392 = new BitSet(new ulong[]{0x120000A14400012UL,0x404140A0400014UL,0x5004105210380UL});
		public static readonly BitSet _classScopeDeclarations_in_enumClassScopeDeclarations5394 = new BitSet(new ulong[]{0x120000A14400012UL,0x404140A0400014UL,0x5004105210380UL});
		public static readonly BitSet _enumConstant_in_enumConstants5433 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_enumConstants5436 = new BitSet(new ulong[]{0x400000UL,0x400000UL});
		public static readonly BitSet _enumConstant_in_enumConstants5439 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _annotationList_in_enumConstant5464 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_enumConstant5466 = new BitSet(new ulong[]{0x2UL,0x804000000000UL});
		public static readonly BitSet _arguments_in_enumConstant5469 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_enumConstant5472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_in_interfaceTypeDeclaration5497 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_interfaceTypeDeclaration5499 = new BitSet(new ulong[]{0x4000000000000000UL,0x14000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceTypeDeclaration5501 = new BitSet(new ulong[]{0x4000000000000000UL,0x4000000000UL});
		public static readonly BitSet _interfaceExtendsClause_in_interfaceTypeDeclaration5504 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _interfaceBody_in_interfaceTypeDeclaration5507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList5557 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_typeList5560 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_typeList5563 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _LCURLY_in_classBody5588 = new BitSet(new ulong[]{0x120000A14400010UL,0x404140A0400014UL,0x5004105212380UL});
		public static readonly BitSet _classScopeDeclarations_in_classBody5590 = new BitSet(new ulong[]{0x120000A14400010UL,0x404140A0400014UL,0x5004105212380UL});
		public static readonly BitSet _RCURLY_in_classBody5593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_interfaceBody5635 = new BitSet(new ulong[]{0x120000A14400010UL,0x404100A0400014UL,0x5004105212380UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceBody5637 = new BitSet(new ulong[]{0x120000A14400010UL,0x404100A0400014UL,0x5004105212380UL});
		public static readonly BitSet _RCURLY_in_interfaceBody5640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_classScopeDeclarations5678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classScopeDeclarations5707 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations5732 = new BitSet(new ulong[]{0x20000214000000UL,0x410020400010UL,0x1000000200000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations5746 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x1000000200000UL});
		public static readonly BitSet _type_in_classScopeDeclarations5765 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5767 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5769 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x1000010000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations5771 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5774 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_classScopeDeclarations5844 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5846 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5848 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5917 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5919 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5921 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_classScopeDeclarations5988 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_classScopeDeclarations5990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations6037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations6079 = new BitSet(new ulong[]{0x20000214000000UL,0x410020400010UL,0x1000000200000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations6093 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x1000000200000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6112 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6114 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6116 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x1000010000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations6118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_interfaceScopeDeclarations6182 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6184 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6188 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6254 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations6303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6333 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_classFieldDeclaratorList6336 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6338 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_classFieldDeclarator6377 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _ASSIGN_in_classFieldDeclarator6380 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _variableInitializer_in_classFieldDeclarator6382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6427 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaratorList6430 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6432 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_interfaceFieldDeclarator6471 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ASSIGN_in_interfaceFieldDeclarator6473 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _variableInitializer_in_interfaceFieldDeclarator6475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId6517 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId6520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer6540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer6550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator6569 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator6571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_arrayDeclaratorList6605 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _LCURLY_in_arrayInitializer6650 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D14028600032UL,0x1008218202002UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6653 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6656 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6658 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _RCURLY_in_arrayInitializer6667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROWS_in_throwsClause6705 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentList_in_throwsClause6707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifierList6744 = new BitSet(new ulong[]{0x400012UL,0x40000000000004UL,0x4004105000380UL});
		public static readonly BitSet _PUBLIC_in_modifier6785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier6795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier6805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier6815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier6825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier6835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier6845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier6855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier6865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier6875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier6885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_localModifierList6904 = new BitSet(new ulong[]{0x400002UL,0x4UL});
		public static readonly BitSet _FINAL_in_localModifier6945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier6955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleType_in_type6974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectType_in_type6984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_simpleType7004 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_simpleType7006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdent_in_objectType7053 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectType7055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_objectTypeSimplified7095 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectTypeSimplified7097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7137 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdent7140 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7142 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7182 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdentSimplified7185 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7187 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _IDENT_in_typeIdent7227 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent7230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_typeIdentSimplified7250 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_typeIdentSimplified7253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentList7362 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200800UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7364 = new BitSet(new ulong[]{0x20000800000UL,0x80000UL,0x80000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentList7367 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200800UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7369 = new BitSet(new ulong[]{0x20000800000UL,0x80000UL,0x80000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentList7373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgument7411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument7421 = new BitSet(new ulong[]{0x4000000000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument7423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_genericWildcardBoundType7465 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_genericWildcardBoundType7474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentListSimplified7493 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200800UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7495 = new BitSet(new ulong[]{0x20000800000UL,0x80000UL,0x80000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentListSimplified7498 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200800UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7500 = new BitSet(new ulong[]{0x20000800000UL,0x80000UL,0x80000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentListSimplified7504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgumentSimplified7546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgumentSimplified7556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7579 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_qualifiedIdentList7582 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7585 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _LPAREN_in_formalParameterList7610 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x208000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7638 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7641 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x200000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7643 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7648 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x200000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7650 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7707 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_formalParameterList7784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl7807 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl7809 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl7811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarArgDecl7855 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_formalParameterVarArgDecl7857 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _ELLIPSIS_in_formalParameterVarArgDecl7859 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarArgDecl7861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier7909 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier7952 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier7956 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _annotation_in_annotationList8009 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _AT_in_annotation8047 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation8050 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _annotationInit_in_annotation8052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_annotationInit8076 = new BitSet(new ulong[]{0x20600614400000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _annotationInitializers_in_annotationInit8078 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_annotationInit8080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8117 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_annotationInitializers8120 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8122 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers8152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_annotationInitializer8193 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ASSIGN_in_annotationInitializer8196 = new BitSet(new ulong[]{0x20600614400000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer8199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueExpression_in_annotationElementValue8222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_annotationElementValue8232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueArrayInitializer_in_annotationElementValue8242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_annotationElementValueExpression8265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationElementValueArrayInitializer8305 = new BitSet(new ulong[]{0x20620614400000UL,0x1582D14028600032UL,0x1008218202002UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8308 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8311 = new BitSet(new ulong[]{0x20600614400000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8313 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8320 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _RCURLY_in_annotationElementValueArrayInitializer8324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_annotationTypeDeclaration8367 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration8369 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_annotationTypeDeclaration8371 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _annotationBody_in_annotationTypeDeclaration8373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationBody8416 = new BitSet(new ulong[]{0x120000A14400010UL,0x404000A0400014UL,0x4004105202380UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationBody8418 = new BitSet(new ulong[]{0x120000A14400010UL,0x404000A0400014UL,0x4004105202380UL});
		public static readonly BitSet _RCURLY_in_annotationBody8421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations8463 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations8465 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations8479 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_annotationScopeDeclarations8481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_annotationScopeDeclarations8483 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations8485 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_annotationScopeDeclarations8530 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations8577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue8600 = new BitSet(new ulong[]{0x20600614400000UL,0x1582D14028600032UL,0x1008218200002UL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue8603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_block8624 = new BitSet(new ulong[]{0x124700E1C500010UL,0x15C2D140A8E000B6UL,0xD01CB5D216382UL});
		public static readonly BitSet _blockStatement_in_block8626 = new BitSet(new ulong[]{0x124700E1C500010UL,0x15C2D140A8E000B6UL,0xD01CB5D216382UL});
		public static readonly BitSet _RCURLY_in_block8629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement8667 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_blockStatement8669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement8680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement8690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration8713 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_localVariableDeclaration8715 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_localVariableDeclaration8717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement8770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement8780 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_statement8784 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COLON_in_statement8799 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_statement8803 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement8805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement8868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement8957 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement8959 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement8963 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _ELSE_in_statement8978 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement8982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_statement9148 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_statement9150 = new BitSet(new ulong[]{0x20600614400000UL,0x1582D10028600036UL,0x1008218210002UL});
		public static readonly BitSet _forInit_in_statement9165 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9167 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218210002UL});
		public static readonly BitSet _forCondition_in_statement9169 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9171 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218208002UL});
		public static readonly BitSet _forUpdater_in_statement9173 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_statement9175 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement9177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_statement9212 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_statement9214 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_statement9216 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _COLON_in_statement9218 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_statement9220 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_statement9222 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement9224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement9339 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9341 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement9343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement9392 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement9394 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _WHILE_in_statement9396 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9398 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_statement9441 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_statement9443 = new BitSet(new ulong[]{0x80000000UL,0x8UL});
		public static readonly BitSet _catches_in_statement9446 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _finallyClause_in_statement9448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_statement9453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement9496 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9498 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _LCURLY_in_statement9500 = new BitSet(new ulong[]{0x800020000000UL});
		public static readonly BitSet _switchBlockLabels_in_statement9502 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _RCURLY_in_statement9504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement9530 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9532 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_statement9534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement9580 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218210002UL});
		public static readonly BitSet _expression_in_statement9582 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement9649 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_statement9651 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement9718 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x10000UL});
		public static readonly BitSet _IDENT_in_statement9720 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement9793 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x10000UL});
		public static readonly BitSet _IDENT_in_statement9795 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_statement9865 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _COLON_in_statement9867 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_statement9869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement9936 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_statement9938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement9949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches9988 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _CATCH_in_catchClause10030 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_catchClause10033 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x200000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause10036 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_catchClause10038 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_catchClause10041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause10060 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_finallyClause10062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10094 = new BitSet(new ulong[]{0x800020000000UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels10096 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_switchCaseLabels10144 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _CASE_in_switchCaseLabel10172 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_switchCaseLabel10175 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _COLON_in_switchCaseLabel10177 = new BitSet(new ulong[]{0x124700E1C500012UL,0x15C2D140A8E000B6UL,0xD01CB5D214382UL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel10180 = new BitSet(new ulong[]{0x124700E1C500012UL,0x15C2D140A8E000B6UL,0xD01CB5D214382UL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel10204 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _COLON_in_switchDefaultLabel10207 = new BitSet(new ulong[]{0x124700E1C500012UL,0x15C2D140A8E000B6UL,0xD01CB5D214382UL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel10210 = new BitSet(new ulong[]{0x124700E1C500012UL,0x15C2D140A8E000B6UL,0xD01CB5D214382UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit10234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit10256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_forCondition10344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forUpdater10386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parenthesizedExpression10426 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_parenthesizedExpression10428 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_parenthesizedExpression10430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList10471 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_expressionList10474 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_expressionList10477 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _assignmentExpression_in_expression10498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression10534 = new BitSet(new ulong[]{0x2000001200042UL,0x4024000000000000UL,0x40000000940004UL});
		public static readonly BitSet _ASSIGN_in_assignmentExpression10553 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _PLUS_ASSIGN_in_assignmentExpression10572 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _MINUS_ASSIGN_in_assignmentExpression10591 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _STAR_ASSIGN_in_assignmentExpression10610 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _DIV_ASSIGN_in_assignmentExpression10629 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _AND_ASSIGN_in_assignmentExpression10648 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _OR_ASSIGN_in_assignmentExpression10667 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _XOR_ASSIGN_in_assignmentExpression10686 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _MOD_ASSIGN_in_assignmentExpression10705 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_assignmentExpression10724 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_assignmentExpression10743 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10762 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression10784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOrExpression_in_conditionalExpression10809 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800UL});
		public static readonly BitSet _QUESTION_in_conditionalExpression10812 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression10815 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression10817 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression10820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10841 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _LOGICAL_OR_in_logicalOrExpression10844 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10847 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression10868 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _LOGICAL_AND_in_logicalAndExpression10871 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression10874 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression10895 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression10898 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression10901 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression10922 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression10925 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression10928 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression10949 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_andExpression10952 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _equalityExpression_in_andExpression10955 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression10976 = new BitSet(new ulong[]{0x400000000000002UL,0x200000000000000UL});
		public static readonly BitSet _EQUAL_in_equalityExpression10995 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _NOT_EQUAL_in_equalityExpression11014 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression11044 = new BitSet(new ulong[]{0x400000000000002UL,0x200000000000000UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression11074 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression11077 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_instanceOfExpression11080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11101 = new BitSet(new ulong[]{0x2UL,0x180000C0000UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_relationalExpression11120 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_relationalExpression11139 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _LESS_THAN_in_relationalExpression11158 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _GREATER_THAN_in_relationalExpression11177 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11206 = new BitSet(new ulong[]{0x2UL,0x180000C0000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11240 = new BitSet(new ulong[]{0x800002UL,0x0UL,0xA0000UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_shiftExpression11258 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _SHIFT_RIGHT_in_shiftExpression11277 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _SHIFT_LEFT_in_shiftExpression11296 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11325 = new BitSet(new ulong[]{0x800002UL,0x0UL,0xA0000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11355 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL,0x2UL});
		public static readonly BitSet _PLUS_in_additiveExpression11373 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _MINUS_in_additiveExpression11392 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11421 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL,0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11451 = new BitSet(new ulong[]{0x1000000000002UL,0x8000000000000UL,0x400000UL});
		public static readonly BitSet _STAR_in_multiplicativeExpression11470 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression11489 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression11508 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11537 = new BitSet(new ulong[]{0x1000000000002UL,0x8000000000000UL,0x400000UL});
		public static readonly BitSet _PLUS_in_unaryExpression11571 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unaryExpression11600 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryExpression11628 = new BitSet(new ulong[]{0x20400614000000UL,0x1480C10020600032UL,0x1008218200000UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpression11630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryExpression11654 = new BitSet(new ulong[]{0x20400614000000UL,0x1480C10020600032UL,0x1008218200000UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpression11656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression11680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryExpressionNotPlusMinus11699 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOGICAL_NOT_in_unaryExpressionNotPlusMinus11748 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_unaryExpressionNotPlusMinus11789 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_unaryExpressionNotPlusMinus11791 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_unaryExpressionNotPlusMinus11793 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpressionNotPlusMinus11830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_postfixedExpression11866 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression11928 = new BitSet(new ulong[]{0x0UL,0x80010000400000UL,0x210000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_postfixedExpression11978 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12060 = new BitSet(new ulong[]{0x8200000000002UL,0x802008000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12139 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _THIS_in_postfixedExpression12213 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12276 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12278 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12331 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression12335 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12337 = new BitSet(new ulong[]{0x8200000000002UL,0x802008000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12404 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _innerNewExpression_in_postfixedExpression12475 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _LBRACK_in_postfixedExpression12532 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_postfixedExpression12534 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _RBRACK_in_postfixedExpression12536 = new BitSet(new ulong[]{0x8200000000002UL,0x2008000000UL});
		public static readonly BitSet _INC_in_postfixedExpression12597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixedExpression12621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression12669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression12679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression12689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentExpression_in_primaryExpression12699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_primaryExpression12709 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x210000000UL});
		public static readonly BitSet _SUPER_in_primaryExpression12724 = new BitSet(new ulong[]{0x8000000000000UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression12802 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_primaryExpression12804 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression12873 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression12930 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression12997 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13130 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13188 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13190 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_primaryExpression13192 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primaryExpression13358 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclarator_in_primaryExpression13417 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13480 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primaryExpression13542 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13544 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentExpression13626 = new BitSet(new ulong[]{0x8000000000002UL,0x802000000000UL});
		public static readonly BitSet _arrayDeclarator_in_qualifiedIdentExpression13696 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13764 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression13836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13897 = new BitSet(new ulong[]{0x800000000UL,0x80010000000000UL,0x210000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_qualifiedIdentExpression13978 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x10000000UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14003 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14055 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression14059 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14061 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14113 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_qualifiedIdentExpression14190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14256 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_qualifiedIdentExpression14306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression14382 = new BitSet(new ulong[]{0x20000214000000UL,0x410020400010UL,0x200000UL});
		public static readonly BitSet _primitiveType_in_newExpression14398 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_newExpression14444 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_newExpression14447 = new BitSet(new ulong[]{0x0UL,0x802000000000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_newExpression14530 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_newExpression14532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_innerNewExpression14631 = new BitSet(new ulong[]{0x0UL,0x10000400000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_innerNewExpression14633 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression14636 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_innerNewExpression14638 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_innerNewExpression14640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14686 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction14688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14698 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_newArrayConstruction14701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14703 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14707 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_newArrayConstruction14710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14712 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments14737 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218208002UL});
		public static readonly BitSet _expressionList_in_arguments14739 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_arguments14742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_synpred14_Java5125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_synpred15_Java5135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_synpred16_Java5145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bound_in_synpred17_Java5175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_synpred32_Java5707 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred32_Java5709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred42_Java5746 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x1000000200000UL});
		public static readonly BitSet _type_in_synpred42_Java5765 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred42_Java5767 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred42_Java5769 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x1000010000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred42_Java5771 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred42_Java5774 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000UL});
		public static readonly BitSet _block_in_synpred42_Java5778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred42_Java5782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred42_Java5844 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred42_Java5846 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred42_Java5848 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred42_Java5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000UL});
		public static readonly BitSet _block_in_synpred42_Java5854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred42_Java5858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred42_Java5917 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred42_Java5919 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000000000UL});
		public static readonly BitSet _throwsClause_in_synpred42_Java5921 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred42_Java5924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred43_Java5732 = new BitSet(new ulong[]{0x20000214000000UL,0x410020400010UL,0x1000000200000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred43_Java5746 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x1000000200000UL});
		public static readonly BitSet _type_in_synpred43_Java5765 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5767 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5769 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x1000010000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred43_Java5771 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5774 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000UL});
		public static readonly BitSet _block_in_synpred43_Java5778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred43_Java5844 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5846 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5848 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000UL});
		public static readonly BitSet _block_in_synpred43_Java5854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5917 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5919 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x1000000000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5921 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred43_Java5924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred43_Java5988 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred43_Java5990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred44_Java6037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred50_Java6093 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x1000000200000UL});
		public static readonly BitSet _type_in_synpred50_Java6112 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred50_Java6114 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred50_Java6116 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x1000010000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred50_Java6118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred50_Java6121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred50_Java6124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred50_Java6182 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred50_Java6184 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred50_Java6186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred50_Java6188 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred50_Java6191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred51_Java6079 = new BitSet(new ulong[]{0x20000214000000UL,0x410020400010UL,0x1000000200000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred51_Java6093 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x1000000200000UL});
		public static readonly BitSet _type_in_synpred51_Java6112 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred51_Java6114 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred51_Java6116 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x1000010000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred51_Java6118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred51_Java6121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred51_Java6124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred51_Java6182 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred51_Java6184 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred51_Java6186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000010000UL});
		public static readonly BitSet _throwsClause_in_synpred51_Java6188 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred51_Java6191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred51_Java6254 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_synpred51_Java6256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred51_Java6258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred52_Java6303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred58_Java6605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred76_Java7006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred77_Java7055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred79_Java7140 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _typeIdent_in_synpred79_Java7142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred90_Java7367 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200800UL});
		public static readonly BitSet _genericTypeArgument_in_synpred90_Java7369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericWildcardBoundType_in_synpred92_Java7423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred97_Java7641 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x200000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred97_Java7643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred99_Java7638 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_synpred99_Java7641 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x200000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred99_Java7643 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _COMMA_in_synpred99_Java7648 = new BitSet(new ulong[]{0x20000214400000UL,0x400020400014UL,0x200000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred99_Java7650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred100_Java7707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred101_Java7952 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred101_Java7956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_synpred102_Java8009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred114_Java8463 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_synpred114_Java8465 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred114_Java8479 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_synpred114_Java8481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_synpred114_Java8483 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _annotationDefaultValue_in_synpred114_Java8485 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred114_Java8488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred114_Java8530 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred114_Java8532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred116_Java8667 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred116_Java8669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred117_Java8680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred121_Java8978 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_synpred121_Java8982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInit_in_synpred123_Java9165 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred123_Java9167 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218210002UL});
		public static readonly BitSet _forCondition_in_synpred123_Java9169 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_synpred123_Java9171 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218208002UL});
		public static readonly BitSet _forUpdater_in_synpred123_Java9173 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_synpred123_Java9175 = new BitSet(new ulong[]{0x2470061C100000UL,0x1582D14028E000B2UL,0x9018B58214002UL});
		public static readonly BitSet _statement_in_synpred123_Java9177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_synpred143_Java10144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred146_Java10234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_synpred147_Java10256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred190_Java11789 = new BitSet(new ulong[]{0x20000214000000UL,0x400020400010UL,0x200000UL});
		public static readonly BitSet _type_in_synpred190_Java11791 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RPAREN_in_synpred190_Java11793 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _unaryExpression_in_synpred190_Java11795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred218_Java13696 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000000UL});
		public static readonly BitSet _DOT_in_synpred218_Java13764 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _CLASS_in_synpred218_Java13766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred226_Java13897 = new BitSet(new ulong[]{0x800000000UL,0x80010000000000UL,0x210000000UL});
		public static readonly BitSet _CLASS_in_synpred226_Java13915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred226_Java13978 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x10000000UL});
		public static readonly BitSet _SUPER_in_synpred226_Java14003 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred226_Java14005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred226_Java14055 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _DOT_in_synpred226_Java14059 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred226_Java14061 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred226_Java14063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred226_Java14113 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred226_Java14115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_synpred226_Java14190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred226_Java14256 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred226_Java14258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_synpred226_Java14306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_synpred234_Java14707 = new BitSet(new ulong[]{0x20600614000000UL,0x1582D10028600032UL,0x1008218200002UL});
		public static readonly BitSet _expression_in_synpred234_Java14710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _RBRACK_in_synpred234_Java14712 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  JavaCompiler 
